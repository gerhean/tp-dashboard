[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "# AY20/21 Sem 1 CS2103-F09-2 Team Project (PIVOT)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Morphing AB3 into a Police Investigation Virtual Organisational Tool (PIVOT)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "PIVOT is an app to assist police investigators in keeping track of their investigations and relevant information. This is a brownfield Java Project built for CS2103 tP. \u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   ![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "For the detailed documentation of this project, see the [PIVOT Product Website](https://ay2021s1-cs2103-f09-2.github.io/tp/)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Refer to [About Us](https://ay2021s1-cs2103-f09-2.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Refer to [User Guide](https://ay2021s1-cs2103-f09-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Developer\u0027s Guide"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Refer to [Developer\u0027s Guide](https://ay2021s1-cs2103-f09-2.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Setup"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Prerequisites: JDK 11, Gradle."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "To run the app: (To be updated)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Download the .jar file from the releases and run it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "_or_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Clone the repository"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "2. Using your IDE (eg. Intellij), open the build.gradle file inside the repository"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "3. When prompted, choose \u0027open as project\u0027 and let gradle setup the project"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "4. Run the app using gradle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "## Build status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-2/tp/actions)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Build Information"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Setup Github Actions: https://se-education.org/guides/tutorials/githubActions.html"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Code Style"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Follows CS2103 Coding Practices: https://se-education.org/guides/tutorials/checkstyle.html"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "Vielheim": 30,
      "constancensq": 12
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "mainClassName \u003d \u0027seedu.pivot.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    archiveName \u003d \u0027pivot.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 70,
      "constancensq": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "You can reach us at the email `e0388997@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "### Terence Ho Wei Yang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cimg src\u003d\"images/vielheim.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[[github](https://github.com/vielheim)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* Responsibilities: Overall project coordination. Ensures team is on schedule."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "### Wong Wen Wei Esmanda"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cimg src\u003d\"images/esmanda3w.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "[[github](http://github.com/esmanda3w)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* Responsibilities: Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "### Neil Gupta"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "\u003cimg src\u003d\"images/jargonx.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "[[github](http://github.com/jargonx)]][[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* Responsibilities: Reviewing of PRs, making sure code fits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "### Ng Shuo Qi, Constance"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "\u003cimg src\u003d\"images/constancensq.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[[github](http://github.com/constancensq)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* Responsibilities: Responsible for the quality of various project documents."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "### Cody Chew"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cimg src\u003d\"images/codychew.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "[[github](http://github.com/CodyChew)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* Role: Code Quality"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* Responsibilities: Looks after code quality,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "ensures adherence to coding standards, etc."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Jon Chua (Supervisor)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Prof Damith (Lecturer)"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "Jargonx": 5,
      "CodyChew": 12,
      "-": 33,
      "Vielheim": 5,
      "constancensq": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The rest of the App consists of five components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* [**`State`**](#state-component): Holds the states of the App while the app is active."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The first four components,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "For state component, it is managed by two classes:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* `StateManager` class which provides general access to the state of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* `UIStateManager` class which provides the GUI access to the state of the app."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Example of architecture: The `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/ui/Ui.java)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* Listens for changes to `State` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The example for observing states is illustrated with the Sequence Diagram below."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `MainWindow` observes the `UiStateManager` for any changes to its internal state."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Upon invoking `open case 1`, the state changes and the `MainWindow` if notified by its `Observer`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It then retrieves the information it requires and displays on its display panel."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Structure of the Ui Component when updating state](images/UiStateSequenceDiagram.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. `Logic` uses the `PivotParser` class to parse the user command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. The command execution can affect the `Model` (e.g. deleting a case)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete case 1\")` API call."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "![Interactions Inside the Logic Component for the `delete case 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "The case below follows the same execution above. However, the AddCommandParser further calls the AddCaseCommandParser which returns the respective AddCaseCommand, which has been extended from the AddCommand Class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "![Interactions Inside the Logic Component for the `add case t:Stolen TV` Command](images/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AddCommandParser` and `AddCaseCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**API** : [`Model.java`](hhttps://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/model/Model.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCase\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/storage/Storage.java)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* can save Pivot\u0027s data in json format and read it back."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "### State component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Structure of the State Component](images/StateClassDiagram.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "**API** : [`StateManager.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/logic/state/StateManager.java), [`UiStateManager.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/ui/UiStateManager.java)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `StateManager` component,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can set the state for an opened `Case` in the app, denoted by its `Index`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can reset the state."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can return the state."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can request the `UiStateManager` to refresh its state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `UiStateManager` component,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can set the state for an opened `Case` in the app, denoted by its `Index`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can reset the state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can refresh its state."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "When the `StateManager` modifies its State, it will also call upon `UiStateManager` to update its state as well."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This triggers any observation set on the respective `State` managers by the other components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "One such example can be found in the `UI` component."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Classes used by multiple components are in the `seedu.pivot.commons` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "### Open Case/Return feature"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `open case` command allows the user to open an investigation case listed on the `Main Page` in the GUI."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PIVOT then extracts and displays the key information about the `Case` in the `Case Page` Panel."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "#### Implementation: Open Case"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `open case` mechanism is facilitated by `OpenCaseCommand`. It extends abstract class `OpenCommand` and contains a target `Index` of the `Case` to be opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It implements `OpenCaseCommand#execute()` as required in the abstract parent class. The Sequence Diagram below shows how the `OpenCaseCommand` works."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Interactions Inside the Logic Component for the `open case 1` Command](images/OpenCaseSequenceDiagram.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "As the user invokes `open case [INDEX]`, the arguments are passed from the GUI to the `Logic` component, which is then passed to the `Parser`, implemented by `PivotParser`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "In `PivotParser`, the arguments are processed and passed onto the `OpenCommandParser` to further process the arguments and create a new `OpenCaseCommand`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** TWhen the user gives an invalid `type`, such as `open suspect 1`, `OpenCommandParser` will raise and error and display the proper command format for the user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Upon invoking `OpenCaseCommand#execute()`, the class will extract the `Case` that is to be opened, and update the state in `StateManager`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Upon observing a change in state, the GUI will then extract the `Case` and update its display panel with the case information."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** When the user gives an invalid `Index`, such as `open case -1`, `OpenCaseCommand` will raise and error and display the proper command format for the user."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "#### Implementation: Return"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `return` mechanism is facilitated by `ReturnCommand`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It allows the user to close the `Case Page` panel and return to the `Main Page`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Its implementation is similar to the `OpenCaseCommand` except it resets the state in `StateManager` instead of setting a state."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Interactions Inside the Logic Component for the `return` Command](images/ReturnSequenceDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "### Including Documents to PIVOT"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Reference class"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The `Reference` class represents a file location in the directory `./references` of the program. A `reference` only"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "exists if there is a file present at the file location in the user\u0027s local directory. The validity of a"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`reference` depends on the user\u0027s operating system and the different acceptable file names. A `reference` object must"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "have a valid file name on creation."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Document class"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The `Document` class represents a file on the user\u0027s local computer. It contains a `name` for easy viewing"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "and a `reference` to the file location. It is used for tracking files that are stored in PIVOT and for opening"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "of documents."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "![Structure of the Document Component](images/DocumentClassDiagram.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The documents are stored in a list for a particular case and you can only manipulate"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "documents(adding, deleting, opening) while inside a `case`. This is because the program stores a state of which"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "interface (main page or case) the user is at and will manipulate the documents according to the `document list` in that"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "current `case`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Adding a Document"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "When a user executes `add doc n:name r:reference.txt`, to add a document with the specified name and file reference"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "to the current \"opened\" case in the state, `addDocumandCommandParser` will be invoked to parse the"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "name (prefixed with n:) and reference (prefixed with r:) inputs. The program must be at an \"opened\" case at this point."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`addDocumandCommandParser` will check for a valid name as well as a valid"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "reference that exists in the `./references` directory. This is to prevent a user from creating a document when the"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "program is active when they have yet to include the file in the program\u0027s directory. The appropriate error message"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "should be returned for a better user experience. It will then successfully create a `Document` and"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "return `addDocumandCommand`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`addDocumandCommand` will get the current `case` in the program `state` and adds the new `Document` to this `case`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "It will check for duplicated documents at this point as this is where the program accesses the list of documents in the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "current state. The `model` will then be updated with the updated `case`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The following sequence diagram shows adding a document to the current case: \u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "![Adding a document to current case](images/AddDocumentDiagram.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Deleting a Document"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deleting a document works about the same as adding a document. When a user executes `delete doc 2`, to delete the"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "second `document` in the list of documents of the current \"opened\" case in the state. The program must be at an"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\"opened\" case at this point.`DeleteCommandParser` parses the given index as a `Index` object and gets the `case index`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "in the current state. It returns `DeleteDocumentCommand` if the inputs are valid."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`DeleteDocumentCommand` gets the list of documents in the current case using the `case index` and checks if the"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "input `index` is within bounds. The check occurs in the `Command` rather than `DeleteDocumentParser` so that we"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "can distinguish between `ParseException` and `CommandException`. The command then removes the specified `document`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "in the list and updates the `model`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The following activity diagram shows a successful delete document operation at a case page: \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "![Deleting a document to current case](images/DeleteDocumentDiagram.png)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "##### Aspect: For `Reference` object, separate validity (of the String) and existence (of the actual file path) checks."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 1 (current choice):** A reference object can be both valid but doesn\u0027t exists at the same time."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Pros: A document file deletion on the user\u0027s local machine will not affect loading the current cases in the Json"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   file"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Cons: More prone to bugs"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 2:** A reference object must be both valid and exists to be created."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Pros: A document is only created when we know there is a valid and existing `Reference`. Easier for testing."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Cons: The program cannot load if there is a missing file (due to external user deletion) which was previously"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     saved in the Json file"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "##### Aspect: Integrate `ReferenceStorage` with current Storage Design"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 1 (current choice):** Separate `ReferenceStorage` to handle all `Reference` and storage interactions."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Pros: Easier to implement and increases cohesion."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Cons: More classes and code in the program"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 2:** Make use of `Config.java` and `UserPrefsStorage` to integrate `ReferenceStorage` such as saving"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "default file paths."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Pros: Makes use of existing infrastructure, lesser code and possibly lesser code duplication."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Cons: Increased coupling, more prone to bugs and harder to test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "### Undo/Redo feature"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "The undo/redo feature is facilitated by `VersionedPivot`. It extends `Pivot` with an undo/redo history, "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "stored internally as an `pivotStateList` and `currentStatePointer`. It also stores the corresponding commands "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "for each state in the `pivotStateList` as `commands`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionedPivot#canUndo()` — Indicates whether the current state can be undone."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionedPivot#canRedo()` — Indicates whether the current state can be redone."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionedPivot#commit(ReadOnlyPivot pivot, String command)` — Saves the current Pivot state as well as the "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "corresponding command that was called in its history."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionePivot#undo()` — Restores the previous Pivot state from its history."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionedPivot#redo()` — Restores a previously undone Pivot state from its history."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionedPivot#purgeStates()` — Purges the all the states after the current pointer."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#canUndoPivot()`,`Model#canRedoPivot()`, "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "`Model#commitPivot(String command)`, `Model#undoPivot()` and `Model#redoPivot()` respectively."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedPivot` will be initialized with the initial Pivot state,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "and the `currentStatePointer` pointing to that single Pivot state."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 2. The user executes `delete case 5` command to delete the 5th case in Pivot. The `delete` command calls `Model#commitPivot(String command)`, "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "causing the modified state of Pivot and the command message displayed to the user after the `delete case 5` command executes to be saved in "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "`pivotStateList` and `commands` respectively. The `currentStatePointer` is shifted to the newly inserted Pivot state."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 3. The user executes `add case t:Lost Wallet …​` to add a new case. The `add case` command also calls `Model#commitPivot(String command)`, "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "causing another modified Pivot state and its corresponding command message to be saved into `pivotStateList` and `commands`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitPivot(String command)`, "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "so the Pivot state and the corresponding command message will not be saved into `pivotStateList` and `commands`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 4. The user now decides that adding the case was a mistake, and decides to undo that action by executing the `undo` command. "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "The `undo` command will call `Model#undoPivot()`, which will retrieve the corresponding command message at the current state from `commands`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "to be displayed to the user the exact command that is being undone. The `currentStatePointer` will also be shifted once to the left, "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "pointing it to the previous Pivot state, and restores Pivot to that state."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "initial Pivot state, then there are no previous Pivot states to restore. The `undo` command uses `Model#canUndoPivotk()` to check if this"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoPivot()`, which shifts the `currentStatePointer` once"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "to the right, pointing to the previously undone state, and restores Pivot to that state. The corresponding command message"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "at this new current state will be retrieved from `commands` to be displayed to the user the exact command that is being redone."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "`pivotStateList.size() - 1`, pointing to the latest Pivot state, then there are no undone Pivot states to restore."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "The `redo` command uses `Model#canRedoPivot()` to check if this is the case. If so, it will return an error to the user"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "rather than attempting to perform the redo."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify Pivot, such as `list`, will"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "usually not call `Model#commitPivot(String command)`. Thus, the `pivotStateList` remains unchanged."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitPivot(String command)`. Since the `currentStatePointer` is not"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "pointing at the end of the `pivotStateList`, all Pivot states after the `currentStatePointer` will be purged. Reason: It"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "no longer makes sense to redo the `add case t:Lost Wallet …​` command. This is the behavior that most modern desktop"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "applications follow."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "##### Aspect: How undo executes"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* **Alternative 1 (current implementation):** Saves the entire Pivot."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo by"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete case`, just save the case being deleted)."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* police investigators who require an organisational tool"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* has a need to manage a significant number of investigation cases"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* prefer a structured app to organise information related to their cases"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* has a basic understanding of file paths to manage his/her files"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "A lot of detectives use physical folders, whiteboards to consolidate their investigation information."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This uses up a lot of physical resources such as printing papers."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "There may also exist cluttered information across multiple cases."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This leads to disorganisation of evidence and documents during investigations,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "which makes it difficult to link the investigation together."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Furthermore, physically looking through archive files can be time-consuming, and"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "they might miss out important information in the process."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PIVOT can help to better organise investigation cases and"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "group the relevant information on a digital platform."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This helps investigators to manage and easily locate the required information."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It also links up relations between people for better visualisation of the case so that detectives will not miss any information."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PIVOT can assist to manage investigation cases faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                             |"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | create investigation cases with a relevant title                                  | store resources inside                                   |"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | view the list of investigation cases stored in PIVOT                              |                                                          |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | indicate and see the state of different cases (e.g. closed/in-progress/cold case) | edit or see the statuses of my cases                     |"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | add a description to an investigation case                                        | capture key information about the investigation case     |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | delete investigation cases                                                        | delete unwanted cases or cases that are wrongly created  |"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | open investigation cases easily and view the files that are stored inside         | retrieve the necessary information for those who need it |"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | add relevant documents to an investigation case                                   |                                                          |"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | view the list of documents relevant to an investigation case                      |                                                          |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete irrelevant documents to an investigation case                              | remove outdated documents                                |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | view the list of suspects tied to an investigation case                           | refer to all suspects in an investigation case           |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | add a list of suspects tied to an investigation case                              |                                                          |"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete suspects tied to an investigation case                                     | delete irrelevant suspects                               |"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | view the list of witnesses tied to an investigation case                          | refer to all witnesses in an investigation case          |"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | add a list of witnesses tied to an investigation case                             |                                                          |"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete witnesses tied to an investigation case                                    | delete irrelevant witnesses                              |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | view the list of victims tied to an investigation case                            | refer to all victims in an investigation case            |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | add a list of victims tied to an investigation case                               |                                                          |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete victims tied to an investigation case                                      | delete irrelevant victims                                |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | close the application when I am done using it                                     | safely exit the application                              |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "(For all use cases below, the **System** is the `PIVOT` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Add Investigation Case**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1.  User requests to create a new active investigation case and specifies a title"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2.  PIVOT adds the new investigation case"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 1a. The title is empty."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 1a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\t  Use case ends."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: List Investigation Case**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1.  User requests to list investigation cases"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2.  PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Delete Investigation Case**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "3. User requests to delete a specific investigation case in the list"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "4. PIVOT deletes the investigation case"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Open Investigation Case**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "3. User requests to open a specific investigation case in the list"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "4. PIVOT navigates to the specified investigation case page"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Tag Investigation Case**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "3. User specifies an investigation case"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "4. PIVOT navigates to the specified investigation case page"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "5. User requests to tag the investigation case with specific tag"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "6. PIVOT tags the investigation case with specified tag"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 5a. The given tag is invalid."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 5a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 5."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Add Description for an Investigation Case**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "constancensq"
        },
        "content": "3. User specifies an investigation case"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "constancensq"
        },
        "content": "4. PIVOT navigates to the specified investigation case page"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "constancensq"
        },
        "content": "5. User requests to add a description to the investigation case"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "constancensq"
        },
        "content": "6. PIVOT adds the description to the investigation case"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 5a. The given description is empty."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 5a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 5."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Add Document to Investigation Case**"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to add a document to investigation case, specifies a document title and reference"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT adds a new document to the investigation case"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 1a. The title is empty."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 1a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 1b. The reference is empty."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 1b1. PIVOT shows an error message."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 1c. The reference is invalid."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 1c1. PIVOT shows an error message."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: List Document related to Investigation Case**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list documents related to the case"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of documents related to the case"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Delete Document from Investigation Case**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "constancensq"
        },
        "content": "3. User requests to delete a specific investigation case in the list"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "constancensq"
        },
        "content": "4. PIVOT deletes the investigation case"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Open Document**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list documents"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of documents"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "constancensq"
        },
        "content": "3. User requests to open a specific document in the list"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "constancensq"
        },
        "content": "4. PIVOT opens the specified document"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 4a. The specified document does not exist in the saved reference."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 4a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Add Person[Suspect/Witness/Victim] in Investigation Case**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. User requests to open a specific investigation case in the list"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "4. PIVOT opens the specified investigation case"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "5. User requests to add a person to a specified category (suspect/witness/victim)."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "6. PIVOT adds the person to a specified category (suspect/witness/victim)."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 5a. The given category of person to add is invalid."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    * 5a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: List Person[Suspect/Witness/Victim] in Investigation Case**"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list Persons related to the case."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of Persons related to the case."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Delete Person[Suspect/Witness/Victim] in Investigation Case**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list all Persons"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of all Persons"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. User requests to delete a specific Person from the list"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "4. PIVOT deletes the Person"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Return to the Main Page**"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. User requests to open a specific investigation case in the list"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "4. PIVOT navigates to the specified investigation case"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "5. User requests to navigate to the main page"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "6. PIVOT navigates to the main page"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 1a. User requests to navigate to the main page."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Exit Application**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to exit the application"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT terminates."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "4.  The system should not take above 2 seconds to execute any command."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Investigation Case**: The investigation case encapsulating all relevant data the police wants to keep track of"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Investigation Case Tag**: The status of the case (Active/In-Progress, Closed, Cold Case)"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Document**: An actual document/file stored in the project directory"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Person**: Data stored in the investigation case (For suspects, witnesses or victims related)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **File Paths**: System Location of the specified file inside the project directory"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 91,
      "CodyChew": 87,
      "esmanda3w": 108,
      "-": 308,
      "Vielheim": 96,
      "constancensq": 114
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Police Investigation Virtual Organisational Tool (PIVOT) is a **desktop app to assist the police investigators in keeping track of their investigations and relevant information. It is optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "If you can type fast, PIVOT can manage your investigation cases faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Download the latest release from [here](https://github.com/AY2021S1-CS2103-F09-2/tp/releases)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for PIVOT."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   * **`list case`** : Lists all investigation cases."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   * **`add case`**` t:Kovan double murders` : Adds a case named `Kovan double murders` to PIVOT."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   * **`open case`**`1` : Opens the 1st case shown in the current list in the right panel with more details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   * **`add victim`**` n:Joseph g:M` : Adds a victim in the current opened case."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   * **`return`** : Returns to the main page and closes the details on the right panel."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "   * **`delete`**`case 3` : Deletes the 3rd case shown in the current list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* Words in `UPPER_CASE` are parameters supplied by the user. Words in `[SQUARE_BRACKETS]`(with square brackets) optional parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "  e.g. in `add case t:TITLE`, `TITLE` is a parameter which can be used as `add case t:Kovan double murders`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "### Main page"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "The main page of the application when the user first enters the app."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### List all default investigation cases: `list case`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Lists all default investigation cases in PIVOT (unarchived cases)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `list case`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### List all archived investigation cases: `list archive`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Lists all archived investigation cases in PIVOT."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `list archive`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "#### Adding an investigation case: `add case t:TITLE [s:STATUS]`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Adds a new investigation case which has the active status by default, if not specified. The user can provide 3 status types:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. `ACTIVE`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. `CLOSED`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. `COLD`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "The case will be added to the DEFAULT/ARCHIVED section, depending on which section they are currently in. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Format: `add case t:TITLE [s:STATUS]`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* The title must be alphanumeric and cannot be blank"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* `add case t:Kovan double murders` creates a new investigation case with the title “Kovan double murders”, the status initialized as an active case."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* `add case t:Kovan double murders s:Closed` creates a new investigation case with the title “Kovan double murders”, the status initialized as a closed case."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Delete an investigation case: `delete case CASE_NO`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Deletes the specified investigation case."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `delete case CASE_NO`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `list case` followed by `delete case 2` deletes the 2nd case in the investigation list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Open an investigation case: `open case CASE_NO`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Enters the specified investigation case where users can add more information regarding the case"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "(see Investigation Case Page)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format:  `open case CASE_NO`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `list case` followed by `open case 1` opens the 1st case in the investigation list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "#### Archiving an investigation case in the DEFAULT section: `archive case CASE_NO`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Archives the specified investigation case in the DEFAULT section of Pivot."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Format:  `archive case CASE_NO`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Example: `list case` followed by `archive case 1` archives the 1st case in the investigation list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "#### Unarchiving an investigation case in the ARCHIVED section: `unarchive case CASE_NO`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Unarchives the specified investigation case in the ARCHIVED section of Pivot."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Format:  `unarchive case CASE_NO`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Example: `list archive` followed by `unarchive case 1` unarchives the 1st case in the investigation list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "#### Finding an investigation case: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Finds investigation cases whose details contains any of the given keywords."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* The search is case-insensitive. e.g keyword `hans` will match case containing `Hans` in its details"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* The order of the keywords does not matter. e.g. keywords `Hans Bo` will match case containing `Bo Hans` in its details"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* The search finds cases depending on which section they are in. If they are in the DEFAULT section, cases found are in DEFAULT section only."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "constancensq"
        },
        "content": " If they are in the ARCHIVED section, cases found are in the ARCHIVED section only. Note that on start-up, they are in the DEFAULT section,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": " and can alternate between sections using [`list case`](#list-all-investigation-cases-list-case) or [`list archive`](#list-all-investigation-cases-list-archive)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* All details of all cases in the relevant section (ARCHIVED/DEFAULT) are searched, specifically: Title, Status, Description, "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Documents (file name and file reference that the users input on creation), Suspects/Witnesses/Victims (Name, Gender, Phone, Email, Address)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* Only full words will be matched e.g. keyword `Han` will not match cases containing `Hans` in their details"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. keywords `Hans Bo` will return case "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "containing `Hans Gruber`, `Bo Yang` in their details"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Format:  `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* `find Ang` return cases `ang` and `Ang Mo Kio Car Theft`, and cases containing `Ang` in their details"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* `find dhoby bishan` return cases `Dhoby Ghaut Murder Case` and `Bishan Shopping Theft`, and cases containing `dhoby` or `bishan` in their details"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* `find 91234567 bishan` return cases with suspect, victim or witness containing Phone number `91234567`, and cases containing `bishan` in their details"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "#### Exit application: `exit`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "constancensq"
        },
        "content": "### Investigation Case page"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "constancensq"
        },
        "content": "The page of the application when the user opens a specified investigation case."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Add investigation case description: `add desc d:DESC`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Adds the description of the investigation"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `add desc d:DESC`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `add desc d:Kovan double murders of twins xxx and yyy` updates the description of this investigation case to “Kovan double murders of twins xxx and yyy”."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "This command is flexible. If a description has been added, this command will overwrite the current description."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Tip: You can also use `add desc d:` to remove the current desc."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Adding a document related to the case: `add doc n:TITLE r:FILE_NAME`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Adds a new document that is related to the investigation case."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `add doc n:TITLE r:FILE_NAME`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `add doc n:Case Details r:case_details.pdf` adds a new document with title “Case Details” with the file name case_details.pdf to the investigation case."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "This document must be manually added to the references folder provided before it can be added to the PIVOT system."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Adding a Suspect related to the case: `add suspect n:NAME g:GENDER [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Adds a new suspect related to the investigation case."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `add suspect n:NAME g:GENDER`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `add suspect n:John Doe g:M`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Gender must either be `M` or `F`, not case-sensitive."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Adding a victim related to the case: `add victim n:NAME g:GENDER [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Adds a new victim that is related to the investigation case."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `add victim n:NAME g:GENDER`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `add victim n:James Lee g:M`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Gender must either be `M` or `F`, not case-sensitive."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Add a witness related to the case: `add witness n:NAME g:GENDER [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Adds a new witness that is related to the investigation case."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `add witness n:NAME g:GENDER`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `add witness n:John Doe g:M`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Gender must either be `M` or `F`, not case-sensitive."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Open document: `open doc DOC_NO`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Opens the specified document reference."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `open doc DOC_NO`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `open doc 1` opens the document in the list with index 1."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Edit investigation case title: `edit title t:TITLE`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Edits the tag of the investigation (tags: ACTIVE, COLD, CLOSED)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `edit title t:TITLE`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Edit investigation case status: `edit status s:STATUS`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Edits the tag of the investigation (tags: ACTIVE, COLD, CLOSED)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `edit status s:STATUS`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `edit status s:CLOSED` updates the status of this investigation case to “CLOSED”."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Edit investigation case document: `edit doc DOC_NO [n:NAME] [r:REFERENCE]`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Edits the document of the current investigation case at the specified index of the list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `edit doc DOC_NO [n:NAME] [r:REFERENCE]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `edit doc 2 n:Fire outbreak details r:newFireDoc.pdf` updates the second document of the current opened case with "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "name \"Fire outbreak details\" and reference \"newFireDoc.pdf\"."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "This document \"newFireDoc.pdf\" must be manually added to the references folder provided and must be present before the document can be successfully updated."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Edit an existing suspect in the case: `edit suspect INDEX [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Edits the fields of the suspect specified with the index in the investigation case."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "At least one of the fields must be specified to be edited."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `edit suspect INDEX [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `edit suspect 1 e:newEmail@mail.com a:New Road Crescent` edits the first suspect in the list with the email "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\"newEmail@mail.com\" and the address \"New Road Crescent\"."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Gender must either be `M` or `F`, not case-sensitive."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Edit an existing victim in the case: `edit victim VICTIM_NO [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Edits the fields of the victim specified with the index in the investigation case."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "At least one of the fields must be specified to be edited."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `edit victim VICTIM_NO [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Example: `edit victim 1 e:newEmail@mail.com a:New Road Crescent` edits the first victim in the list with the email "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\"newEmail@mail.com\" and the address \"New Road Crescent\"."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Gender must either be `M` or `F`, not case-sensitive."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Edit an existing witness in the case: `edit witness INDEX [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Edits the fields of the witness specified with the index in the investigation case. "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "At least one of the fields is to be specified to make edits."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `edit witness INDEX [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `edit witness 1 e:newEmail@mail.com a:New Road Crescent` edits the first witness in the list with the email "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\"newEmail@mail.com\" and the address \"New Road Crescent\"."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Gender must either be `M` or `F`, not case-sensitive."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Delete document: `delete doc DOC_NO `"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deletes the specified document reference."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `delete doc DOC_NO`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `delete doc 0`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Delete suspect: `delete suspect SUSPECT_NO`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deletes the specified suspect from the list of suspects."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `delete suspect SUSPECT_NO`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `delete suspect 0`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Delete Victim: `delete victim VICTIM_NO`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deletes the specified victim from the list of victims."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `delete victim VICTIM_NO`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `delete victim 0`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Delete witness: `delete witness WITNESS_NO`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deletes the specified witness from the list of witnesses."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `delete witness WITNESS_NO`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `delete witness 0`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Return to main page: `return`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Returns to the application main page."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "### Both pages"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Undo: `undo`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Undoes the previous command."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Redo: `redo`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Redoes the command that was just undone. If another command that changes the data of PIVOT is used after an undo "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "command, redo will not be able to be called."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Exit application: `exit`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "### Data Management"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Loading of User Data"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "User data automatically loads when user opens the app"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Saving of User Data"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "User data automatically saves when there is a change in data"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Main Page Commands"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|Command            | Format                                |"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| ----------------- | ------------------------------------- |"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**list case**      | `list case`                           |"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**list archive**   | `list archive`                        |"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**add case**       | `add case t:TITLE [s:STATUS]`         |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**open case**      | `open case CASE_NO`                   |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**delete case**    | `delete case CASE_NO`                 |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**archive**        | `archive case CASE_NO`                |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**unarchive**      | `unarchive case CASE_NO`              |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**find**           | `find KEYWORD [MORE KEYWORDS]`        |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**exit**           | `exit`                                |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Investigation Page Commands"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| Command             | Format                                                                            |"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| ------------------- | ----------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**list document**    | `list doc`                                                                        |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**list suspect**     | `list suspect`                                                                    |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**list victim**      | `list victim`                                                                     |"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**list witness**     | `list witness`                                                                    |"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**add description**  | `add desc d:DESC`                                                                 |"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**add document**     | `add doc n:TITLE r:FILE_NAME`                                                     |"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**add suspect**      | `add suspect n:NAME g:GENDER [p:PHONE] [e:EMAIL] [a:ADDRESS]`                     |"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**add victim**       | `add victim n:NAME g:GENDER [p:PHONE] [e:EMAIL] [a:ADDRESS]`                      |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**add witness**      | `add witness n:NAME g:GENDER [p:PHONE] [e:EMAIL] [a:ADDRESS]`                     |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**open doc**         | `open doc DOC_NO`                                                                 |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**edit title**       | `edit title t:TITLE`                                                              |"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**edit status**      | `edit status s:STATUS`                                                            |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**edit document**    | `edit doc DOC_NO [n:TITLE] [r:FILE_NAME]`                                         |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**edit suspect**     | `edit suspect SUSPECT_NO [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`     |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**edit victim**      | `edit victim VICTIM_NO [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`       |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**edit witness**     | `edit witness WITNESS_NO [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]`     |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**delete doc**       | `delete doc DOC_NO`                                                               |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**delete suspect**   | `delete suspect SUSPECT_NO`                                                       |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**delete victim**    | `delete victim VICTIM_NO`                                                         |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**delete witness**   | `delete witness WITNESS_NO`                                                       |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**return**           | `return`                                                                          |"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**exit**             | `exit`                                                                            |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "#### Both Pages"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|Command       | Format                        |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| -------------| ------------------------------|"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**undo**      | `undo`                        |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**redo**      | `redo`                        |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "|**exit**      | `exit`                        |"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 45,
      "esmanda3w": 24,
      "CodyChew": 100,
      "-": 119,
      "Vielheim": 48,
      "constancensq": 48
    }
  },
  {
    "path": "docs/diagrams/AddDocumentSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \":PivotParser\" as PivotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \":AddDocumentCommandParser\" as AddDocumentCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \":AddDocumentCommand\" as AddDocumentCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "participant \"updatedCase:Case\" as updatedCase LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "[-\u003e LogicManager : execute(\"add doc n:name r:reference.txt\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "LogicManager -\u003e PivotParser : parseCommand\\n(\"add doc n:name r:reference.txt\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate PivotParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "PivotParser -\u003e AddCommandParser : parse\\n(\"doc n:name r:reference.txt\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "create AddDocumentCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddCommandParser -\u003e AddDocumentCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate AddDocumentCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommandParser --\u003e AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate AddDocumentCommandParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddCommandParser -\u003e AddDocumentCommandParser : parse(\"doc n:name r:reference.txt\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate AddDocumentCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "create AddDocumentCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommandParser -\u003e AddDocumentCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate AddDocumentCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommand --\u003e AddDocumentCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate AddDocumentCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommandParser --\u003e AddCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate AddDocumentCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommandParser -[hidden]-\u003e AddCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "destroy AddDocumentCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddCommandParser --\u003e PivotParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddCommandParser -[hidden]-\u003e PivotParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "PivotParser --\u003e LogicManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate PivotParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "LogicManager -\u003e AddDocumentCommand : execute()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate AddDocumentCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommand -\u003e Model : getFilteredCaseList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Model --\u003e AddDocumentCommand : lastCaseShown"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommand -\u003e Model : lastCaseShown\\n.get(index.getZeroBased())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Model --\u003e AddDocumentCommand : case in state"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "create updatedCase"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommand -\u003e updatedCase"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate updatedCase"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "updatedCase --\u003eAddDocumentCommand : updatedCase"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate updatedCase"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommand -\u003e Model : setCase(stateCase, updatedCase)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Model --\u003e AddDocumentCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "CommandResult --\u003e AddDocumentCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "AddDocumentCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate AddDocumentCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 102
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":PivotParser\" as PivotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":AddCaseCommandParser\" as AddCaseCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":AddCaseCommand\" as AddCaseCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "[-\u003e LogicManager : execute(\"add case t:Stolen TV\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "LogicManager -\u003e PivotParser : parseCommand(\"add case t:Stolen TV\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate PivotParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "PivotParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "create AddCaseCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCommandParser --\u003e AddCaseCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate AddCaseCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommandParser --\u003e AddCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate AddCaseCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCommandParser --\u003e AddCaseCommandParser : parse(\"t:Stolen TV\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate AddCaseCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "create AddCaseCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommandParser --\u003e AddCaseCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate AddCaseCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommand --\u003e AddCaseCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate AddCaseCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommandParser --\u003e AddCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate AddCaseCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommandParser -[hidden]-\u003e AddCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "destroy AddCaseCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCommandParser --\u003e PivotParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCommandParser -[hidden]-\u003e PivotParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "PivotParser --\u003e LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate PivotParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "LogicManager -\u003e AddCaseCommand : execute()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate AddCaseCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommand -\u003e Model : addCase(case)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Model --\u003e AddCaseCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "CommandResult --\u003e AddCaseCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "AddCaseCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate AddCaseCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 80
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UI UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Main #grey"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    Class State STATE_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$documents\u003e\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "UI -[#green]\u003e Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "UI -right[#green]-\u003e Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -[#blue]-\u003e Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -down[#blue]-\u003e Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Logic -[#blue]-\u003e State"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e UI"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Main -up[#grey]-\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "State -[#orange]-\u003e UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Model -[MODEL_COLOR]-\u003e State"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Storage .right[STORAGE_COLOR].\u003eFile"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "User ..\u003e UI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "Vielheim": 4
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "if () then ([command commits Pivot])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    :Save Pivot to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    pivotStateStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteDocumentActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ":User executes command delete document command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ":DeleteCommandParser gets case index and document index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ":DeleteDocumentCommand gets the documents of the current case;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ":Command checks if the user input index is valid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ":Remove the document and creates a new Case with the updated documents;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ":Command updates model with the updated case;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 16
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":PivotParser\" as PivotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "participant \":DeleteCaseCommand\" as DeleteCaseCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "[-\u003e LogicManager : execute(\"delete case 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "LogicManager -\u003e PivotParser : parseCommand(\"delete case 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate PivotParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "PivotParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCommandParser --\u003e PivotParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "PivotParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "create DeleteCaseCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCommandParser -\u003e DeleteCaseCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate DeleteCaseCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCaseCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate DeleteCaseCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCommandParser --\u003e PivotParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e PivotParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "PivotParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate PivotParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "LogicManager -\u003e DeleteCaseCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "activate DeleteCaseCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCaseCommand -\u003e Model : deleteCase(case)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Model --\u003e DeleteCaseCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCaseCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "CommandResult --\u003e DeleteCaseCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "DeleteCaseCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "deactivate DeleteCaseCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 25,
      "-": 44
    }
  },
  {
    "path": "docs/diagrams/DocumentClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "class Document"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "class Name"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "abstract class Alphanumeric"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "class Reference {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    - path : Path"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    - fileName : String"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    {static} + isValidReference(fileName: String)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    + isExists() : boolean"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Name \"1\"-up\u003e Document"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Alphanumeric -up|\u003e Name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Reference\"1\" -up-\u003e Document"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 23
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Class PivotParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "LogicManager --\u003e\"1\" PivotParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "PivotParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Interface ReadOnlyPivot \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Pivot"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class ReadOnlyPivot"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Package InvestigationCase {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Case"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class \"{abstract}\\nAlphanumeric\" as Alphanumeric"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class \"\u003c\u003cenumeration\u003e\u003e\\nStatus\" as Status"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "note bottom of Status: ACTIVE (default), COLD, CLOSED"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Suspect"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Witness"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Victim"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Document"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class UniqueCaseList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class \"{abstract}\\nCasePerson\" as CasePerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class Reference"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Pivot .up.|\u003e ReadOnlyPivot"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "ModelManager o--\u003e \"1\" Pivot"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Suspect -down-|\u003e CasePerson"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Witness -down-|\u003e CasePerson"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Victim -down-|\u003e CasePerson"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Title -down-|\u003e Alphanumeric"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Description -down-|\u003e Alphanumeric"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Name -up-|\u003e Alphanumeric"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Pivot *--\u003e \"1\" UniqueCaseList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "UniqueCaseList o--\u003e \"*\" Case"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"1\" Title"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"1\" Status"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"0..1\" Description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"*\" Document"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"*\" Suspect"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"*\" Witness"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"*\" Victim"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Case *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Document *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Document *--\u003e \"1\" Reference"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "CasePerson *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "ModelManager --\u003e\"1\" Case : filtered list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "constancensq": 46
    }
  },
  {
    "path": "docs/diagrams/OpenCaseSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":PivotParser\" as PivotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":OpenCaseCommandParser\" as OpenCaseCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \"command:OpenCaseCommand\" as OpenCaseCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "box StateManager STATE_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":StateManager\" as StateManager STATE_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[-\u003e LogicManager : execute(\"open case 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "LogicManager -\u003e PivotParser : parseCommand(\"open case 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate PivotParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "create OpenCaseCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PivotParser -\u003e OpenCaseCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate OpenCaseCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommandParser --\u003e PivotParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate OpenCaseCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PivotParser -\u003e OpenCaseCommandParser : parse(\"case 1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate OpenCaseCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "create OpenCaseCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommandParser -\u003e OpenCaseCommand : Index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate OpenCaseCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommand --\u003e OpenCaseCommandParser : command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate OpenCaseCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommandParser --\u003e PivotParser : command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate OpenCaseCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommandParser -[hidden]-\u003e PivotParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "destroy OpenCaseCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PivotParser --\u003e LogicManager : command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate PivotParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "LogicManager -\u003e OpenCaseCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate OpenCaseCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommand -\u003e StateManager : StateManager.setState(Index)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate StateManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "StateManager --\u003e OpenCaseCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate StateManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "CommandResult --\u003e OpenCaseCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "OpenCaseCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate OpenCaseCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 69
    }
  },
  {
    "path": "docs/diagrams/ReturnSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":PivotParser\" as PivotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \"command:ReturnCommand\" as ReturnCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "box StateManager STATE_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":StateManager\" as StateManager STATE_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[-\u003e LogicManager : execute(\"return\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "LogicManager -\u003e PivotParser : parseCommand(\"return\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate PivotParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "create ReturnCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PivotParser -\u003e ReturnCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate ReturnCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "ReturnCommand --\u003e PivotParser : command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate ReturnCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PivotParser --\u003e LogicManager : command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate PivotParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "LogicManager -\u003e ReturnCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate ReturnCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "ReturnCommand -\u003e StateManager : StateManager.resetState()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate StateManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "StateManager --\u003e ReturnCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate StateManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "ReturnCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "CommandResult --\u003e ReturnCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "ReturnCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate ReturnCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 52
    }
  },
  {
    "path": "docs/diagrams/StateClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "skinparam arrowColor STATE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "skinparam classBackgroundColor STATE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class StateManager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class UIStateManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class Index"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "StateManager o--\u003e \"0..1\" Index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "StateManager .right.\u003e UIStateManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "UIStateManager o--\u003e \"0..1\" Index"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 17
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Interface PivotStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Class JsonPivotStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "StorageManager o-down-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "StorageManager o-right-\u003e ReferenceStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "StorageManager o--\u003e PivotStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonPivotStorage .up.|\u003e PivotStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonPivotStorage .down.\u003e JsonSerializablePivot"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonSerializablePivot *--\u003e \"*\" JsonAdaptedCase"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonAdaptedCase .right.\u003e Case"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonAdaptedCase *--\u003e \"*\" JsonAdaptedDocument"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonAdaptedCase *--\u003e \"*\" JsonAdaptedWitness"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonAdaptedCase *--\u003e \"*\" JsonAdaptedSuspect"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonAdaptedCase *--\u003e \"*\" JsonAdaptedVictim"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "JsonAdaptedCase *--\u003e \"*\" JsonAdaptedTag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "constancensq": 15
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class DocumentListPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class DocumentCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class CasePersonListPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class CasePersonCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class Index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package State \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Class HiddenState #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "MainWindow *-down-\u003e DocumentListPanel"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "MainWindow *-down-\u003e CasePersonListPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "DocumentListPanel -down--\u003e DocumentCard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "CasePersonListPanel -down--\u003e CasePersonCard"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PersonListPanel -down--\u003e PersonCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "DocumentListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "DocumentCard ---|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "CasePersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "CasePersonCard ---|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PersonCard ---|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Index ..\u003e State"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "MainWindow --\u003e Index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Index -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "HelpWindow -[hidden]left- PersonListPanel"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PersonListPanel -[hidden]left- CasePersonListPanel"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "CasePersonListPanel -[hidden]left- DocumentListPanel"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "DocumentListPanel -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "Vielheim": 31
    }
  },
  {
    "path": "docs/diagrams/UiStateSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "box StateManager STATE_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \"StateManager\" as StateManager STATE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \"UiStateManager\" as UiStateManager STATE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[-\u003e StateManager : setState(Index)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate StateManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "StateManager -\u003e UiStateManager : setCasePanelState(Index)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate UiStateManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "UiStateManager -\u003e MainWindow : notifyObservers()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "MainWindow -\u003e MainWindow : updateCaseInformationPanel(Index)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "MainWindow --\u003e UiStateManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "UiStateManager --\u003e StateManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate UiStateManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[\u003c-- StateManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "deactivate StateManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 32
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package CommandMessages \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message1 as \"__c0:InitialCommand__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message2 as \"__c1:DeleteCase__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message3 as \"__c2:AddCase__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State1 as \"__p0:Pivot__\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State2 as \"__p1:Pivot__\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State3 as \"__p2:Pivot__\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message1 -[hidden]right-\u003e Message2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]right-\u003e Message3"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]down-\u003e State2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "hide Message2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "hide Message3"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 19,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "title After command \"delete case 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package CommandMessages \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message1 as \"__c0:InitialCommand__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message2 as \"__c1:DeleteCase__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message3 as \"__c2:AddCase__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State1 as \"__p0:Pivot__\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State2 as \"__p1:Pivot__\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State3 as \"__p2:Pivot__\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message1 -[hidden]right-\u003e Message2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]right-\u003e Message3"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]down-\u003e State2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "hide Message3"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 16,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "title After command \"add case t:Lost Wallet\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package CommandMessages \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message1 as \"__c0:InitialCommand__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message2 as \"__c1:DeleteCase__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message3 as \"__c2:AddCase__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State1 as \"__p0:Pivot__\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State2 as \"__p1:Pivot__\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State3 as \"__p2:Pivot__\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message1 -[hidden]right-\u003e Message2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]right-\u003e Message3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]down-\u003e State2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 13,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package CommandMessages \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message1 as \"__c0:InitialCommand__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message2 as \"__c1:DeleteCase__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message3 as \"__c2:AddCase__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State1 as \"__p0:Pivot__\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State2 as \"__p1:Pivot__\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State3 as \"__p2:Pivot__\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message1 -[hidden]right-\u003e Message2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]right-\u003e Message3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]down-\u003e State2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 13,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package CommandMessages \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message1 as \"__c0:InitialCommand__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message2 as \"__c1:DeleteCase__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message3 as \"__c2:AddCase__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State1 as \"__p0:Pivot__\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State2 as \"__p1:Pivot__\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State3 as \"__p2:Pivot__\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message1 -[hidden]right-\u003e Message2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]right-\u003e Message3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]down-\u003e State2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 13,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package CommandMessages \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message1 as \"__c0:InitialCommand__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message2 as \"__c1:DeleteCase__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class Message3 as \"__c3:Clear__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State1 as \"__p0:Pivot__\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State2 as \"__p1:Pivot__\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class State3 as \"__p3:Pivot__\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message1 -[hidden]right-\u003e Message2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]right-\u003e Message3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Message2 -[hidden]down-\u003e State2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "note right on link: State p2 deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 14,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "participant \":PivotParser\" as PivotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "participant \":VersionedPivot\" as VersionedPivot MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "LogicManager -\u003e PivotParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "activate PivotParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "PivotParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "UndoCommand --\u003e PivotParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "PivotParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "deactivate PivotParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "UndoCommand -\u003e Model : undoPivot()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Model -\u003e VersionedPivot : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "activate VersionedPivot"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "VersionedPivot --\u003e Model :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "deactivate VersionedPivot"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 13,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!define STATE_COLOR #FFCD7D"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!define STATE_COLOR_T1 #FFD99C"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!define STATE_COLOR_T2 #FFCB78"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!define STATE_COLOR_T3 #FFC261"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "!define STATE_COLOR_T4 #FFB745"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 1,
      "-": 74,
      "Vielheim": 6
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "title: Police Investigation Virtual Organisational Tool"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-F09-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-F09-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**PIVOT is a desktop application to assist the police investigators in keeping track of their investigations and relevant information.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* If you are interested in using PIVOT, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* If you are interested about developing PIVOT, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "constancensq": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/pivot/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/pivot/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonPivotStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.PivotStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.storage.ReferenceStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PIVOT ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        PivotStorage pivotStorage \u003d new JsonPivotStorage(userPrefs.getPivotFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ReferenceStorage referenceStorage \u003d new ReferenceStorage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        storage \u003d new StorageManager(pivotStorage, userPrefsStorage, referenceStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s PIVOT and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The data from the sample PIVOT will be used instead if {@code storage}\u0027s PIVOT is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * or an empty PIVOT will be used instead if errors occur when reading {@code storage}\u0027s PIVOT."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Optional\u003cReadOnlyPivot\u003e pivotOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            pivotOptional \u003d storage.readPivot();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (!pivotOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PIVOT\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                storage.addReferenceTestFile(); //includes test1.txt as sample data"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            initialData \u003d pivotOptional.orElseGet(SampleDataUtil::getSamplePivot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PIVOT\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            initialData \u003d new Pivot();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PIVOT\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            initialData \u003d new Pivot();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        modelManager.updateFilteredCaseList(Model.PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return modelManager;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PIVOT\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Starting PIVOT \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PIVOT ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 42,
      "CodyChew": 6,
      "-": 139,
      "constancensq": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/DeveloperMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Container for developer visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class DeveloperMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Assertion messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String ASSERT_CASE_PAGE \u003d \"Program should be at case page\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String ASSERT_MAIN_PAGE \u003d \"Program should be at main page\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String ASSERT_VALID_INDEX \u003d \"Index should be valid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String ASSERT_FILE_EXIST \u003d \"File should exist\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String ASSERT_DEFAULT_SECTION \u003d \"Program should be at default section, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"listing from default cases only\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String ASSERT_ARCHIVED_SECTION \u003d \"Program should be at archived section, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"listing from archived cases only\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String ASSERT_REFERENCE_VALID \u003d \"Reference should be valid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 1,
      "constancensq": 17
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String LOG_FILE \u003d \"pivot.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/UserMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class UserMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Common messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_MISSING_PREFIX_INVALID_COMMAND \u003d \"Please specify a field to change! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Main page messages"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_INVALID_CASE_DISPLAYED_INDEX \u003d \"The case index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_CASES_LISTED_OVERVIEW \u003d \"%1$d cases listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_INCORRECT_MAIN_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Please return to main page to use this command.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_INCORRECT_CASE_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Please open a case to use this command.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Case page messages"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX \u003d \"The document index provided is invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX \u003d \"The suspect index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX \u003d \"The witness index provided is invalid\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX \u003d \"The victim index provided is invalid\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    // Reference invalid message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_REFERENCE_DOES_NOT_EXIST \u003d \"This document with reference %1$s does not exist.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_ERROR_OPENING_FILE \u003d \"There was an error opening your file!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_DESKTOP_API_NOT_AVAILABLE \u003d \"Desktop API is not available, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"we are unable to open your file.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "CodyChew": 12,
      "Jargonx": 1,
      "-": 8,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_FILE_EXIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates directories of a specified path"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void createDirectories(Path folderPath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (folderPath !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            Files.createDirectories(folderPath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Opens a document at the specified path. Path should already be valid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void openFile(Path file) throws IOException, CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check if Desktop is supported by Platform or not"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_DESKTOP_API_NOT_AVAILABLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert (isFileExists(file)) : ASSERT_FILE_EXIST;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        File doc \u003d file.toFile();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        desktop.open(doc);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 28,
      "-": 82,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns PIVOT."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see seedu.pivot.model.Model#getPivot()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ReadOnlyPivot getPivot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cases */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ObservableList\u003cCase\u003e getFilteredCaseList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns the user prefs\u0027 PIVOT file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.PivotParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final PivotParser pivotParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivotParser \u003d new PivotParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Command command \u003d pivotParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            storage.savePivot(model.getPivot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getPivot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getFilteredCaseList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getPivotFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 22,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Adds a case to PIVOT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // Todo: Refine the description of message usage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_MAIN_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Adds an item of a specified type to PIVOT.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: t:TITLE\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case t: Ang Mo Kio Murders\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Todo: Refine the description of message usage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_CASE_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \": Adds an item of a specified type to opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027suspect\u0027,\u0027victim\u0027,\u0027witness\u0027\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: n:NAME g:GENDER [p:PHONE] [e:EMAIL] [a:ADDRESS]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" suspect n:John g:M p:912345678 e:john@email.com a:Blk 123\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027doc\u0027\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: n:NAME r:REFERENCE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" doc n:Evidence r:text1.txt\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027desc\u0027\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: d:DESC \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" desc d:7 caught for rioting\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 7,
      "Vielheim": 9,
      "constancensq": 11
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Clears PIVOT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"PIVOT has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.setPivot(new Pivot());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 15,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String TYPE_TITLE \u003d \"title\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String TYPE_STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_CASE \u003d \"case\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_DESC \u003d \"desc\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_DOC \u003d \"doc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_SUSPECT \u003d \"suspect\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_WITNESS \u003d \"witness\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_VICTIM \u003d \"victim\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_ARCHIVE \u003d \"archive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "CodyChew": 4,
      "-": 17,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Abstract class for deleting different types of items based off of index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //TODO: Consider abstracting this out further, find a way to represent any item type or show"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    // of all different item types and the delete command usage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_MAIN_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Deletes the item of a specified type identified by the index number\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \" used in the displayed list.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_CASE_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Deletes the specified type of item identified by the index number\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \" used in the displayed list in current case.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \"TYPE \u0027suspect\u0027,\u0027victim\u0027,\u0027witness\u0027, \u0027doc\u0027\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" suspect 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Jargonx": 7,
      "-": 8,
      "Vielheim": 2,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Edits the details of an existing case in PIVOT."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the specified type \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"to the current case in program is at.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"TYPE \u0027title\u0027\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: [t:TITLE]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" title t:Triple Kovan Murders\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"TYPE \u0027status\u0027\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: [s:STATUS]\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" status s:closed\\n\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"TYPE \u0027doc\u0027\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: INDEX [n:NAME] [r:REFERENCE]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" doc 1 n:meeting notes\\n\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"TYPE \u0027suspect\u0027,\u0027victim\u0027,\u0027witness\u0027\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: INDEX [n:NAME] [g:GENDER] [p:PHONE] [e:EMAIL] [a:ADDRESS]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" suspect 1 e:newEmail@mail.com a:new road crescent\\n\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //public static final String MESSAGE_EDIT_CASE_SUCCESS \u003d \"Edited Case: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //public static final String MESSAGE_DUPLICATE_CASE \u003d \"This case already exists in PIVOT.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        assert(StateManager.atMainPage()) : ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //            throw new CommandException(UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        Case caseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        Case editedCase \u003d createEditedCase(caseToEdit, editCaseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        if (!caseToEdit.isSameCase(editedCase) \u0026\u0026 model.hasCase(editedCase)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //            throw new CommandException(MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        model.setCase(caseToEdit, editedCase);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        return new CommandResult(String.format(MESSAGE_EDIT_CASE_SUCCESS, editedCase));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates and returns a {@code Case} with the details of {@code caseToEdit}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * edited with {@code editCaseDescriptor}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static Case createEditedCase(Case caseToEdit, EditCaseDescriptor editCaseDescriptor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert caseToEdit !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Title updatedTitle \u003d editCaseDescriptor.getTitle().orElse(caseToEdit.getTitle());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description updatedDescription \u003d editCaseDescriptor.getDescription().orElse(caseToEdit.getDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Status updatedStatus \u003d editCaseDescriptor.getStatus().orElse(caseToEdit.getStatus());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cDocument\u003e updatedDocuments \u003d editCaseDescriptor.getDocuments().orElse(caseToEdit.getDocuments());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e updatedSuspects \u003d editCaseDescriptor.getSuspects().orElse(caseToEdit.getSuspects());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cVictim\u003e updatedVictims \u003d editCaseDescriptor.getVictims().orElse(caseToEdit.getVictims());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCaseDescriptor.getTags().orElse(caseToEdit.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArchiveStatus updatedArchiveStatus \u003d caseToEdit.getArchiveStatus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cWitness\u003e updatedWitnesses \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                editCaseDescriptor.getWitnesses().orElse(caseToEdit.getWitnesses());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Case(updatedTitle, updatedDescription, updatedStatus, updatedDocuments,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                updatedSuspects, updatedVictims, updatedWitnesses, updatedTags, updatedArchiveStatus);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Stores the details to edit the case with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * corresponding field value of the case."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static class EditCaseDescriptor {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        private List\u003cDocument\u003e documents;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private List\u003cSuspect\u003e suspects;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private List\u003cVictim\u003e victims;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private List\u003cWitness\u003e witnesses;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public EditCaseDescriptor() {}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public EditCaseDescriptor(EditCaseDescriptor toCopy) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            setDocuments(toCopy.documents);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            setSuspects(toCopy.suspects);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            setVictims(toCopy.victims);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            setWitnesses(toCopy.witnesses);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    status, documents, suspects, victims, witnesses, tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public void setDocuments(List\u003cDocument\u003e documents) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.documents \u003d documents;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public Optional\u003cList\u003cDocument\u003e\u003e getDocuments() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return (documents !\u003d null) ? Optional.of(documents) : Optional.empty();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Sets {@code suspects} to this object\u0027s {@code suspects}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * A defensive copy of {@code suspects} is used internally."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setSuspects(List\u003cSuspect\u003e suspects) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.suspects \u003d (suspects !\u003d null) ? new ArrayList\u003c\u003e(suspects) : null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code suspects} is null."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public Optional\u003cList\u003cSuspect\u003e\u003e getSuspects() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return (suspects !\u003d null) ? Optional.of(suspects) : Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Sets {@code victims} to this object\u0027s {@code victims}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * A defensive copy of {@code victims} is used internally."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setVictims(List\u003cVictim\u003e victims) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.victims \u003d (victims !\u003d null) ? new ArrayList\u003c\u003e(victims) : null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code victims} is null."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public Optional\u003cList\u003cVictim\u003e\u003e getVictims() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return (victims !\u003d null) ? Optional.of(victims) : Optional.empty();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         * Sets {@code witnesses} to this object\u0027s {@code witnesses}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         * A defensive copy of {@code witnesses} is used internally."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setWitnesses(List\u003cWitness\u003e witnesses) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            this.witnesses \u003d (witnesses !\u003d null) ? new ArrayList\u003c\u003e(witnesses) : null;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code witnesses} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        public Optional\u003cList\u003cWitness\u003e\u003e getWitnesses() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return (witnesses !\u003d null) ? Optional.of(witnesses) : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (!(other instanceof EditCaseDescriptor)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            EditCaseDescriptor e \u003d (EditCaseDescriptor) other;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getSuspects().equals(e.getSuspects())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getVictims().equals(e.getVictims())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getWitnesses().equals(e.getWitnesses())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getDocuments().equals(e.getDocuments())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 43,
      "CodyChew": 59,
      "Jargonx": 18,
      "-": 79,
      "Vielheim": 56,
      "constancensq": 7
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/EditPersonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public abstract class EditPersonCommand extends EditCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    protected final Index caseIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    protected final Index personIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    protected final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param  caseIndex of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditPersonCommand(Index caseIndex, Index personIndex, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(caseIndex, personIndex, editPersonDescriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.personIndex \u003d personIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(toCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 129
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PIVOT as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.DetailsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Finds and lists all cases in PIVOT whose details contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cases whose details contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final DetailsContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates a FindCommand to find cases in the current section based on the given predicate."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param predicate The predicate used to filter cases."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public FindCommand(DetailsContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            model.updateFilteredCaseList(predicate.and(PREDICATE_SHOW_ARCHIVED_CASES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            model.updateFilteredCaseList(predicate.and(PREDICATE_SHOW_DEFAULT_CASES));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                String.format(UserMessages.MESSAGE_CASES_LISTED_OVERVIEW, model.getFilteredCaseList().size()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 32,
      "constancensq": 25
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Lists all cases in PIVOT to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_USAGE_MAIN_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \": Lists all items of a specified type.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE\u0027\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case\\n\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027archive\u0027\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" archive\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_USAGE_CASE_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Lists all items of a specified type.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE\u0027\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027doc\u0027\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" doc\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027suspect\u0027\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" suspect\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027victim\u0027\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" victim\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027witness\u0027\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" witness\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \": Lists all items of a specified type at Main Page.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE\u0027\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case\\n\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027archive\u0027\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" archive\\n\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + COMMAND_WORD + \": Lists all items of a specified type at Case Page.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE\u0027\\n\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027doc\u0027\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" doc\\n\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027suspect\u0027\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" suspect\\n\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027victim\u0027\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" victim\\n\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027witness\u0027\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" witness\\n\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 8,
      "Vielheim": 33,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ListTabCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class ListTabCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String LIST_TAB_SUCCESS \u003d \"Tab successfully listed: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ListTabCommand.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String tabType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a ListTabCommand holding the type of Tab to be listed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param tabType"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public ListTabCommand(String tabType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(tabType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.tabType \u003d tabType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Executing List Tab Command...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert (StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setTabState(tabType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(String.format(LIST_TAB_SUCCESS, tabType));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || other instanceof ListTabCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 this.tabType.equals(((ListTabCommand) other).tabType); // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 48
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/OpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Abstract class for opening items based on Index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public abstract class OpenCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Opens the item of a specified type, identified by the index number\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \" used in the displayed list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE\u0027\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case 1\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"TYPE \u0027doc\u0027\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" doc 1\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected OpenCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof OpenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((OpenCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "CodyChew": 30,
      "Vielheim": 4,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_REDO_SUCCESS \u003d \"Redo last command:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_REDO_FAILURE \u003d \"You are already at the most recent edit! \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"There is nothing to redo!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!model.canRedoPivot()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_REDO_FAILURE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String stateCommand \u003d model.redoPivot();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(MESSAGE_REDO_SUCCESS + stateCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 26
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ReturnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Returns the program to the Main Page."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_RETURN_SUCCESS \u003d \"You are now at the Main Page! Type \u0027open case [INDEX]\u0027 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"to open a case, or \u0027list case\u0027 to view all cases!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReturnCommand.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Returning back to main page...\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "CodyChew": 20,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo last command:\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_UNDO_FAILURE \u003d \"You are already at the initial state! \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"There is nothing to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!model.canUndoPivot()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_UNDO_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String stateCommand \u003d model.undoPivot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (StateManager.getState().getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                StateManager.resetState();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_SUCCESS + stateCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 38
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/archivecommands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.archivecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_DEFAULT_SECTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Archives a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Archives the case identified by the index number\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \" used in the displayed list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" case PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_CASE_SUCCESS \u003d \"Case archived: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ArchiveCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates an Archive to add the specified {@code Case} specified at {@code Index}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param targetIndex Index of Case to be archived in PIVOT."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Archiving case ...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atDefaultSection()) : ASSERT_DEFAULT_SECTION;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // check case provided is valid index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseToArchive.getArchiveStatus().equals(ArchiveStatus.DEFAULT)) : ASSERT_DEFAULT_SECTION;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(caseToArchive.getTitle(), caseToArchive.getDescription(), caseToArchive.getStatus(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                caseToArchive.getDocuments(), caseToArchive.getSuspects(), caseToArchive.getVictims(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                caseToArchive.getWitnesses(), caseToArchive.getTags(), ArchiveStatus.ARCHIVED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.deleteCase(caseToArchive);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.addCase(updatedCase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //model.setCase(caseToArchive, updatedCase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(Model.PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_ARCHIVE_CASE_SUCCESS, updatedCase));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_CASE_SUCCESS, updatedCase));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 3,
      "constancensq": 84
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/archivecommands/ListArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.archivecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Lists all archived cases in PIVOT."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListArchiveCommand extends ListCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_LIST_CASE_SUCCESS \u003d \"Listed all archived cases\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ListArchiveCommand.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Executing list case command\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setArchivedSection();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_CASE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || other instanceof ListArchiveCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 3,
      "constancensq": 39
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/archivecommands/UnarchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.archivecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_ARCHIVED_SECTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Unarchives a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Unarchives the case identified by the index number\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \" used in the displayed list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" case INDEX\u0027\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_CASE_SUCCESS \u003d \"Case unarchived: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UnarchiveCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates an UnarchiveCommand to add the specified {@code Case} specified at {@code Index}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param targetIndex Index of Case to be unarchived in PIVOT."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Unarchiving case ...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // check case provided is valid index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseToUnarchive.getArchiveStatus().equals(ArchiveStatus.ARCHIVED)) : ASSERT_ARCHIVED_SECTION;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(caseToUnarchive.getTitle(), caseToUnarchive.getDescription(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                caseToUnarchive.getStatus(), caseToUnarchive.getDocuments(), caseToUnarchive.getSuspects(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                caseToUnarchive.getVictims(), caseToUnarchive.getWitnesses(), caseToUnarchive.getTags(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ArchiveStatus.DEFAULT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.deleteCase(caseToUnarchive);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.addCase(updatedCase);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //model.setCase(caseToUnarchive, updatedCase);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(Model.PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_UNARCHIVE_CASE_SUCCESS, updatedCase));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNARCHIVE_CASE_SUCCESS, updatedCase));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Vielheim": 3,
      "constancensq": 83
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/AddCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Adds a case to PIVOT."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommand extends AddCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_CASE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \": Adds a case to PIVOT.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + TYPE_CASE + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_TITLE + \"Bishan Theft \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_STATUS + \"closed\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_ADD_CASE_SUCCESS \u003d \"New case added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CASE \u003d \"This case already exists in PIVOT\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddCaseCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Case investigationCase;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddCaseCommand to add the specified {@code Case}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param investigationCase investigation Case to be added to PIVOT."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddCaseCommand(Case investigationCase) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.investigationCase \u003d investigationCase;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding case to PIVOT...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (model.hasCase(investigationCase)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add case: Tried to add a case that exists in PIVOT\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.addCase(investigationCase);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_ADD_CASE_SUCCESS, investigationCase));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            model.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_CASE_SUCCESS, investigationCase));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof AddCaseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 investigationCase.equals(((AddCaseCommand) other).investigationCase));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 50,
      "Vielheim": 15,
      "constancensq": 16
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/AddDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Adds a Description to an opened Case in PIVOT."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDescriptionCommand extends AddCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_DESC"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \": Adds a description to opened case in PIVOT. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + PREFIX_DESC + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + TYPE_DESC + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + PREFIX_DESC + \"7 people arrested for rioting\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_ADD_DESCRIPTION_SUCCESS \u003d \"New description added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DESCRIPTION \u003d \"This description already exists for the case!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddDescriptionCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddDescriptionCommand to add the specified {@code Description}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param index Index of the Case in PIVOT."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param description Description to be added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public AddDescriptionCommand(Index index, Description description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding description to current case...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description stateCaseDescription \u003d stateCase.getDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // check for same description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (stateCaseDescription.equals(this.description)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add description: Tried to add a description that exists in PIVOT\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DESCRIPTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // create new updated case"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), this.description, stateCase.getStatus(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                stateCase.getDocuments(), stateCase.getSuspects(), stateCase.getVictims(), stateCase.getWitnesses(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_ADD_DESCRIPTION_SUCCESS, this.description));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_DESCRIPTION_SUCCESS, this.description));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || (other instanceof AddDescriptionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 index.equals(((AddDescriptionCommand) other).index)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 description.equals(((AddDescriptionCommand) other).description));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "CodyChew": 1,
      "Vielheim": 69,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/DeleteCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Deletes a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteCaseCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_DELETE_CASE_SUCCESS \u003d \"Deleted Case: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCaseCommand.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an DeleteCaseCommand to delete the {@code Case} specified at {@code Index}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param targetIndex Index of Case to be deleted from PIVOT."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public DeleteCaseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting case from PIVOT...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + targetIndex.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Case caseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        model.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_DELETE_CASE_SUCCESS, caseToDelete));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            model.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CASE_SUCCESS, caseToDelete));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                || (other instanceof DeleteCaseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCaseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 15,
      "Jargonx": 36,
      "Vielheim": 6,
      "constancensq": 19
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/EditStatusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Edits the { @code Status } to an opened { @case Case } in PIVOT."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class EditStatusCommand extends EditCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_STATUS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \": Edits the status of the opened case.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_STATUS + \"STATUS\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_STATUS + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_STATUS + \"closed\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_EDIT_STATUS_SUCCESS \u003d \"Status updated: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditStatusCommand.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates an EditStatusCommand to update the specified { @code Status } for a { @code Case }."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param index Index of the Case in PIVOT."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param status Status to be updated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public EditStatusCommand(Index index, Status status) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        logger.info(\"Updating status to current case...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        // create new updated case"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(), status,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                stateCase.getDocuments(), stateCase.getSuspects(), stateCase.getVictims(), stateCase.getWitnesses(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_EDIT_STATUS_SUCCESS, status));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STATUS_SUCCESS, status));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 72,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/EditTitleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Edits the { @code Title } to an opened { @case Case } in PIVOT."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class EditTitleCommand extends EditCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_TITLE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \": Edits the title of the opened case.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_TITLE + \"TITLE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_TITLE + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_TITLE + \"Changed title\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_EDIT_TITLE_SUCCESS \u003d \"Title updated: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditTitleCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates an EditTitleCommand to update the specified { @code Title } for a { @code Case }."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param index Index of the Case in PIVOT."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param title Title to be updated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public EditTitleCommand(Index index, Title title) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        logger.info(\"Updating title to current case...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        // create new updated case"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case updatedCase \u003d new Case(title, stateCase.getDescription(), stateCase.getStatus(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                stateCase.getDocuments(), stateCase.getSuspects(), stateCase.getVictims(), stateCase.getWitnesses(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_EDIT_TITLE_SUCCESS, title));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TITLE_SUCCESS, title));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof EditTitleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 index.equals(((EditTitleCommand) other).index)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 title.equals(((EditTitleCommand) other).title));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 79,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/ListCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Lists all cases in PIVOT."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCaseCommand extends ListCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_LIST_CASE_SUCCESS \u003d \"Listed all default cases (unarchived)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ListCaseCommand.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Executing list case command\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_CASE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || other instanceof ListCaseCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "constancensq": 38
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/OpenCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Opens a specified case in PIVOT."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class OpenCaseCommand extends OpenCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_OPEN_CASE_SUCCESS \u003d \"Opened Case: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \": Opens the case at specified index in the current list\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case 1\\n\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OpenCaseCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates an OpenCaseCommand to open the case at specified {@code targetIndex}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param targetIndex Index of the case in PIVOT."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public OpenCaseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Opening specified case...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + targetIndex.getOneBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case caseToOpen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.setState(targetIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_CASE_SUCCESS, caseToOpen));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 15,
      "CodyChew": 35,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/documentcommands/AddDocumentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_REFERENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class AddDocumentCommand extends AddCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_DOC"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \": Adds a document to the opened case.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_REFERENCE + \"REFERENCE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_DOC + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_NAME + \"Location file \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_REFERENCE + \"test1.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_ADD_DOCUMENT_SUCCESS \u003d \"New document added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DOCUMENT \u003d \"This document already exists in the case.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddDocumentCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Document doc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates an AddDocumentCommand to add a {@code Document} to a case with {@code Index}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param index index of a case in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param doc document to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public AddDocumentCommand(Index index, Document doc) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(doc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.doc \u003d doc;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding document to current case...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get current case in state"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cDocument\u003e updatedDocuments \u003d stateCase.getDocuments();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for duplicate"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (updatedDocuments.contains(this.doc)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add document: Tried to add a document that exists in PIVOT\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DOCUMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //add document to existing list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        updatedDocuments.add(this.doc);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //create new updated case"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(), stateCase.getStatus(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                updatedDocuments, stateCase.getSuspects(), stateCase.getVictims(), stateCase.getWitnesses(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_ADD_DOCUMENT_SUCCESS, this.doc));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_DOCUMENT_SUCCESS, this.doc));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof AddDocumentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 doc.equals(((AddDocumentCommand) other).doc)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 index.equals(((AddDocumentCommand) other).index));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11,
      "CodyChew": 71,
      "Vielheim": 3,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/documentcommands/DeleteDocumentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class DeleteDocumentCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_DELETE_DOCUMENT_SUCCESS \u003d \"Deleted document: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteDocumentCommand.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index documentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a DeleteDocumentCommand to delete a {@code Document} at index @code documentIndex}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * from the case at index {@code caseIndex}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param caseIndex index of a case in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param documentIndex document index in the document list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public DeleteDocumentCommand(Index caseIndex, Index documentIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(caseIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(documentIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documentIndex \u003d documentIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting document from current case...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get case from state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cDocument\u003e updatedDocuments \u003d stateCase.getDocuments();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //document index validation in model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (documentIndex.getZeroBased() \u003e\u003d updatedDocuments.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + documentIndex.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //remove document"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document documentToDelete \u003d updatedDocuments.get(documentIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        updatedDocuments.remove(documentToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                stateCase.getStatus(), updatedDocuments, stateCase.getSuspects(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getVictims(), stateCase.getWitnesses(), stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //update model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_DELETE_DOCUMENT_SUCCESS, documentToDelete));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DOCUMENT_SUCCESS, documentToDelete));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof DeleteDocumentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteDocumentCommand) other).caseIndex)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 documentIndex.equals(((DeleteDocumentCommand) other).documentIndex)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 17,
      "CodyChew": 61,
      "Vielheim": 2,
      "constancensq": 9
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/documentcommands/EditDocumentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_REFERENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class EditDocumentCommand extends EditCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_DOC"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \": Edits the document of the opened case at the specified index.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"[\" + PREFIX_REFERENCE + \"REFERENCE]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_DOC + \" \" + \"1\" + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_NAME + \"new name \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_REFERENCE + \"edited.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_EDIT_DOCUMENT_SUCCESS \u003d \"Edited document: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditDocumentCommand.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index documentIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Optional\u003cReference\u003e reference;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates an EditDocumentCommand to edit a {@code Document} at index @code docIndex} with the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * name and reference if present, from the case at index {@code caseIndex}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param caseIndex index of a case in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param docIndex document index in the document list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param name an {@code Optional\u003cName\u003e} to update the document."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param reference an {@code Optional\u003cReference\u003e} to update the document."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public EditDocumentCommand(Index caseIndex, Index docIndex, Optional\u003cName\u003e name, Optional\u003cReference\u003e reference) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireAllNonNull(caseIndex, docIndex, name, reference);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.index \u003d caseIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documentIndex \u003d docIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.reference \u003d reference;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        logger.info(\"Editing document of current case...\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get current case in state"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cDocument\u003e documents \u003d stateCase.getDocuments();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //document index validation in model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (documentIndex.getZeroBased() \u003e\u003d documents.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            logger.info(\"Invalid index: \" + documentIndex.getOneBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get document"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document documentToEdit \u003d documents.get(documentIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //edit document in case"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document editedDocument \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                new Document(name.orElse(documentToEdit.getName()), reference.orElse(documentToEdit.getReference()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        documents.set(documentIndex.getZeroBased(), editedDocument);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                stateCase.getStatus(), documents, stateCase.getSuspects(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getVictims(), stateCase.getWitnesses(), stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //update model"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_EDIT_DOCUMENT_SUCCESS, editedDocument));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DOCUMENT_SUCCESS, editedDocument));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 105,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/documentcommands/OpenDocumentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class OpenDocumentCommand extends OpenCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_OPEN_DOCUMENT_SUCCESS \u003d \"Opened Document: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OpenDocumentCommand.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public OpenDocumentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        logger.info(\"Opening specified document...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index caseIndex \u003d StateManager.getState();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get current case in state"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cDocument\u003e existingDocuments \u003d stateCase.getDocuments();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check valid document index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d existingDocuments.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            logger.info(\"Invalid index: \" + targetIndex.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //open the document"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document docToOpen \u003d existingDocuments.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Reference reference \u003d docToOpen.getReference();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!reference.isExists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            logger.warning(\"Reference does not exist\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new CommandException(String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    UserMessages.MESSAGE_REFERENCE_DOES_NOT_EXIST, docToOpen.getReference()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            logger.info(\"Document successfully opened\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            FileUtil.openFile(reference.getPath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            logger.warning(\"Error opening document\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_ERROR_OPENING_FILE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_DOCUMENT_SUCCESS, docToOpen));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 68,
      "constancensq": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/suspectcommands/AddSuspectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddSuspectCommand extends AddCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_SUSPECT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \": Adds a suspect to the opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_SUSPECT + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_PHONE + \"912345678 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_EMAIL + \"john@email.com \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_ADDRESS + \"Blk 123\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_ADD_SUSPECT_SUCCESS \u003d \"New suspect added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUSPECT \u003d \"This suspect already exists in the case.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddSuspectCommand.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Suspect suspect;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddSuspectCommand to add the specified {@code Suspect}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param suspect"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddSuspectCommand(Index index, Suspect suspect) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(suspect);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.suspect \u003d suspect;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding suspect to current case...\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case openCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e updatedSuspects \u003d openCase.getSuspects();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (updatedSuspects.contains(suspect)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add suspect: Tried to add a suspect that exists in PIVOT\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SUSPECT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        updatedSuspects.add(suspect);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(openCase.getTitle(), openCase.getDescription(), openCase.getStatus(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                openCase.getDocuments(), updatedSuspects, openCase.getVictims(), openCase.getWitnesses(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                openCase.getTags(), openCase.getArchiveStatus());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(openCase, updatedCase);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_ADD_SUSPECT_SUCCESS, suspect));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_SUSPECT_SUCCESS, suspect));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof AddSuspectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 suspect.equals(((AddSuspectCommand) other).suspect)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 index.equals(((AddSuspectCommand) other).index));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 59,
      "Vielheim": 11,
      "constancensq": 25
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/suspectcommands/DeleteSuspectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class DeleteSuspectCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DELETE_SUSPECT_SUCCESS \u003d \"Deleted Suspect: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteSuspectCommand.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Index suspectIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates a DeleteSuspectCommand to delete the suspect at specified index, in the case at specified index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param caseIndex The index of the case to delete the suspect."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param suspectIndex The index of the suspect to be deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public DeleteSuspectCommand(Index caseIndex, Index suspectIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(caseIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(suspectIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.suspectIndex \u003d suspectIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting suspect from current case...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case openCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e updatedSuspects \u003d openCase.getSuspects();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (suspectIndex.getZeroBased() \u003e\u003d updatedSuspects.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + suspectIndex.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Suspect suspectToDelete \u003d updatedSuspects.get(suspectIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        updatedSuspects.remove(suspectIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(openCase.getTitle(), openCase.getDescription(), openCase.getStatus(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                openCase.getDocuments(), updatedSuspects, openCase.getVictims(), openCase.getWitnesses(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                openCase.getTags(), openCase.getArchiveStatus());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.setCase(openCase, updatedCase);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_DELETE_SUSPECT_SUCCESS, suspectToDelete));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUSPECT_SUCCESS, suspectToDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof DeleteSuspectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteSuspectCommand) other).caseIndex)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 suspectIndex.equals(((DeleteSuspectCommand) other).suspectIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 66,
      "Vielheim": 2,
      "constancensq": 13
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/suspectcommands/EditSuspectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditSuspectCommand extends EditPersonCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_SUSPECT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \": Edits a person in the opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_SUSPECT + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_EMAIL + \"newEmail@mail.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_ADDRESS + \"New Road Crescent\\n\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_EDIT_SUSPECT_SUCCESS \u003d \"Edited Suspect: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SUSPECT \u003d \"This suspect already exists in the case.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditSuspectCommand.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditSuspectCommand(Index caseIndex, Index personIndex, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        super(caseIndex, personIndex, editPersonDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Editing a suspect in the opened case...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseToEdit \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e editedSuspects \u003d caseToEdit.getSuspects();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d editedSuspects.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Suspect suspectToEdit \u003d editedSuspects.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Suspect editedSuspect \u003d createEditedPerson(suspectToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (editedSuspects.contains(editedSuspect)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SUSPECT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        editedSuspects.set(personIndex.getZeroBased(), editedSuspect);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d new Case(caseToEdit.getTitle(), caseToEdit.getDescription(), caseToEdit.getStatus(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                caseToEdit.getDocuments(), editedSuspects, caseToEdit.getVictims(), caseToEdit.getWitnesses(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                caseToEdit.getTags(), caseToEdit.getArchiveStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.setCase(caseToEdit, editedCase);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_EDIT_SUSPECT_SUCCESS, editedSuspect));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUSPECT_SUCCESS, editedSuspect));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Suspect createEditedPerson(Suspect suspectToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert suspectToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(suspectToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(suspectToEdit.getGender());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(suspectToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(suspectToEdit.getEmail());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(suspectToEdit.getAddress());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Suspect(updatedName, updatedGender, updatedPhone, updatedEmail, updatedAddress);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 99,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/victimcommands/AddVictimCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class AddVictimCommand extends AddCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_VICTIM"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Adds a victim to the opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_VICTIM + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_PHONE + \"912345678 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_EMAIL + \"john@email.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_ADDRESS + \"Blk 123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_ADD_VICTIM_SUCCESS \u003d \"New victim added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VICTIM \u003d \"This victim already exists in the case\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddVictimCommand.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Victim victim;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates an AddVictimCommand to add the specified {@code Case}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param victim The victim to be added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public AddVictimCommand(Index index, Victim victim) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(victim);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.victim \u003d victim;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding victim to current case...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cVictim\u003e updatedVictims \u003d stateCase.getVictims();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (updatedVictims.contains(victim)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add victim: Tried to add a victim that exists in PIVOT\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VICTIM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        updatedVictims.add(victim);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                updatedVictims, stateCase.getWitnesses(), stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_ADD_VICTIM_SUCCESS, victim));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_VICTIM_SUCCESS, victim));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof AddVictimCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 victim.equals(((AddVictimCommand) other).victim)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 index.equals(((AddVictimCommand) other).index));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "CodyChew": 1,
      "Vielheim": 3,
      "constancensq": 86
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/victimcommands/DeleteVictimCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Deletes a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class DeleteVictimCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_DELETE_VICTIM_SUCCESS \u003d \"Deleted victim: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteVictimCommand.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index victimIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates a DeleteVictimCommand to delete the victim at specified index, in the case at specified index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param caseIndex The index of the case to delete the victim."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param victimIndex The index of the victim to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public DeleteVictimCommand(Index caseIndex, Index victimIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(caseIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(victimIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.victimIndex \u003d victimIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting victim from current case...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case stateCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cVictim\u003e updatedVictims \u003d stateCase.getVictims();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // invalid victim index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (victimIndex.getZeroBased() \u003e\u003d updatedVictims.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + victimIndex.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Victim victimToDelete \u003d updatedVictims.get(victimIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        updatedVictims.remove(victimToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                updatedVictims, stateCase.getWitnesses(), stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_DELETE_VICTIM_SUCCESS, victimToDelete));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VICTIM_SUCCESS, victimToDelete));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof DeleteVictimCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteVictimCommand) other).caseIndex)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 victimIndex.equals(((DeleteVictimCommand) other).victimIndex)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 14,
      "Vielheim": 2,
      "constancensq": 69
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/victimcommands/EditVictimCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditVictimCommand extends EditPersonCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_VICTIM"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \": Edits a person in the opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_VICTIM + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_EMAIL + \"newEmail@mail.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_ADDRESS + \"New Road Crescent\\n\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_EDIT_VICTIMS_SUCCESS \u003d \"Edited Victim: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VICTIMS \u003d \"This victim already exists in the case.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditVictimCommand.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditVictimCommand(Index caseIndex, Index personIndex, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        super(caseIndex, personIndex, editPersonDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Editing a victim in the opened case...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseToEdit \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cVictim\u003e editedVictims \u003d caseToEdit.getVictims();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d editedVictims.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Victim victimToEdit \u003d editedVictims.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Victim editedVictim \u003d createEditedPerson(victimToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (editedVictims.contains(editedVictim)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VICTIMS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        editedVictims.set(personIndex.getZeroBased(), editedVictim);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d new Case(caseToEdit.getTitle(), caseToEdit.getDescription(), caseToEdit.getStatus(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                caseToEdit.getDocuments(), caseToEdit.getSuspects(), editedVictims, caseToEdit.getWitnesses(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                caseToEdit.getTags(), caseToEdit.getArchiveStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.setCase(caseToEdit, editedCase);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_EDIT_VICTIMS_SUCCESS, editedVictim));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_VICTIMS_SUCCESS, editedVictim));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Victim createEditedPerson(Victim victimToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert victimToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(victimToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(victimToEdit.getGender());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(victimToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(victimToEdit.getEmail());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(victimToEdit.getAddress());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Victim(updatedName, updatedGender, updatedPhone, updatedEmail, updatedAddress);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 99,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/witnesscommands/AddWitnessCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddWitnessCommand extends AddCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_WITNESS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Adds a witness to the opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_WITNESS + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_PHONE + \"912345678 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_EMAIL + \"john@email.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_ADDRESS + \"Blk 123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_ADD_WITNESS_SUCCESS \u003d \"New witness added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WITNESS \u003d \"This witness already exists in the case\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddWitnessCommand.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Witness witness;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddWitnessCommand to add the specified {@code Case}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param witness The witness to be added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public AddWitnessCommand(Index index, Witness witness) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(witness);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.witness \u003d witness;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding witness to current case...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cWitness\u003e updatedWitnesses \u003d stateCase.getWitnesses();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (updatedWitnesses.contains(witness)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add witness: Tried to add a witness that exists in PIVOT\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WITNESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        updatedWitnesses.add(witness);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getVictims(), updatedWitnesses, stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_ADD_WITNESS_SUCCESS, witness));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_WITNESS_SUCCESS, witness));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || (other instanceof AddWitnessCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 witness.equals(((AddWitnessCommand) other).witness)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 index.equals(((AddWitnessCommand) other).index));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "Jargonx": 55,
      "Vielheim": 8,
      "constancensq": 26
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/witnesscommands/DeleteWitnessCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Deletes a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteWitnessCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_DELETE_WITNESS_SUCCESS \u003d \"Deleted witness: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteWitnessCommand.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Index witnessIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Creates a DeleteWitnessCommand to delete the witness at specified index, in the case at specified index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * @param caseIndex The index of the case to delete the witness."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * @param witnessIndex The index of the witness to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public DeleteWitnessCommand(Index caseIndex, Index witnessIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(caseIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(witnessIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.witnessIndex \u003d witnessIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting witness from current case...\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Case stateCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cWitness\u003e updatedWitnesses \u003d stateCase.getWitnesses();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid witness index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (witnessIndex.getZeroBased() \u003e\u003d updatedWitnesses.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + witnessIndex.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Witness witnessToDelete \u003d updatedWitnesses.get(witnessIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        updatedWitnesses.remove(witnessToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getVictims(), updatedWitnesses, stateCase.getTags(), stateCase.getArchiveStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_DELETE_WITNESS_SUCCESS, witnessToDelete));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_WITNESS_SUCCESS, witnessToDelete));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                || (other instanceof DeleteWitnessCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteWitnessCommand) other).caseIndex)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 witnessIndex.equals(((DeleteWitnessCommand) other).witnessIndex)); // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 15,
      "Jargonx": 56,
      "Vielheim": 2,
      "constancensq": 13
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/witnesscommands/EditWitnessCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditPersonCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditWitnessCommand extends EditPersonCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_WITNESS"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \": Edits a person in the opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_WITNESS + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_EMAIL + \"newEmail@mail.com \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_ADDRESS + \"New Road Crescent\\n\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_EDIT_WITNESS_SUCCESS \u003d \"Edited Witness: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WITNESS \u003d \"This witness already exists in the case.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditWitnessCommand.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditWitnessCommand(Index caseIndex, Index personIndex, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        super(caseIndex, personIndex, editPersonDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Editing a witness in the opened case...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : ASSERT_VALID_INDEX;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseToEdit \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cWitness\u003e editedWitnesses \u003d caseToEdit.getWitnesses();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d editedWitnesses.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(UserMessages.MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Witness witnessToEdit \u003d editedWitnesses.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Witness editedWitness \u003d createEditedPerson(witnessToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (editedWitnesses.contains(editedWitness)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WITNESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        editedWitnesses.set(personIndex.getZeroBased(), editedWitness);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d new Case(caseToEdit.getTitle(), caseToEdit.getDescription(), caseToEdit.getStatus(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                caseToEdit.getDocuments(), caseToEdit.getSuspects(), caseToEdit.getVictims(), editedWitnesses,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                caseToEdit.getTags(), caseToEdit.getArchiveStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.setCase(caseToEdit, editedCase);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.commitPivot(String.format(MESSAGE_EDIT_WITNESS_SUCCESS, editedWitness));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_WITNESS_SUCCESS, editedWitness));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Witness createEditedPerson(Witness witnessToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert witnessToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(witnessToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(witnessToEdit.getGender());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(witnessToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(witnessToEdit.getEmail());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(witnessToEdit.getAddress());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Witness(updatedName, updatedGender, updatedPhone, updatedEmail, updatedAddress);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 99,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddCaseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandParser implements Parser\u003cAddCaseCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddCaseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atMainPage()) : ASSERT_MAIN_PAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_STATUS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Description description \u003d new Description(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).orElse(\"active\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cDocument\u003e documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case investigationCase \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            investigationCase \u003d new Case(title, description, status, documents,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    suspects, victims, witnesses, tagList, ArchiveStatus.ARCHIVED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            investigationCase \u003d new Case(title, description, status, documents,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    suspects, victims, witnesses, tagList, ArchiveStatus.DEFAULT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new AddCaseCommand(investigationCase);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 44,
      "Vielheim": 2,
      "constancensq": 17
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return parseMainPage(matcher);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return parseCasePage(matcher);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns relevant AddCommand by calling specific parser for main page."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static AddCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new AddCaseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DESC:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns relevant AddCommand by calling specific parser for case page."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static AddCommand parseCasePage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DESC:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return new AddDescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new AddDocumentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new AddSuspectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return new AddWitnessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new AddVictimCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 23,
      "CodyChew": 1,
      "Jargonx": 1,
      "-": 18,
      "Vielheim": 38,
      "constancensq": 38
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddDescriptionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddDescriptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDescriptionCommandParser implements Parser\u003cAddDescriptionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public AddDescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESC)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    AddDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .getValue(PREFIX_DESC).orElse(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new AddDescriptionCommand(index, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "Vielheim": 22,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddDocumentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_REFERENCE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.AddDocumentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class AddDocumentCommandParser implements Parser\u003cAddDocumentCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDocumentCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * and returns an AddDocumentCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public AddDocumentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_REFERENCE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_REFERENCE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Reference reference \u003d ParserUtil.parseReference(argMultimap.getValue(PREFIX_REFERENCE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!reference.isExists()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document doc \u003d new Document(name, reference);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new AddDocumentCommand(index, doc);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "CodyChew": 37,
      "Vielheim": 2,
      "constancensq": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddSuspectCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.AddSuspectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddSuspectCommandParser implements Parser\u003cAddSuspectCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddSuspectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSuspectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Suspect suspect \u003d new Suspect(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new AddSuspectCommand(index, suspect);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 26,
      "Vielheim": 1,
      "constancensq": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddVictimCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.victimcommands.AddVictimCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class AddVictimCommandParser implements Parser\u003cAddVictimCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public AddVictimCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVictimCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Victim victim \u003d new Victim(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new AddVictimCommand(index, victim);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "Vielheim": 1,
      "constancensq": 37
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddWitnessCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.witnesscommands.AddWitnessCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddWitnessCommandParser implements Parser\u003cAddWitnessCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public AddWitnessCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWitnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Witness witness \u003d new Witness(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new AddWitnessCommand(index, witness);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "Jargonx": 17,
      "Vielheim": 1,
      "constancensq": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ArchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String MESSAGE_CASE_INCORRECT_SECTION_MAIN_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Type \u0027list case\u0027 to see cases that you can archive.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String MESSAGE_CASE_INCORRECT_SECTION_CASE_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Return to the Main Page and type \u0027list case\u0027 to see cases that you can archive.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * and returns a ArchiveCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                throw new ParseException(MESSAGE_CASE_INCORRECT_SECTION_CASE_PAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                throw new ParseException(MESSAGE_CASE_INCORRECT_SECTION_MAIN_PAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                return parseMainPage(matcher);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns ArchiveCommand."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return ArchiveCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type or incorrect index format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public ArchiveCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // wrong format (e.g. \u0027archive\u0027)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    ArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String archiveType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // wrong type (e.g. \u0027archive xyz\u0027)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!archiveType.equals(TYPE_CASE)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    ArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // obtains index. if index is of wrong format, throw error."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d ParserUtil.getParsedIndex(indexString, ArchiveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 1,
      "constancensq": 86
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /* Prefix definitions for Case */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t:\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final Prefix PREFIX_REFERENCE \u003d new Prefix(\"r:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s:\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Prefix PREFIX_DESC \u003d new Prefix(\"d:\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /* Prefix definitions for CasePerson */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e:\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "CodyChew": 2,
      "-": 9,
      "Vielheim": 1,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.DeleteCaseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.DeleteDocumentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.DeleteSuspectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.victimcommands.DeleteVictimCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.witnesscommands.DeleteWitnessCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return parseMainPage(matcher);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return parseCasePage(matcher);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // Might be Dead code, above if conditions are binary"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns relevant DeleteCommand for main page."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public DeleteCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final String deleteType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        switch (deleteType) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            Index index \u003d ParserUtil.getParsedIndex(indexString, DeleteCommand.MESSAGE_USAGE_MAIN_PAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new DeleteCaseCommand(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns relevant DeleteCommand for case page."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public DeleteCommand parseCasePage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String deleteType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (deleteType.equals(TYPE_CASE)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d ParserUtil.getParsedIndex(indexString, DeleteCommand.MESSAGE_USAGE_CASE_PAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index caseIndex \u003d StateManager.getState();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        switch (deleteType) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new DeleteDocumentCommand(caseIndex, index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new DeleteSuspectCommand(caseIndex, index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return new DeleteWitnessCommand(caseIndex, index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new DeleteVictimCommand(caseIndex, index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 17,
      "Jargonx": 14,
      "CodyChew": 1,
      "-": 15,
      "constancensq": 70
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check if at case page"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String editType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        switch (editType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_TITLE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new EditTitleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_STATUS:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new EditStatusCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new EditDocumentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new EditSuspectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new EditWitnessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new EditVictimCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "CodyChew": 32,
      "-": 27,
      "constancensq": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditDocumentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_REFERENCE_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_MISSING_PREFIX_INVALID_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_REFERENCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.EditDocumentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class EditDocumentCommandParser implements Parser\u003cEditDocumentCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public EditDocumentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get document index and arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    EditDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String docIndex \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //convert docIndex to Index class"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index documentIndex \u003d ParserUtil.getParsedIndex(docIndex, EditDocumentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get case from state"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index caseIndex \u003d StateManager.getState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //set up argMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_NAME, PREFIX_REFERENCE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        boolean noPrefix \u003d !arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_REFERENCE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for prefixes or command validity"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (noPrefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_PREFIX_INVALID_COMMAND,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    EditDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        } else if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //initialize possible Name and Reference"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Optional\u003cName\u003e name \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Optional\u003cReference\u003e reference \u003d Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //update name if valid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            name \u003d Optional.of(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //update reference if valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REFERENCE).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            reference \u003d Optional.of(ParserUtil.parseReference(argMultimap.getValue(PREFIX_REFERENCE).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            assert(reference.isPresent()) : ASSERT_REFERENCE_VALID;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            if (!reference.get().isExists()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                throw new ParseException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new EditDocumentCommand(caseIndex, documentIndex, name, reference);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 79
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditStatusCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.EditStatusCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class EditStatusCommandParser implements Parser\u003cEditStatusCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public EditStatusCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STATUS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STATUS)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStatusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).orElse(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new EditStatusCommand(index, status);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 32
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditSuspectCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.EditSuspectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditSuspectCommandParser implements Parser\u003cEditSuspectCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditSuspectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    EditSuspectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String index \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // convert index to Index class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index suspectIndex \u003d ParserUtil.getParsedIndex(index, EditSuspectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // get case from state"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index caseIndex \u003d StateManager.getState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                arguments, PREFIX_NAME, PREFIX_GENDER, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d ParserUtil.parseEditedPersonFields(argMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new EditSuspectCommand(caseIndex, suspectIndex, editPersonDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 49
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditTitleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.EditTitleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class EditTitleCommandParser implements Parser\u003cEditTitleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public EditTitleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTitleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).orElse(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new EditTitleCommand(index, title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 32
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditVictimCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.victimcommands.EditVictimCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditVictimCommandParser implements Parser\u003cEditVictimCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditVictimCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    EditVictimCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String index \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // convert index to Index class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index victimIndex \u003d ParserUtil.getParsedIndex(index, EditVictimCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // get case from state"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index caseIndex \u003d StateManager.getState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                arguments, PREFIX_NAME, PREFIX_GENDER, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d ParserUtil.parseEditedPersonFields(argMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new EditVictimCommand(caseIndex, victimIndex, editPersonDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 49
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditWitnessCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.DeveloperMessages.ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.witnesscommands.EditWitnessCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditWitnessCommandParser implements Parser\u003cEditWitnessCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditWitnessCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : ASSERT_CASE_PAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    EditWitnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String index \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // convert index to Index class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index witnessIndex \u003d ParserUtil.getParsedIndex(index, EditWitnessCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // get case from state"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index caseIndex \u003d StateManager.getState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                arguments, PREFIX_NAME, PREFIX_GENDER, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d ParserUtil.parseEditedPersonFields(argMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new EditWitnessCommand(caseIndex, witnessIndex, editPersonDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 49
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.DetailsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return new FindCommand(new DetailsContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 29,
      "Vielheim": 2,
      "constancensq": 9
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_ARCHIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.ListTabCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.ListArchiveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return parseMainPage(matcher);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return parseCasePage(matcher);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static ListCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    ListCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new ListCaseCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_ARCHIVE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new ListArchiveCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    ListCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static ListCommand parseCasePage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    ListCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return new ListTabCommand(commandWord);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_ARCHIVE:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    ListCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "Vielheim": 55,
      "constancensq": 33
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/OpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.OpenCaseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.OpenDocumentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Parses input arguments and creates a new OpenCommand Object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return parseMainPage(matcher);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return parseCasePage(matcher);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static OpenCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    OpenCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String openType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index index \u003d ParserUtil.getParsedIndex(indexString, OpenCaseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        switch(openType) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new OpenCaseCommand(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static OpenCommand parseCasePage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String openType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index index \u003d ParserUtil.getParsedIndex(indexString, OpenCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        switch(openType) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new OpenCaseCommand(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new OpenDocumentCommand(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "CodyChew": 76,
      "constancensq": 4
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditPersonCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Obtains the parsed index and throws relevant parse exception based on messageUsage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param indexString"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param messageUsage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return Index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if specified index is invalid (not non-zero unsigned integer)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Index getParsedIndex(String indexString, String messageUsage) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return ParserUtil.parseIndex(indexString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String trimmedTitle \u003d name.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Name.isValidName(trimmedTitle)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Name(trimmedTitle);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Parses a {@code String status} into an {@code Status}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!Status.isValidStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Status.createStatus(trimmedStatus);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses a {@code String reference}  into an {@code Reference}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the given {@code reference}  is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Reference parseReference(String reference) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(reference);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String trimmedReference \u003d reference.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Reference.isValidReference(trimmedReference)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new Reference(trimmedReference);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return Gender.createGender(trimmedGender);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Address parseAddress(String address) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Parses the fields of a CasePerson that are to be edited into an EditPersonDescriptor."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param argMultimap Contains the fields of a CasePerson that are to be edited."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @return An EditPersonDescriptor."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws ParseException If no fields are edited."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static EditPersonDescriptor parseEditedPersonFields(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(argMultimap);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return editPersonDescriptor;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 63,
      "CodyChew": 24,
      "-": 63,
      "Vielheim": 15,
      "constancensq": 93
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/PivotParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.ArchiveCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.UnarchiveCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case ReturnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new ReturnCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 22,
      "CodyChew": 6,
      "-": 60,
      "Vielheim": 2,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * E.g. \u0027n:\u0027 in \u0027add witness n:James\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/UnarchiveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.UnarchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String MESSAGE_INCORRECT_SECTION_MAIN_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Type \u0027list archive\u0027 to see cases that you can unarchive.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String MESSAGE_INCORRECT_SECTION_CASE_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Return to the main page and type \u0027list archive\u0027 to see cases that you can unarchive.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * and returns a UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                throw new ParseException(MESSAGE_INCORRECT_SECTION_CASE_PAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atDefaultSection()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                throw new ParseException(MESSAGE_INCORRECT_SECTION_MAIN_PAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            if (StateManager.atArchivedSection()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                return parseMainPage(matcher);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns UnarchiveCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return UnarchiveCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type or incorrect index format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public UnarchiveCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // wrong format (e.g. \u0027unarchive\u0027)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    UnarchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String unarchiveType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // wrong type (e.g. \u0027unarchive xyz\u0027)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!unarchiveType.equals(TYPE_CASE)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    UnarchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // obtains index. if index is of wrong format, throw error."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d ParserUtil.getParsedIndex(indexString, UnarchiveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Vielheim": 1,
      "constancensq": 89
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/state/StateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.ui.UiStateManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Tracks the state of the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class StateManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Optional\u003cIndex\u003e state \u003d Optional.empty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static ArchiveStatus currentSection \u003d ArchiveStatus.DEFAULT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static Optional\u003cString\u003e tabState \u003d Optional.empty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StateManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Gets the state of the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return Index of case that the program is at,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * or null if at main page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Index getState() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return state.orElse(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Sets the state of program to a case index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param index Index of a case in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void setState(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Setting state with index\" + index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert (index !\u003d null) : \"index should not be null\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        state \u003d Optional.of(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.setCasePanelState(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Resets the state of program to an empty state."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void resetState() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Resetting State\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        state \u003d Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.resetCasePanelState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Checks if the state of the program is at an investigation case."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return true if the state is non empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean atCasePage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return state.isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Checks if the state of the program is at the main page."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return true if the state of the program is empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean atMainPage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return state.isEmpty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Requests UIStateManager to refresh the GUI."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void refresh() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Requests UIStateManager to refresh state\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.refresh();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the archiveStatus of the program to be at archived section."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static void setArchivedSection() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"StateManager: Setting archiveStatus:\" + ArchiveStatus.ARCHIVED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        currentSection \u003d ArchiveStatus.ARCHIVED;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.setStatusBarArchived();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the archiveStatus of the program to be at default section."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static void setDefaultSection() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"StateManager: Setting archiveStatus:\" + ArchiveStatus.DEFAULT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        currentSection \u003d ArchiveStatus.DEFAULT;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.setStatusBarDefault();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Checks if the program is at the archived section"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static boolean atArchivedSection() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return currentSection.equals(ArchiveStatus.ARCHIVED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Checks if the program is at the default section"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static boolean atDefaultSection() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return currentSection.equals(ArchiveStatus.DEFAULT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the tabState of program to given tabType"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param tabType"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void setTabState(String tabType) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Setting tabState with tab\" + tabType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert (tabType !\u003d null) : \"tabType should not be null\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert (atCasePage()) : \"State should not be null\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        tabState \u003d Optional.of(tabType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.setTabState(tabType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Resets the tabState to empty state."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void resetTabState() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Resetting tabState\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        tabState \u003d Optional.empty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.resetTabState();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static String getTabState() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return tabState.orElse(null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "CodyChew": 57,
      "Vielheim": 41,
      "constancensq": 35
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    Predicate\u003cCase\u003e PREDICATE_SHOW_DEFAULT_CASES \u003d investigationCase -\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            investigationCase.getArchiveStatus().equals(ArchiveStatus.DEFAULT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    Predicate\u003cCase\u003e PREDICATE_SHOW_ARCHIVED_CASES \u003d investigationCase -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            investigationCase.getArchiveStatus().equals(ArchiveStatus.ARCHIVED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void setPivotFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void setPivot(ReadOnlyPivot addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ReadOnlyPivot getPivot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if a case with the same identity as {@code case} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    boolean hasCase(Case investigationCase);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Deletes the given case."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must exist in PIVOT."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void deleteCase(Case target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds the given case."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code case} must not already exist in PIVOT."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void addCase(Case investigationCase);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the given case {@code target} with {@code editedCase}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case identity of {@code editedCase} must not be the same as another existing case in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void setCase(Case target, Case editedCase);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns an unmodifiable view of the filtered case list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    default ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Updates the filter of the filtered case list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void updateFilteredCaseList(Predicate\u003cCase\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void commitPivot(String command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    boolean canRedoPivot();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    String redoPivot();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    boolean canUndoPivot();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    String undoPivot();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 29,
      "-": 64,
      "Vielheim": 6,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents the in-memory model of the PIVOT data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Pivot pivot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final VersionedPivot versionedPivot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final FilteredList\u003cCase\u003e filteredCases;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Initializes a ModelManager with the given PIVOT and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ModelManager(ReadOnlyPivot pivot, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(pivot, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.fine(\"Initializing with PIVOT: \" + pivot + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivot \u003d new Pivot(pivot);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.versionedPivot \u003d new VersionedPivot(pivot);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        filteredCases \u003d new FilteredList\u003c\u003e(this.pivot.getCaseList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this(new Pivot(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return userPrefs.getPivotFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivotFilePath(Path pivotFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(pivotFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(pivotFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PIVOT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivot(ReadOnlyPivot pivot) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivot.resetData(pivot);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StateManager.refresh();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot.hasCase(investigationCase);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void deleteCase(Case target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.removeCase(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.addCase(investigationCase);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(target, editedCase);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.setCase(target, editedCase);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.refresh();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Versioned Pivot \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void commitPivot(String command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.versionedPivot.purgeStates();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.versionedPivot.commit(new Pivot(this.pivot), command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean canRedoPivot() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this.versionedPivot.canRedo();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public String redoPivot() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot pivot \u003d this.versionedPivot.redo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.setPivot(pivot);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this.versionedPivot.getStateCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean canUndoPivot() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this.versionedPivot.canUndo();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public String undoPivot() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String command \u003d this.versionedPivot.getStateCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot pivot \u003d this.versionedPivot.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.setPivot(pivot);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Case List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Case} backed by the internal list of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code versionedPivot}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return filteredCases;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        filteredCases.setPredicate(predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot.equals(other.pivot)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 filteredCases.equals(other.filteredCases);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 81,
      "-": 105,
      "Vielheim": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/Pivot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.UniqueCaseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Wraps all data at the PIVOT level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Duplicates are not allowed (by .isSameCase comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class Pivot implements ReadOnlyPivot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final UniqueCaseList cases;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates a PIVOT using the Cases in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot(ReadOnlyPivot toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the contents of the case list with {@code cases}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code cases} must not contain duplicate cases."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCases(List\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.cases.setCases(cases);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Resets the existing data of this {@code PIVOT} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void resetData(ReadOnlyPivot newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        setCases(newData.getCaseList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    //// case-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if a case with the same identity as {@code case} exists in PIVOT."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.contains(investigationCase);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds a case to PIVOT."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must not already exist in PIVOT."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void addCase(Case p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the given case {@code target} in the list with {@code editedCase}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code target} must exist in PIVOT."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case identity of {@code editedCase} must not be the same as another existing case in PIVOT."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(editedCase);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases.setCase(target, editedCase);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Removes {@code key} from this {@code PIVOT}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code key} must exist in PIVOT."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void removeCase(Case key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.asUnmodifiableObservableList().size() + \" cases\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e getCaseList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof Pivot // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 cases.equals(((Pivot) other).cases));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 43,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/ReadOnlyPivot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Unmodifiable view of a PIVOT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public interface ReadOnlyPivot {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns an unmodifiable view of the cases list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * This list will not contain any duplicate cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ObservableList\u003cCase\u003e getCaseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Path pivotFilePath \u003d Paths.get(\"data\" , \"pivot.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        setPivotFilePath(newUserPrefs.getPivotFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivotFilePath(Path pivotFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(pivotFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivotFilePath \u003d pivotFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 pivotFilePath.equals(o.pivotFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Objects.hash(guiSettings, pivotFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + pivotFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/VersionedPivot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class VersionedPivot extends Pivot {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String INITIAL_COMMAND \u003d \"Initial command\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final int INITIAL_STATE \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final List\u003cReadOnlyPivot\u003e pivotStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final List\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Create a VersionedPivot object with the list of Pivot states being"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * initialised with the initial state. The current state pointer points to the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * initial state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param pivot The initial Pivot state."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public VersionedPivot(ReadOnlyPivot pivot) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(pivot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivotStateList.add(pivot);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        commands.add(INITIAL_COMMAND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        currentStatePointer \u003d INITIAL_STATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Create a VersionedPivot object with the fields directly initialised with"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * the arguments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param pivotStateList The list of Pivot states."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param commands The list of commands corresponding to the Pivot states."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param currentStatePointer The index of the current Pivot state in the pivotStateList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public VersionedPivot(List\u003cReadOnlyPivot\u003e pivotStateList,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            List\u003cString\u003e commands, int currentStatePointer) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivotStateList.addAll(pivotStateList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.commands.addAll(commands);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.currentStatePointer \u003d currentStatePointer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public List\u003cReadOnlyPivot\u003e getPivotStateList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this.pivotStateList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public List\u003cString\u003e getCommands() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this.commands;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public int getCurrentStatePointer() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this.currentStatePointer;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public String getStateCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return commands.get(currentStatePointer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Check if the current state can be undone."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @return True if the currentStatePointer is not at the initial state, false otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert currentStatePointer \u003c pivotStateList.size() \u0026\u0026 currentStatePointer \u003e\u003d 0 : \"Index out of bounds\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return currentStatePointer !\u003d INITIAL_STATE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Check if the current state can be redone."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @return True if the currentStatePointer is not at the most recent state, false otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert currentStatePointer \u003c pivotStateList.size() \u0026\u0026 currentStatePointer \u003e\u003d 0 : \"Index out of bounds\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return currentStatePointer !\u003d (pivotStateList.size() - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Remove all states after the current state and add the current Pivot state into the list of Pivot states."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param pivot Current Pivot state."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void commit(ReadOnlyPivot pivot, String command) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(pivot, command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivotStateList.add(pivot);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        commands.add(command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert currentStatePointer \u003c pivotStateList.size() : \"Index out of bounds\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Remove all states after the current state."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void purgeStates() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int stateAfterCurrent \u003d currentStatePointer + 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (int i \u003d stateAfterCurrent; i \u003c pivotStateList.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            pivotStateList.remove(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            commands.remove(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Undo the previous Pivot state."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @return Previous Pivot state."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ReadOnlyPivot undo() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert currentStatePointer \u003e\u003d 0 : \"Index out of bounds\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Redo the most recent pivot state."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @return Recent pivot state."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ReadOnlyPivot redo() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert currentStatePointer \u003c pivotStateList.size() : \"Index out of bounds\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!(other instanceof VersionedPivot)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        VersionedPivot otherVersionedPivot \u003d (VersionedPivot) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return otherVersionedPivot.getPivotStateList().equals(getPivotStateList())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherVersionedPivot.getCommands().equals(getCommands())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherVersionedPivot.getCurrentStatePointer() \u003d\u003d getCurrentStatePointer();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 142
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Alphanumeric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public abstract class Alphanumeric {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            \"Only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The first character of the input must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String alphaNum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param alphaNum A valid alphaNum."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    protected Alphanumeric(String alphaNum, boolean canBeBlank) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(alphaNum);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedAlphanum \u003d alphaNum.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        checkArgument(isValidAlphanum(trimmedAlphanum, canBeBlank), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.alphaNum \u003d trimmedAlphanum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public String getAlphaNum() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return alphaNum;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    protected static boolean isValidAlphanum(String test, boolean canBeBlank) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedTest \u003d test.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return canBeBlank"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ? trimmedTest.isEmpty() || trimmedTest.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                : trimmedTest.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return alphaNum;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Objects.hash(alphaNum);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "CodyChew": 37,
      "Vielheim": 17,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/ArchiveStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public enum ArchiveStatus {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    DEFAULT, ARCHIVED"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Case.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a Case in PIVOT."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class Case {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String DESCRIPTION_HEADER \u003d \"Description: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String STATUS_HEADER \u003d \"Status: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String DOCUMENTS_HEADER \u003d \"Documents: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String SUSPECTS_HEADER \u003d \"Suspects: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String VICTIMS_HEADER \u003d \"Victims: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String WITNESSES_HEADER \u003d \"Witnesses: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String TAGS_HEADER \u003d \"Tags: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final List\u003cSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final List\u003cVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final List\u003cWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final List\u003cDocument\u003e documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Case(Title title, Description description, Status status, List\u003cDocument\u003e documents,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                List\u003cSuspect\u003e suspects, List\u003cVictim\u003e victims, List\u003cWitness\u003e witnesses, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ArchiveStatus archiveStatus) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(title, description, status, documents, suspects, victims, witnesses, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documents.addAll(documents);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.suspects.addAll(suspects);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.victims.addAll(victims);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.witnesses.addAll(witnesses);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public List\u003cDocument\u003e getDocuments() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return documents.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public List\u003cSuspect\u003e getSuspects() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return suspects.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public List\u003cVictim\u003e getVictims() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return victims.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public List\u003cWitness\u003e getWitnesses() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return witnesses.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public ArchiveStatus getArchiveStatus() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return archiveStatus;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if both cases of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * This defines a weaker notion of equality between two cases."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean isSameCase(Case otherCase) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (otherCase \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return otherCase !\u003d null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if both cases have the same identity and data fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * This defines a stronger notion of equality between two cases."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!(other instanceof Case)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case otherCase \u003d (Case) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return otherCase.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getDocuments().equals(getDocuments())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getSuspects().equals(getSuspects())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getVictims().equals(getVictims())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getWitnesses().equals(getWitnesses())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getTags().equals(getTags());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return Objects.hash(title, description, status, documents,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            suspects, victims, witnesses, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(getTitle()).append(\"\\n\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .append(DESCRIPTION_HEADER).append(getDescription()).append(\"\\n\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .append(STATUS_HEADER).append(getStatus());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Documents"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!getDocuments().isEmpty()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(DOCUMENTS_HEADER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Stream\u003cString\u003e docs \u003d getDocuments().stream().map(x -\u003e x.getName().toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(docs.collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Suspects"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!getSuspects().isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(SUSPECTS_HEADER);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Stream\u003cString\u003e suspects \u003d getSuspects().stream().map(x -\u003e x.getName().toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(suspects.collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Victims"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!getVictims().isEmpty()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(VICTIMS_HEADER);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Stream\u003cString\u003e victims \u003d getVictims().stream().map(x -\u003e x.getName().toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(victims.collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Witnesses"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!getWitnesses().isEmpty()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(WITNESSES_HEADER);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Stream\u003cString\u003e witnesses \u003d getWitnesses().stream().map(x -\u003e x.getName().toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(witnesses.collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Tags"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!getTags().isEmpty()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(TAGS_HEADER);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(tag.tagName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 32,
      "CodyChew": 9,
      "Jargonx": 5,
      "-": 65,
      "Vielheim": 21,
      "constancensq": 69
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Represents an Investigation Case\u0027s description in PIVOT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Description extends Alphanumeric {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //TODO: Might want to change validation check"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final boolean CAN_BE_BLANK \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(description, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Can be blank."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return isValidAlphanum(test, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 getAlphaNum().equals(((Description) other).getAlphaNum())); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Jargonx": 1,
      "Vielheim": 35
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/DetailsContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.CasePerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class DetailsContainsKeywordsPredicate implements Predicate\u003cCase\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public DetailsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean test(Case investigationCase) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(investigationCase.getTitle().getAlphaNum(), keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(investigationCase.getDescription().toString(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                                keyword)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(investigationCase.getStatus().toString(), keyword)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(getDocumentsInfo(investigationCase), keyword)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(getSuspectsInfo(investigationCase), keyword)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(getVictimsInfo(investigationCase), keyword)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(getWitnessesInfo(investigationCase), keyword)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Obtains information of all documents in a case, with each word separated by an empty space."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param investigationCase The case to obtain information from."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return String containing all documents information (name and reference)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public String getDocumentsInfo(Case investigationCase) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StringBuilder documentsInfo \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (Document doc : investigationCase.getDocuments()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            documentsInfo.append(doc.getName()).append(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            documentsInfo.append(doc.getReference().getFileName()).append(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return documentsInfo.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Obtains information of all suspects in a case, with each word separated by an empty space."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param investigationCase The case to obtain information from."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return String containing all witnesses information."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public String getSuspectsInfo(Case investigationCase) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StringBuilder suspectsInfo \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (Suspect suspect : investigationCase.getSuspects()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            appendPersonDetails(suspectsInfo, suspect);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return suspectsInfo.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Obtains information of all victims in a case, with each word separated by an empty space."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param investigationCase The case to obtain information from."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return String containing all witnesses information."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public String getWitnessesInfo(Case investigationCase) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StringBuilder witnessesInfo \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (Witness witness : investigationCase.getWitnesses()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            appendPersonDetails(witnessesInfo, witness);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return witnessesInfo.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Obtains information of all victims in a case, with each word separated by an empty space."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param investigationCase The case to obtain information from."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return String containing all victims information."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public String getVictimsInfo(Case investigationCase) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StringBuilder victimsInfo \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (Victim victim : investigationCase.getVictims()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            appendPersonDetails(victimsInfo, victim);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return victimsInfo.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Appends all fields of a person into the StringBuilder defined as first parameter,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * with each field separated by an empty space."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param builder The StringBuilder to append to."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param person The CasePerson whose details are to be added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void appendPersonDetails(StringBuilder builder, CasePerson person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(person.getName()).append(\" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(person.getGender().toString()).append(\" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(person.getPhone()).append(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(person.getEmail()).append(\" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(person.getAddress()).append(\" \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof DetailsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 keywords.equals(((DetailsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 23,
      "constancensq": 90
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Document.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Document {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public final Reference reference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs an {@code Document}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param reference A valid reference."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Document(Name name, Reference reference) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(reference);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.reference \u003d reference;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Reference getReference() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.reference;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof Document // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 name.equals(((Document) other).name)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 reference.equals(((Document) other).reference)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Objects.hash(name, reference);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return \"Name: \" + this.name + \", Reference: \" + this.reference;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 46,
      "Vielheim": 3,
      "constancensq": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Reference.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Document\u0027s reference in an investigation case."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidReference(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Reference {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            \"File should be placed in the ./reference folder. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    + \"Please only enter the non-blank file name with its extension.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"./references/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected final String fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a { @code Reference }."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param fileName A valid file name in the default folder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Reference(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        checkArgument(isValidReference(fileName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.path \u003d Paths.get(getFilePath() + fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Returns the directory path used to store the references."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return DEFAULT_FILEPATH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Returns true if a given file path is valid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean isValidReference(String fileName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return FileUtil.isValidPath(DEFAULT_FILEPATH + fileName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Returns true is the {@code Reference} exists in the program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean isExists() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return FileUtil.isFileExists(path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.path.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof Reference // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 path.equals(((Reference) other).path)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Objects.hash(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.fileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "CodyChew": 82,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ACTIVE, COLD, CLOSED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Status can only be either active, cold or closed\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a Status Enum Object using the given status."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return Status"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Status createStatus(String status) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Status.valueOf(status.trim().toUpperCase());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if a given string is a valid status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        for (Status status : Status.values()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            if (status.name().equals(test.trim().toUpperCase())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 20,
      "Vielheim": 12
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Title of a Case in PIVOT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Title extends Alphanumeric {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final boolean CAN_BE_BLANK \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(title, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean isValidTitle(String title) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return isValidAlphanum(title, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 getAlphaNum().equals(((Title) other).getAlphaNum())); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 24,
      "Vielheim": 7
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/UniqueCaseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.CaseNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.DuplicateCaseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A list of cases that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A case is considered unique by comparing using {@code Case#isSameCase(Case)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * cases uses Case#isSameCase(Case) for equality so as to ensure that the case being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * unique in terms of identity in the UniqueCaseList. However, the removal of a case uses Case#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * as to ensure that the case with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * @see Case#isSameCase(Case)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class UniqueCaseList implements Iterable\u003cCase\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final ObservableList\u003cCase\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final ObservableList\u003cCase\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if the list contains an equivalent case as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean contains(Case toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCase);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds a case to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void add(Case toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DuplicateCaseException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the case {@code target} in the list with {@code editedCase}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case identity of {@code editedCase} must not be the same as another existing case in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(target, editedCase);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CaseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!target.isSameCase(editedCase) \u0026\u0026 contains(editedCase)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DuplicateCaseException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.set(index, editedCase);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Removes the equivalent case from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void remove(Case toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CaseNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCases(UniqueCaseList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the contents of this list with {@code cases}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code cases} must not contain duplicate cases."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCases(List\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(cases);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!casesAreUnique(cases)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DuplicateCaseException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.setAll(cases);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Iterator\u003cCase\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof UniqueCaseList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCaseList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if {@code cases} contains only unique cases."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private boolean casesAreUnique(List\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (int i \u003d 0; i \u003c cases.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cases.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                if (cases.get(i).isSameCase(cases.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 137
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Represents a Person\u0027s address in PIVOT."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        value \u003d address.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Vielheim": 1,
      "constancensq": 40
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/CasePerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Encapsulates a Person related to an Investigation Case."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public abstract class CasePerson {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePerson(Name name, Gender gender, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireAllNonNull(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return Objects.hash(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .append(getGender());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!phone.toString().isBlank()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\" Phone: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    .append(getPhone());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!email.toString().isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\" Email: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    .append(getEmail());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!address.toString().isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            builder.append(\" Address: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    .append(getAddress());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 5,
      "constancensq": 82
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Represents a Person\u0027s email in PIVOT."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        checkArgument(isValidEmail(trimmedEmail), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        value \u003d trimmedEmail;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedTest \u003d test.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return trimmedTest.isBlank() || trimmedTest.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "Vielheim": 5,
      "constancensq": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Represents a Person\u0027s gender in PIVOT."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)} (String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    M, F;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender can only be either M or F\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a Gender Enum with given gender String."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param gender"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Gender createGender(String gender) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Gender.valueOf(gender.trim().toUpperCase());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns true if a given string is a valid gender."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedTest \u003d test.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (Gender gender : Gender.values()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            if (gender.name().equals(trimmedTest.toUpperCase())) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 11,
      "constancensq": 26
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.Alphanumeric;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a Person\u0027s name in the PIVOT."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Name extends Alphanumeric {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final boolean CAN_BE_BLANK \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(name, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return isValidAlphanum(name, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 getAlphaNum().equals(((Name) other).getAlphaNum())); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 4,
      "-": 17,
      "Vielheim": 9,
      "constancensq": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Represents a Person\u0027s phone number in PIVOT."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        checkArgument(isValidPhone(trimmedPhone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        value \u003d trimmedPhone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedTest \u003d test.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return trimmedTest.isBlank() || trimmedTest.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "Vielheim": 5,
      "constancensq": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Suspect.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Represents a Suspect in the investigation case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Suspect extends CasePerson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code Suspect}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Suspect(Name name, Gender gender, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        super(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if both suspects have the same identity and data fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * This defines a stronger notion of equality between two suspects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof Suspect)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect otherSuspect \u003d (Suspect) other;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return otherSuspect.getName().equals(getName())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherSuspect.getGender().equals(getGender())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherSuspect.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherSuspect.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherSuspect.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 30,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Victim.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Represents a Victim in the investigation case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Victim extends CasePerson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Constructs a {@code Victim}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Victim(Name name, Gender gender, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        super(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if both suspects have the same identity and data fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * This defines a stronger notion of equality between two suspects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof Victim)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim otherVictim \u003d (Victim) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return otherVictim.getName().equals(getName())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherVictim.getGender().equals(getGender())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherVictim.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherVictim.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherVictim.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 18,
      "constancensq": 21
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/caseperson/Witness.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Represents a Witness in the investigation case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Witness extends CasePerson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code Witness}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Witness(Name name, Gender gender, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        super(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if both suspects have the same identity and data fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * This defines a stronger notion of equality between two suspects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (!(other instanceof Witness)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Witness otherWitness \u003d (Witness) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return otherWitness.getName().equals(getName())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherWitness.getGender().equals(getGender())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherWitness.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherWitness.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 otherWitness.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 24,
      "Vielheim": 8,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/exceptions/CaseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Signals that the operation is unable to find the specified case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/exceptions/DuplicateCaseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Signals that the operation will result in duplicate Cases (Cases are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class DuplicateCaseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public DuplicateCaseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        super(\"Operation would result in duplicate cases\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a Tag in PIVOT."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Contains utility methods for populating {@code PIVOT} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final List\u003cSuspect\u003e sampleSuspects \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            List.of(new Suspect(new Name(\"Tom\"), Gender.M, new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    new Email(\"abc@gmail.com\"), new Address(\"Blk 123 Beach Road\"))));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final List\u003cWitness\u003e sampleWitnesses \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            List.of(new Witness(new Name(\"John\"), Gender.M, new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                            new Email(\"abc@gmail.com\"), new Address(\"Blk 123 Beach Road\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    new Witness(new Name(\"Janice\"), Gender.F, new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                            new Email(\"abc@gmail.com\"), new Address(\"Blk 123 Beach Road\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final List\u003cVictim\u003e sampleVictims \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            List.of(new Victim(new Name(\"Mary\"), Gender.F, new Phone(\"91234567\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                            new Email(\"abc@gmail.com\"), new Address(\"Blk 123 Beach Road\"))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final List\u003cDocument\u003e sampleDocuments \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            List.of(new Document(new Name(\"name\"), new Reference(\"test1.txt\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Description sampleDescription \u003d new Description(\"7 people arrested for rioting\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Case[] getSampleCases() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Case[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Ang Mo Kio Car Theft\"), sampleDescription,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleWitnesses, getTagSet(), ArchiveStatus.DEFAULT),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Bishan Shopping Theft\"), sampleDescription,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    Status.createStatus(\"closed\"), sampleDocuments,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet(), ArchiveStatus.DEFAULT),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Cha Bee Hoon Stall Fire\"), sampleDescription,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.createStatus(\"cold\"), sampleDocuments,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet(), ArchiveStatus.DEFAULT),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Dhoby Ghaut Murder Case\"), sampleDescription,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet(), ArchiveStatus.DEFAULT),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"IceCream Man Harassment\"), sampleDescription,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet(), ArchiveStatus.DEFAULT),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Roti Prata Shop Robbery\"), sampleDescription,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet(), ArchiveStatus.DEFAULT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static ReadOnlyPivot getSamplePivot() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot sampleAb \u003d new Pivot();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (Case sampleCase : getSampleCases()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            sampleAb.addCase(sampleCase);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 17,
      "CodyChew": 9,
      "Jargonx": 1,
      "-": 25,
      "Vielheim": 5,
      "constancensq": 31
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedCase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Jackson-friendly version of {@link Case}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "class JsonAdaptedCase {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Case\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedCase.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String archiveStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final List\u003cJsonAdaptedDocument\u003e documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final List\u003cJsonAdaptedSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final List\u003cJsonAdaptedVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final List\u003cJsonAdaptedWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Constructs a {@code JsonAdaptedCase} with the given case details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonAdaptedCase(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            @JsonProperty(\"documents\") List\u003cJsonAdaptedDocument\u003e documents,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            @JsonProperty(\"suspects\") List\u003cJsonAdaptedSuspect\u003e suspects,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            @JsonProperty(\"victims\") List\u003cJsonAdaptedVictim\u003e victims,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            @JsonProperty(\"witnesses\") List\u003cJsonAdaptedWitness\u003e witnesses,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            @JsonProperty(\"archiveStatus\") String archiveStatus) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (documents !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.documents.addAll(documents);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (witnesses !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            this.witnesses.addAll(witnesses);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (suspects !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.suspects.addAll(suspects);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (victims !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.victims.addAll(victims);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts a given {@code Case} into this class for Jackson use."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonAdaptedCase(Case source) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        title \u003d source.getTitle().getAlphaNum();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        description \u003d source.getDescription().getAlphaNum();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status \u003d source.getStatus().name();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        archiveStatus \u003d source.getArchiveStatus().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        documents.addAll(source.getDocuments().stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                .map(JsonAdaptedDocument::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspects.addAll(source.getSuspects().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .map(JsonAdaptedSuspect::new)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        victims.addAll(source.getVictims().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .map(JsonAdaptedVictim::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        witnesses.addAll(source.getWitnesses().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .map(JsonAdaptedWitness::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts this Jackson-friendly adapted case object into the model\u0027s {@code Case} object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted case."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Case toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Case\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final List\u003cTag\u003e caseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            caseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Title is null. Check data\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Title is invalid. Check data\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Description is null. Check data\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Description is invalid. Check data\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Status is null. Check data\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Status is invalid. Check data\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final Status modelStatus \u003d Status.createStatus(status);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final List\u003cSuspect\u003e modelSuspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        for (JsonAdaptedSuspect suspect : suspects) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            modelSuspects.add(suspect.toModelType());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final List\u003cVictim\u003e modelVictims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (JsonAdaptedVictim victim : victims) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            modelVictims.add(victim.toModelType());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final List\u003cWitness\u003e modelWitnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        for (JsonAdaptedWitness witness : witnesses) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            modelWitnesses.add(witness.toModelType());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final List\u003cDocument\u003e modelDocument \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        for (JsonAdaptedDocument document : documents) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            modelDocument.add(document.toModelType());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(caseTags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (archiveStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"archiveStatus is null. Check data\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    ArchiveStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final ArchiveStatus modelArchiveStatus \u003d ArchiveStatus.valueOf(archiveStatus);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Case(modelTitle, modelDescription, modelStatus, modelDocument,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                modelSuspects, modelVictims, modelWitnesses, modelTags, modelArchiveStatus);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 31,
      "CodyChew": 23,
      "Jargonx": 14,
      "-": 44,
      "Vielheim": 41,
      "constancensq": 27
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedDocument.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Jackson-friendly version of {@link Document}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "class JsonAdaptedDocument {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Document\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedDocument.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String reference;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a {@code JsonAdaptedDocument} with the given {@code documentStorageName }."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public JsonAdaptedDocument(@JsonProperty(\"name\") String name, @JsonProperty(\"reference\") String reference) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.reference \u003d reference;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Converts a given {@code Document} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public JsonAdaptedDocument(Document source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        reference \u003d source.getReference().getFileName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Converts this Jackson-friendly adapted Document object into the model\u0027s {@code Document} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Document."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Document toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Document\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document name is null. Check data\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"document name\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (reference \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document reference is null. Check data\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"document reference\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document name is invalid. Check data\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Reference.isValidReference(reference)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document reference is invalid. Check data\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new Document(new Name(name), new Reference(reference));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "CodyChew": 50,
      "Vielheim": 14,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedSuspect.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Jackson-friendly version of {@link Suspect}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class JsonAdaptedSuspect {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Suspect\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedSuspect.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code JsonAdaptedSuspect} with the given suspect details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public JsonAdaptedSuspect(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                              @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                              @JsonProperty(\"address\") String address) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Converts a given {@code Suspect} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public JsonAdaptedSuspect(Suspect source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d source.getGender().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Converts this Jackson-friendly adapted suspect object into the model\u0027s {@code Suspect} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted suspect."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Suspect toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Suspect\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Suspect name is null. Check data\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Suspect name is invalid. Check data\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Suspect gender is null. Check data\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Suspect gender is invalid. Check data\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Gender modelGender \u003d Gender.createGender(gender);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Suspect phone is null. Check data\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Suspect phone is invalid. Check data\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Suspect email is null. Check data\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Suspect email is invalid. Check data\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Suspect address is null. Check data\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Suspect(modelName, modelGender, modelPhone, modelEmail, modelAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 51,
      "constancensq": 59
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedVictim.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Jackson-friendly version of {@link Victim}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class JsonAdaptedVictim {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Victim\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedVictim.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Constructs a {@code JsonAdaptedVictim} with the given {@code name}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public JsonAdaptedVictim(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                             @JsonProperty(\"address\") String address) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Converts a given {@code Victim} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public JsonAdaptedVictim(Victim source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d source.getGender().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Converts this Jackson-friendly adapted victim object into the model\u0027s {@code Victim} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted victim."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Victim toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Victim\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Victim name is null. Check data\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Victim name is invalid. Check data\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Victim gender is null. Check data\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Victim gender is invalid. Check data\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Gender modelGender \u003d Gender.createGender(gender);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Victim phone is null. Check data\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Victim phone is invalid. Check data\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Victim email is null. Check data\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Victim email is invalid. Check data\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Victim address is null. Check data\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Victim(modelName, modelGender, modelPhone, modelEmail, modelAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 8,
      "constancensq": 102
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedWitness.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Jackson-friendly version of {@link Witness}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class JsonAdaptedWitness {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Witness\u0027 %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedWitness.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Constructs a {@code JsonAdaptedWitness} with the given {@code witnessName}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public JsonAdaptedWitness(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                              @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                              @JsonProperty(\"address\") String address) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Converts a given {@code Witness} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public JsonAdaptedWitness(Witness source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d source.getGender().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d source.getAddress().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Witness} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted witness."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public Witness toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Witness\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Witness name is null. Check data\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Witness name is invalid. Check data\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Witness gender is null. Check data\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Witness gender is invalid. Check data\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Gender modelGender \u003d Gender.createGender(gender);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Witness phone is null. Check data\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Witness phone is invalid. Check data\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Witness email is null. Check data\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Witness email is invalid. Check data\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Witness address is null. Check data\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Witness(modelName, modelGender, modelPhone, modelEmail, modelAddress);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Jargonx": 37,
      "Vielheim": 9,
      "constancensq": 66
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonPivotStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A class to access PIVOT data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonPivotStorage implements PivotStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPivotStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonPivotStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return readPivot(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Similar to {@link #readPivot()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Optional\u003cJsonSerializablePivot\u003e jsonPivot \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                filePath, JsonSerializablePivot.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!jsonPivot.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.of(jsonPivot.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        savePivot(pivot, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Similar to {@link #savePivot(ReadOnlyPivot)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(pivot);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePivot(pivot), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 80
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonSerializablePivot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * An Immutable PIVOT that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "@JsonRootName(value \u003d \"pivot\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "class JsonSerializablePivot {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerializablePivot.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final List\u003cJsonAdaptedCase\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Constructs a {@code JsonSerializablePivot} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonSerializablePivot(@JsonProperty(\"persons\") List\u003cJsonAdaptedCase\u003e persons) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts a given {@code ReadOnlyPivot} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePivot}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonSerializablePivot(ReadOnlyPivot source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        persons.addAll(source.getCaseList().stream().map(JsonAdaptedCase::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts this Pivot into the model\u0027s {@code Pivot} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to PIVOT models\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot pivot \u003d new Pivot();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (JsonAdaptedCase jsonAdaptedCase : persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            Case investigationCase \u003d jsonAdaptedCase.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (pivot.hasCase(investigationCase)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            pivot.addCase(investigationCase);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 60,
      "Vielheim": 4
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/PivotStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a storage for {@link Pivot}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public interface PivotStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns PIVOT data as a {@link ReadOnlyPivot}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see #getPivotFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cReadOnlyPivot\u003e readPivot(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Saves the given {@link ReadOnlyPivot} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param pivot cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void savePivot(ReadOnlyPivot pivot) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see #savePivot(ReadOnlyPivot)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 46
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/ReferenceStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReferenceStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Path DEFAULT_DIRECTORY \u003d Paths.get(\"./references/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Path TEST_FILE_PATH \u003d Paths.get(\"./references/test1.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public ReferenceStorage() throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        FileUtil.createDirectories(DEFAULT_DIRECTORY);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected void addTestFile() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        FileUtil.createIfMissing(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 23
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public interface Storage extends PivotStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void savePivot(ReadOnlyPivot pivot) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    void addReferenceTestFile() throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 32,
      "CodyChew": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Manages storage of PIVOT data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private PivotStorage pivotStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private ReferenceStorage referenceStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PivotStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public StorageManager(PivotStorage pivotStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                          ReferenceStorage referenceStorage) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivotStorage \u003d pivotStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.referenceStorage \u003d referenceStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PIVOT methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotStorage.getPivotFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return readPivot(pivotStorage.getPivotFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotStorage.readPivot(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        savePivot(pivot, pivotStorage.getPivotFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivotStorage.savePivot(pivot, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ReferenceStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void addReferenceTestFile() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        referenceStorage.addTestFile();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 78,
      "CodyChew": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a storage for {@link seedu.pivot.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Saves the given {@link seedu.pivot.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/CasePersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.CasePerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class CasePersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"CasePersonListCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public final CasePerson casePerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code DocumentCard} with the given {@code Case} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CasePersonCard(CasePerson casePerson, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.casePerson \u003d casePerson;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        name.setText(casePerson.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        gender.setText(\"(\" + casePerson.getGender().toString() + \")\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String checkPhone \u003d casePerson.getPhone().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!checkPhone.isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            phone.setText(\"Phone: \" + casePerson.getPhone().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            phone.setManaged(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String checkEmail \u003d casePerson.getEmail().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!checkEmail.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            email.setText(\"Email: \" + casePerson.getEmail().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            email.setManaged(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String checkAddress \u003d casePerson.getAddress().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!checkAddress.isBlank()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            address.setText(\"Address: \" + casePerson.getAddress().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            address.setManaged(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof CasePersonCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        CasePersonCard card \u003d (CasePersonCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 casePerson.equals(card.casePerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Vielheim": 56,
      "constancensq": 32
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/CasePersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.CasePerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class CasePersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"CasePersonListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CasePersonListPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private ListView\u003cCasePerson\u003e casePersonListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code CasePersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CasePersonListPanel(ObservableList\u003cCasePerson\u003e casePersonList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        casePersonListView.setItems(casePersonList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        casePersonListView.setCellFactory(listView -\u003e new CasePersonViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CasePerson} using a {@code CasePersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    class CasePersonViewCell extends ListCell\u003cCasePerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        protected void updateItem(CasePerson casePerson, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            super.updateItem(casePerson, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            if (empty || casePerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(new CasePersonCard(casePerson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 42,
      "constancensq": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * @see seedu.pivot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/DocumentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DocumentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"DocumentListCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public final Document document;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label filename;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label reference;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code DocumentCard} with the given {@code Case} and index to display."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public DocumentCard(Document document, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.document \u003d document;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        filename.setText(document.getName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        reference.setText(document.getReference().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof DocumentCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DocumentCard card \u003d (DocumentCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 document.equals(card.document);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 59
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/DocumentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DocumentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"DocumentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DocumentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private ListView\u003cDocument\u003e documentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code DocumentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public DocumentListPanel(ObservableList\u003cDocument\u003e documentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListView.setItems(documentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListView.setCellFactory(listView -\u003e new DocumentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Document} using a {@code DocumentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    class DocumentListViewCell extends ListCell\u003cDocument\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        protected void updateItem(Document document, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            super.updateItem(document, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            if (empty || document \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(new DocumentCard(document, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 46
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-f09-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 99,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.Logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.CasePerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private DocumentListPanel documentListPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private CasePersonListPanel suspectListPanel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private CasePersonListPanel witnessListPanel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private CasePersonListPanel victimListPanel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private SimpleObjectProperty\u003cIndex\u003e indexSimpleObjectProperty;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private SimpleObjectProperty\u003cString\u003e tabSimpleObjectProperty;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private SimpleObjectProperty\u003cArchiveStatus\u003e archiveStatusSimpleObjectProperty;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Case Summary"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseTitle;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseDescription;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseStatus;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Case Document"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane documentListPanelPlaceholder;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Case Persons"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane suspectListPanelPlaceholder;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane witnessListPanelPlaceholder;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane victimListPanelPlaceholder;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private TabPane caseTabPane;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Tab documentTab;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Tab suspectTab;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Tab witnessTab;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Tab victimTab;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label sectionLabel;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // For Section Label"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String firstInit \u003d \"Welcome to PIVOT. \";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String preamble \u003d \"You are now at the \";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String homepage \u003d \"Homepage\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String archive \u003d \"Archive\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        indexSimpleObjectProperty \u003d UiStateManager.getCaseState();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.getCaseState().addListener(new ChangeListener\u003cObject\u003e() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            public void changed(ObservableValue\u003c?\u003e observable, Object oldValue, Object newValue) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                updateCaseInformationPanel((Index) newValue);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        tabSimpleObjectProperty \u003d UiStateManager.getTabState();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.getTabState().addListener(new ChangeListener\u003cObject\u003e() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            public void changed(ObservableValue\u003c?\u003e observable, Object oldValue, Object newValue) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setTabSelected((String) newValue);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        archiveStatusSimpleObjectProperty \u003d UiStateManager.getCurrentSection();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.getCurrentSection().addListener(new ChangeListener\u003cObject\u003e() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            public void changed(ObservableValue\u003c?\u003e observable, Object oldValue, Object newValue) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                String section \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    section \u003d newValue.equals(ArchiveStatus.DEFAULT) ? homepage : archive;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                sectionLabel.setText(preamble + section);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseTabPane.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseTabPane.setTabMinWidth(caseTabPane.getWidth() / 4 - 25);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseTabPane.setTabMaxWidth(caseTabPane.getWidth() / 4 - 25);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Setup Placeholders\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredCaseList());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPivotFilePath());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        sectionLabel.setText(firstInit + preamble + homepage);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        updateCaseInformationPanel(indexSimpleObjectProperty.get());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Updates the CaseInformationPanel using a Case by the given Index."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private void updateCaseInformationPanel(Index index) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Updating Case Information Panel\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        setMainWindowPanel(index);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private void setMainWindowPanel(Index index) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Updating Case Information Panel with index:\" + index);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case investigationCase \u003d null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseTabPane.setVisible(index !\u003d null);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.info(\"Updating Case Information Panel with Case\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            investigationCase \u003d logic.getFilteredCaseList().get(indexSimpleObjectProperty.get().getZeroBased());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseTitle.setText(investigationCase \u003d\u003d null ? EMPTY : investigationCase.getTitle().toString());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseDescription.setText(investigationCase \u003d\u003d null ? EMPTY : investigationCase.getDescription().toString());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseStatus.setText(investigationCase \u003d\u003d null ? EMPTY : investigationCase.getStatus().toString());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListPanel \u003d new DocumentListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getDocuments()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListPanelPlaceholder.getChildren().add(documentListPanel.getRoot());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspectListPanel \u003d new CasePersonListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getSuspects().stream()"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .map(x -\u003e (CasePerson) x).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspectListPanelPlaceholder.getChildren().add(suspectListPanel.getRoot());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        witnessListPanel \u003d new CasePersonListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getWitnesses().stream()"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .map(x -\u003e (CasePerson) x).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        witnessListPanelPlaceholder.getChildren().add(witnessListPanel.getRoot());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        victimListPanel \u003d new CasePersonListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getVictims().stream()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .map(x -\u003e (CasePerson) x).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        victimListPanelPlaceholder.getChildren().add(victimListPanel.getRoot());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private void setTabSelected(String tabType) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        switch (tabType) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseTabPane.getSelectionModel().select(documentTab);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseTabPane.getSelectionModel().select(suspectTab);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseTabPane.getSelectionModel().select(victimTab);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseTabPane.getSelectionModel().select(witnessTab);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseTabPane.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Handling Help\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Handling Exit\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see seedu.pivot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 12,
      "-": 186,
      "Vielheim": 173,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public final Case investigationCase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PersonCard(Case investigationCase, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.investigationCase \u003d investigationCase;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        name.setText(investigationCase.getTitle().getAlphaNum());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status.setText(investigationCase.getStatus().name());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        investigationCase.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 investigationCase.equals(card.investigationCase);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "-": 61,
      "Vielheim": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private ListView\u003cCase\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PersonListPanel(ObservableList\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        personListView.setItems(caseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cCase\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        protected void updateItem(Case investigationCase, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            super.updateItem(investigationCase, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (empty || investigationCase \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                setGraphic(new PersonCard(investigationCase, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/pivot.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/UiStateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Tracks the state of the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class UiStateManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static SimpleObjectProperty\u003cIndex\u003e caseState \u003d new SimpleObjectProperty\u003c\u003e(null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static SimpleObjectProperty\u003cArchiveStatus\u003e currentSection \u003d new SimpleObjectProperty\u003c\u003e(null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static SimpleObjectProperty\u003cString\u003e tabState \u003d new SimpleObjectProperty\u003c\u003e(null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiStateManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static SimpleObjectProperty\u003cIndex\u003e getCaseState() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return caseState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void setCasePanelState(Index index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Setting UI State: \" + index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseState.set(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Resets the UI State to null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void resetCasePanelState() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Resetting UI State\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseState.set(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static SimpleObjectProperty\u003cString\u003e getTabState() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return tabState;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the UI Tab State to given Tab Type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param tabType"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void setTabState(String tabType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Setting UI Tab State: \" + tabType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        tabState.set(tabType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Resets the UI Tab State to null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void resetTabState() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Resetting UI Tab State\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        tabState.set(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Signals the GUI to refresh window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void refresh() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Refreshing UI State\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d caseState.get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        resetCasePanelState();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        setCasePanelState(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String tabType \u003d tabState.get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        resetTabState();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        setTabState(tabType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static void setStatusBarArchived() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"UIStateManager: Setting UI section: \" + currentSection);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        currentSection.set(ArchiveStatus.ARCHIVED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static void setStatusBarDefault() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"UIStateManager: Setting UI section: \" + currentSection);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        currentSection.set(ArchiveStatus.DEFAULT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static SimpleObjectProperty\u003cArchiveStatus\u003e getCurrentSection() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return currentSection;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 71,
      "constancensq": 13
    }
  },
  {
    "path": "src/main/resources/view/CasePersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    \u003cLabel fx:id\u003d\"gender\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u003cLabel fx:id\u003d\"email\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u003cLabel fx:id\u003d\"address\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 30,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/resources/view/CasePersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cListView fx:id\u003d\"casePersonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ".label-title {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab:top {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-border-color: #4d4d4d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected:top {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-border-color: white #4d4d4d #4d4d4d #4d4d4d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-border-width: 3 1 1 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected \u003e .tab-container \u003e .tab-label {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ".tab-pane \u003e .tab-header-area \u003e .headers-region \u003e .tab \u003e .tab-container \u003e .tab-label {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ".tab-pane \u003e .tab-header-area \u003e .tab-header-background {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 348,
      "Vielheim": 29
    }
  },
  {
    "path": "src/main/resources/view/DocumentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cLabel fx:id\u003d\"filename\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cLabel fx:id\u003d\"reference\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 32
    }
  },
  {
    "path": "src/main/resources/view/DocumentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cListView fx:id\u003d\"documentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"600\" onCloseRequest\u003d\"#handleExit\" title\u003d\"PIVOT\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        \u003cImage url\u003d\"@/images/pivot.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cAnchorPane styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cLabel fx:id\u003d\"sectionLabel\" alignment\u003d\"CENTER\" minHeight\u003d\"30\" styleClass\u003d\"label-bright\" text\u003d\"Section\" wrapText\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cInsets bottom\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cSplitPane fx:id\u003d\"caseDisplayPlaceholder\" dividerPositions\u003d\"0.5\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cVBox fx:id\u003d\"caseList\" minWidth\u003d\"250\" prefWidth\u003d\"250\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cVBox fx:id\u003d\"caseInformation\" minWidth\u003d\"300\" prefWidth\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cLabel fx:id\u003d\"caseTitle\" styleClass\u003d\"label-title\" text\u003d\"Default Title\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cLabel fx:id\u003d\"caseDescription\" styleClass\u003d\"label-bright\" text\u003d\"Default Description\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cInsets bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cLabel fx:id\u003d\"caseStatus\" styleClass\u003d\"label-bright\" text\u003d\"Default Status\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cInsets bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cTabPane fx:id\u003d\"caseTabPane\" styleClass\u003d\"tab-pane\" tabClosingPolicy\u003d\"UNAVAILABLE\" tabDragPolicy\u003d\"FIXED\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cTab fx:id\u003d\"documentTab\" text\u003d\"Documents\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cAnchorPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"documentListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                            \u003cInsets bottom\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cTab fx:id\u003d\"suspectTab\" text\u003d\"Suspects\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"suspectListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                            \u003cInsets bottom\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cTab fx:id\u003d\"victimTab\" text\u003d\"Victims\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"victimListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                            \u003cInsets bottom\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cTab fx:id\u003d\"witnessTab\" text\u003d\"Witnesses\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"witnessListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                            \u003cInsets bottom\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 42,
      "Vielheim": 93
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/data/JsonPivotStorageTest/invalidAndValidPersonPivot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"title\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": []"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"title\": \"Person With Invalid Description Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"description\": \"@!\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": []"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 1,
      "-": 5,
      "Vielheim": 3,
      "constancensq": 2
    }
  },
  {
    "path": "src/test/data/JsonPivotStorageTest/invalidPersonPivot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"title\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": []"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 1,
      "-": 4,
      "Vielheim": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializablePivotTest/duplicatePersonPivot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"title\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\": [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"name\" : \"name\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"reference\" : \"test1.txt\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\": [],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\": [ \"friends\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"title\": \"Alice Pauline\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\": [ {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"name\" : \"name\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"reference\" : \"test1.txt\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\": [],"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 10,
      "esmanda3w": 2,
      "Jargonx": 2,
      "-": 5,
      "Vielheim": 4,
      "constancensq": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializablePivotTest/invalidPersonPivot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"title\": \"H@ns Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"victims\": [],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\": \"DEFAULT\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Jargonx": 1,
      "-": 4,
      "Vielheim": 1,
      "constancensq": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializablePivotTest/typicalPersonsPivot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "  \"_comment\": \"PIVOT save file which contains the same Person values as in TypicalCases#getTypicalPivot()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"title\" : \"Alice Pauline Assault\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"COLD\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\": [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"name\" : \"name\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"reference\" : \"validButShouldNotExist.txt\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"witnesses\": [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"name\" : \"Janice\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"gender\" : \"F\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"phone\" : \"\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"email\" : \"\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"address\" : \"\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"suspects\": [ {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"name\" : \"Peter\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"gender\" : \"M\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"phone\" : \"912345678\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"email\" : \"peter@gmail.com\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"address\" : \"Blk 123\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [ {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"name\" : \"Tom\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"gender\" : \"M\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"phone\" : \"912345678\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"email\" : \"tom@gmail.com\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"address\" : \"Blk 123\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"title\" : \"Benson Meier Robbery\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"CLOSED\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\": [ {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"name\" : \"name\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "      \"reference\" : \"test1.txt\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"witnesses\": [ {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"name\" : \"Janice\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"gender\" : \"F\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"phone\" : \"\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"email\" : \"\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"address\" : \"\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [ {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"name\" : \"Tom\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"gender\" : \"M\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"phone\" : \"912345678\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"email\" : \"tom@gmail.com\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"address\" : \"Blk 123\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"title\" : \"Carl Kurz Fire\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\" : [ ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"title\" : \"Daniel Meier Shoplifting\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\" : [ ],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"title\" : \"Elle Meyer Shooting\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\" : [ ],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"title\" : \"Fiona Kunz Kidnapping\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\" : [ ],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"title\" : \"George Best Vandalism\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    \"documents\" : [ ],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"DEFAULT\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"title\" : \"Junk Yard Murder\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"documents\" : [ ],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"witnesses\": [],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"suspects\": [],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"victims\" : [],"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    \"archiveStatus\" : \"ARCHIVED\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  },"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"title\" : \"Klook Scam\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"description\": \"\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"documents\" : [ ],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"witnesses\": [],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"suspects\": [],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"victims\" : [],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"tagged\" : [ ],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"archiveStatus\" : \"ARCHIVED\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    },"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"title\" : \"Louis Homicide\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"description\": \"\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"status\": \"ACTIVE\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"documents\" : [ ],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"witnesses\": [],"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"suspects\": [],"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"victims\" : [],"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"tagged\" : [ ],"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      \"archiveStatus\" : \"ARCHIVED\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "CodyChew": 13,
      "Jargonx": 5,
      "-": 9,
      "Vielheim": 21,
      "constancensq": 88
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  \"pivotFilePath\" : \"pivot.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  \"pivotFilePath\" : \"pivot.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/pivot/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String SINGLE_FILE \u003d \"test.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void openDocument() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Files.createFile(getTempFilePath(SINGLE_FILE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        boolean supported \u003d Desktop.isDesktopSupported();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (supported) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            assertDoesNotThrow(() -\u003e FileUtil.openFile(getTempFilePath(SINGLE_FILE)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            assertThrows(CommandException.class, UserMessages.MESSAGE_DESKTOP_API_NOT_AVAILABLE, ("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            ) -\u003e FileUtil.openFile(getTempFilePath(SINGLE_FILE)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "CodyChew": 34,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TITLE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.AMY_BEE_DISAPPEARANCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonPivotStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.storage.ReferenceStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.storage.testutil.ReferenceStorageStub;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage pivotStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonPivotStorage(temporaryFolder.resolve(\"pivot.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ReferenceStorage referenceStorage \u003d new ReferenceStorageStub(temporaryFolder.resolve(\"./testDirectory\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StorageManager storage \u003d new StorageManager(pivotStorage, userPrefsStorage, referenceStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        String deleteCommand \u003d \"delete case 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //TODO: check that the state is empty first."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD + \" \" + TYPE_CASE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(listCommand, ListCaseCommand.MESSAGE_LIST_CASE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final Path referenceTest \u003d temporaryFolder.resolve(\"./testDirectory\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // Setup LogicManager with JsonPivotIoExceptionThrowingStub"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage pivotStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonPivotIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPivot.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ReferenceStorage referenceStorage \u003d new ReferenceStorageStub(temporaryFolder.resolve(\"./testDirectory\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StorageManager storage \u003d new StorageManager(pivotStorage, userPrefsStorage, referenceStorage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" \" + AddCommand.TYPE_CASE + PREFIX_WITH_TITLE_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(AMY_BEE_DISAPPEARANCE).withTags().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.addCase(expectedCase);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCaseList().remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static class JsonPivotIoExceptionThrowingStub extends JsonPivotStorage {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private JsonPivotIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 30,
      "CodyChew": 12,
      "Jargonx": 1,
      "-": 117,
      "Vielheim": 13,
      "constancensq": 4
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ArchiveCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.ArchiveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ArchiveCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ArchiveCommandIntegrationTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpDefaultSection() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(Model.PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToArchive \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_CASE_SUCCESS, caseToArchive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case archivedCase \u003d new CaseBuilder(caseToArchive).withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.deleteCase(caseToArchive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.addCase(archivedCase);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(Model.PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(archiveCommand, model, MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToArchive \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_CASE_SUCCESS, caseToArchive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case archivedCase \u003d new CaseBuilder(caseToArchive).withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.deleteCase(caseToArchive);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.addCase(archivedCase);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(Model.PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPivot().getCaseList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(archiveCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "constancensq": 97
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ArchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.ArchiveCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpDefaultSection() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ArchiveCommand(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index alternateCaseIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArchiveCommand command \u003d new ArchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(command.equals(new ArchiveCommand(INDEX_FIRST_PERSON)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(command.equals(new ArchiveCommand(alternateCaseIndex)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_validIndex_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStubWithCaseList modelStub \u003d new ModelStubWithCaseList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case validCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        modelStub.addCase(validCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        CommandResult commandResult \u003d new ArchiveCommand(INDEX_FIRST_PERSON).execute(modelStub);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case archivedCase \u003d new CaseBuilder().withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(String.format(ArchiveCommand.MESSAGE_ARCHIVE_CASE_SUCCESS, validCase),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(Arrays.asList(archivedCase), modelStub.caseList); // case list updated with archived version"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStubWithCaseList modelStub \u003d new ModelStubWithCaseList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_CASE_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                archiveCommand.execute(modelStub));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        private ModelStubWithCaseList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            this.caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            caseList.add(investigationCase);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void deleteCase(Case investigationCase) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            caseList.remove(investigationCase);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            caseList.stream().filter(predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "constancensq": 133
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_emptyPivot_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_nonEmptyPivot_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.setPivot(new Pivot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11,
      "-": 18,
      "Vielheim": 3
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/EditCaseDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.EDIT_CASE_DESCRIPTOR_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.EDIT_CASE_DESCRIPTOR_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditCaseDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        EditCaseDescriptor descriptorWithSameValues \u003d new EditCommand.EditCaseDescriptor(EDIT_CASE_DESCRIPTOR_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(EDIT_CASE_DESCRIPTOR_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(EDIT_CASE_DESCRIPTOR_AMY.equals(EDIT_CASE_DESCRIPTOR_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(EDIT_CASE_DESCRIPTOR_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(EDIT_CASE_DESCRIPTOR_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(EDIT_CASE_DESCRIPTOR_AMY.equals(EDIT_CASE_DESCRIPTOR_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        EditCaseDescriptor editedAmy \u003d new EditCaseDescriptorBuilder(EDIT_CASE_DESCRIPTOR_AMY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(EDIT_CASE_DESCRIPTOR_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAmy \u003d new EditCaseDescriptorBuilder(EDIT_CASE_DESCRIPTOR_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(EDIT_CASE_DESCRIPTOR_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 25,
      "Vielheim": 15
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.EDIT_CASE_DESCRIPTOR_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.EDIT_CASE_DESCRIPTOR_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.testutil.CasePersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "///**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "// for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "// */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case editedCase \u003d new CaseBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .withDocument(\"name\", \"test1.txt\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .withWitnesses(new CasePersonBuilder().withName(\"Janice\").withGender(\"F\").buildWitness())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand.EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder(editedCase).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        expectedModel.setCase(model.getFilteredCaseList().get(0), editedCase);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case lastCase \u003d model.getFilteredCaseList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        CaseBuilder personInList \u003d new CaseBuilder(lastCase);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case editedCase \u003d personInList.withTitle(VALID_TITLE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        expectedModel.setCase(lastCase, editedCase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditCaseDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case editedCase \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case caseInFilteredList \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case editedCase \u003d new CaseBuilder(caseInFilteredList).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        expectedModel.setCase(model.getFilteredCaseList().get(0), editedCase);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case firstCase \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder(firstCase).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Case caseInList \u003d model.getPivot().getCaseList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                new EditCaseDescriptorBuilder(caseInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandFailure(editCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPivot().getCaseList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertCommandFailure(editCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, EDIT_CASE_DESCRIPTOR_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand.EditCaseDescriptor copyDescriptor \u003d new EditCaseDescriptor(EDIT_CASE_DESCRIPTOR_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, EDIT_CASE_DESCRIPTOR_AMY)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, EDIT_CASE_DESCRIPTOR_BOB)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 177,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 15,
      "Vielheim": 1
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_CASES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.CARL_KURZ_FIRE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ELLE_MEYER_SHOOTING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.FIONA_KUNZ_KIDNAPPING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.JUNK_YARD_MURDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.KLOOK_SCAM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.LOUIS_HOMICIDE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.DetailsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                new DetailsContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                new DetailsContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCaseList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_multipleKeywordsArchivedSection_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setArchivedSection();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d preparePredicate(\"Junk Klook Louis Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(predicate.and(PREDICATE_SHOW_ARCHIVED_CASES));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(Arrays.asList(JUNK_YARD_MURDER, KLOOK_SCAM,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                LOUIS_HOMICIDE), model.getFilteredCaseList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_multipleKeywordsDefaultSection_multiplePersonsFound() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d preparePredicate(\"Junk Klook Louis Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(predicate.and(PREDICATE_SHOW_DEFAULT_CASES));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(Arrays.asList(CARL_KURZ_FIRE, ELLE_MEYER_SHOOTING,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                FIONA_KUNZ_KIDNAPPING), model.getFilteredCaseList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses {@code userInput} into a {@code DetailsContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private DetailsContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new DetailsContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "-": 54,
      "Vielheim": 6,
      "constancensq": 36
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 15,
      "Vielheim": 1
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ListTabCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class ListTabCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_TYPE \u003d TYPE_DOC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetTabState();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ListTabCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ListCommand command \u003d new ListTabCommand(VALID_TYPE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(result.getFeedbackToUser(), String.format(ListTabCommand.LIST_TAB_SUCCESS, VALID_TYPE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(StateManager.getTabState(), VALID_TYPE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ListCommand command \u003d new ListTabCommand(VALID_TYPE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ListCommand commandCopy \u003d new ListTabCommand(VALID_TYPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(commandCopy.equals(command));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(new ListTabCommand(TYPE_SUSPECT)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 65
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/OpenCaseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.OpenCaseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class OpenCaseCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case caseToOpen \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        OpenCaseCommand openCaseCommand \u003d new OpenCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String expectedMessage \u003d String.format(OpenCaseCommand.MESSAGE_OPEN_CASE_SUCCESS, caseToOpen);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertCommandSuccess(openCaseCommand, model, expectedMessage, model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(StateManager.atCasePage()); //check state"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        OpenCaseCommand openCaseCommand \u003d new OpenCaseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertCommandFailure(openCaseCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 55
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/OpenDocumentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.documentcommands.OpenDocumentCommand.MESSAGE_OPEN_DOCUMENT_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.OpenDocumentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class OpenDocumentCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Index validDocIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Index invalidDocIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Index firstCaseIndex \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //OpenDocumentCommand assumes program to have a state"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void setUpCasePage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.setState(firstCaseIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void execute_invalidDocumentIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check if set up is correct; at case page"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(StateManager.atCasePage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //command to execute"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        OpenDocumentCommand openDoc \u003d new OpenDocumentCommand(invalidDocIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //expected CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        CommandResult expectedResult \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                new CommandResult(String.format(MESSAGE_OPEN_DOCUMENT_SUCCESS, openDoc));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertCommandFailure(openDoc, model, UserMessages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void execute_referenceDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get first valid case from typical pivot"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case firstCase \u003d model.getFilteredCaseList().get(firstCaseIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check if set up is correct; at case page"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(StateManager.atCasePage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get first document"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document documentMissing \u003d firstCase.getDocuments().get(validDocIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //command to execute"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        OpenDocumentCommand openDoc \u003d new OpenDocumentCommand(validDocIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //expected message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                UserMessages.MESSAGE_REFERENCE_DOES_NOT_EXIST, documentMissing.getReference());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertCommandFailure(openDoc, model, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 74
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ReturnCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReturnCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void execute_return_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ReturnCommand returnCommand \u003d new ReturnCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String expectedMessage \u003d ReturnCommand.MESSAGE_RETURN_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertCommandSuccess(returnCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(StateManager.atMainPage()); //check state"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 35
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/UnarchiveCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.UnarchiveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code UnarchiveCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class UnarchiveCommandIntegrationTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpArchivedSection() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setArchivedSection();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToUnarchive \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedMessage \u003d String.format(UnarchiveCommand.MESSAGE_UNARCHIVE_CASE_SUCCESS, caseToUnarchive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case unarchivedCase \u003d new CaseBuilder(caseToUnarchive).withArchiveStatus(ArchiveStatus.DEFAULT).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.deleteCase(caseToUnarchive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.addCase(unarchivedCase);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(unarchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(unarchiveCommand, model, MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToUnarchive \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedMessage \u003d String.format(UnarchiveCommand.MESSAGE_UNARCHIVE_CASE_SUCCESS, caseToUnarchive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case unarchivedCase \u003d new CaseBuilder(caseToUnarchive).withArchiveStatus(ArchiveStatus.DEFAULT).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.deleteCase(caseToUnarchive);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.addCase(unarchivedCase);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(unarchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPivot().getCaseList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(unarchiveCommand, model, MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "constancensq": 97
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/UnarchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.UnarchiveCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class UnarchiveCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Index DEFAULT_CASE_INDEX \u003d Index.fromZeroBased(0); // first index of the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpArchivedSection() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnarchiveCommand(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index alternateCaseIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        UnarchiveCommand command \u003d new UnarchiveCommand(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(command.equals(new UnarchiveCommand(DEFAULT_CASE_INDEX)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(command.equals(new UnarchiveCommand(alternateCaseIndex)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_validIndex_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStubWithCaseList modelStub \u003d new ModelStubWithCaseList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case validCase \u003d new CaseBuilder().withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        modelStub.addCase(validCase);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        CommandResult commandResult \u003d new UnarchiveCommand(DEFAULT_CASE_INDEX).execute(modelStub);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case unarchivedCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(String.format(UnarchiveCommand.MESSAGE_UNARCHIVE_CASE_SUCCESS, validCase),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(Arrays.asList(unarchivedCase), modelStub.caseList); // case list updated with archived version"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStubWithCaseList modelStub \u003d new ModelStubWithCaseList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                MESSAGE_INVALID_CASE_DISPLAYED_INDEX, () -\u003e unarchiveCommand.execute(modelStub));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        private ModelStubWithCaseList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            this.caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            caseList.add(investigationCase);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void deleteCase(Case investigationCase) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            caseList.remove(investigationCase);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            caseList.stream().filter(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "constancensq": 132
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/casecommands/AddCaseCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCaseCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpDefaultSection() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpArchivedSection() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setArchivedSection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_newCase_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpDefaultSection();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case validCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.addCase(validCase);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandSuccess(new AddCaseCommand(validCase), model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                String.format(AddCaseCommand.MESSAGE_ADD_CASE_SUCCESS, validCase), expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_newCase_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpArchivedSection();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case validCase \u003d new CaseBuilder().withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.addCase(validCase);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(new AddCaseCommand(validCase), model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                String.format(AddCaseCommand.MESSAGE_ADD_CASE_SUCCESS, validCase), expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_duplicateCase_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpDefaultSection();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseInList \u003d model.getPivot().getCaseList().get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(new AddCaseCommand(caseInList), model, AddCaseCommand.MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchiveSection_duplicateCase_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpArchivedSection();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseInList \u003d model.getPivot().getCaseList().get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(new AddCaseCommand(caseInList), model, AddCaseCommand.MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 15,
      "-": 21,
      "Vielheim": 4,
      "constancensq": 38
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/casecommands/AddCaseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpMainPageDefaultSection() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpMainPageArchivedSection() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setArchivedSection();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void constructor_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCaseCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_caseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageDefaultSection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case validCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        CommandResult commandResult \u003d new AddCaseCommand(validCase).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddCaseCommand.MESSAGE_ADD_CASE_SUCCESS, validCase),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(Arrays.asList(validCase), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_caseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageArchivedSection();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case validCase \u003d new CaseBuilder().withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        CommandResult commandResult \u003d new AddCaseCommand(validCase).execute(modelStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(String.format(AddCaseCommand.MESSAGE_ADD_CASE_SUCCESS, validCase),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(Arrays.asList(validCase), modelStub.personsAdded);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_duplicateCase_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageDefaultSection();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case validCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addCommand \u003d new AddCaseCommand(validCase);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCase(validCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                AddCaseCommand.MESSAGE_DUPLICATE_CASE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_duplicateCase_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageArchivedSection();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case validCase \u003d new CaseBuilder().withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        AddCommand addCommand \u003d new AddCaseCommand(validCase);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCase(validCase);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                AddCaseCommand.MESSAGE_DUPLICATE_CASE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case alice \u003d new CaseBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case bob \u003d new CaseBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCaseCommand(alice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCaseCommand(bob);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCaseCommand(alice);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCase extends ModelStub {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private final Case investigationCase;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStubWithCase(Case investigationCase) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.investigationCase \u003d investigationCase;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return this.investigationCase.isSameCase(investigationCase);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final ArrayList\u003cCase\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return personsAdded.stream().anyMatch(investigationCase::isSameCase);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            personsAdded.add(investigationCase);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            personsAdded.stream().filter(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new Pivot();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 39,
      "CodyChew": 4,
      "-": 71,
      "Vielheim": 9,
      "constancensq": 46
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/casecommands/AddDescriptionCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Contains Integration tests (interactions with the Model and State) for {@Code AddDescriptionCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDescriptionCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidDescriptionUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DESCRIPTIONS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withDescription(\"New Description\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d new Description(\"New Description\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDescriptionCommand(INDEX_FIRST_PERSON, description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddDescriptionCommand.MESSAGE_ADD_DESCRIPTION_SUCCESS, description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateDescriptionUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DESCRIPTIONS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d caseToUpdate.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDescriptionCommand(INDEX_FIRST_PERSON, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddDescriptionCommand.MESSAGE_DUPLICATE_DESCRIPTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidDescriptionFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DESCRIPTIONS"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withDescription(\"New Description\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d new Description(\"New Description\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDescriptionCommand(INDEX_FIRST_PERSON, description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddDescriptionCommand.MESSAGE_ADD_DESCRIPTION_SUCCESS, description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateDescriptionFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DESCRIPTIONS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d caseToUpdate.getDescription();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDescriptionCommand(INDEX_FIRST_PERSON, description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddDescriptionCommand.MESSAGE_DUPLICATE_DESCRIPTION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 91
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/casecommands/AddDescriptionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDescriptionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d new Description(\"Test Description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDescriptionCommand(null, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDescriptionCommand(null, description));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDescriptionCommand(index, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index indexOne \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description descriptionOne \u003d new Description(\"Test Description 1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index indexTwo \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description descriptionTwo \u003d new Description(\"Test Description 2\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand testCommand \u003d new AddDescriptionCommand(indexOne, descriptionOne);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(testCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(new AddDescriptionCommand(indexOne, descriptionOne)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddDescriptionCommand(indexOne, descriptionTwo)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddDescriptionCommand(indexTwo, descriptionOne)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddDescriptionCommand(indexTwo, descriptionTwo)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validDescription_success() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Setup"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description newDesc \u003d new Description(\"New Description\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description blankDesc \u003d new Description(\"\"); // Allows blank"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Generate Case with Old Description"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withDescription(\"Old Description\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Update Case"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand descCommand \u003d new AddDescriptionCommand(index, newDesc);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddDescriptionCommand.MESSAGE_ADD_DESCRIPTION_SUCCESS, newDesc),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                descCommand.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand blankDescCommand \u003d new AddDescriptionCommand(index, blankDesc);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddDescriptionCommand.MESSAGE_ADD_DESCRIPTION_SUCCESS, blankDesc),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                blankDescCommand.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_sameDescription_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Setup"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description newDesc \u003d new Description(\"Old Description\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Generate Case with Old Description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withDescription(\"Old Description\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Update Case"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDescriptionCommand(index, newDesc);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                AddDescriptionCommand.MESSAGE_DUPLICATE_DESCRIPTION, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 134
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/casecommands/DeleteCaseCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ARCHIVED_CASES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * {@code DeleteCaseCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteCaseCommandIntegrationTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpDefaultSection() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpArchivedSection() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setArchivedSection();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpDefaultSection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToDelete \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, caseToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpArchivedSection();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToDelete \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, caseToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpDefaultSection();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(deleteCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpArchivedSection();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(deleteCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpDefaultSection();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case caseToDelete \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, caseToDelete);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpArchivedSection();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToDelete \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, caseToDelete);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(PREDICATE_SHOW_ARCHIVED_CASES);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpDefaultSection();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPivot().getCaseList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(deleteCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpArchivedSection();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPivot().getCaseList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandFailure(deleteCommand, model, UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCaseCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.updateFilteredCaseList(p -\u003e false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(model.getFilteredCaseList().isEmpty());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 101,
      "constancensq": 92
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/casecommands/DeleteCaseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Unit Testing for DeleteCaseCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteCaseCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpMainPageDefaultSection() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setDefaultSection();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void setUpMainPageArchivedSection() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setArchivedSection();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteCaseCommand(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index indexZero \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index indexOne \u003d Index.fromOneBased(1000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCaseCommand(indexZero);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCaseCommand(indexOne);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCaseCommand(indexZero);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // different case -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_caseDeletedByModel_deleteSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageDefaultSection();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        CommandResult result \u003d deleteCommand.execute(modelStub);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, testCase),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                result.getFeedbackToUser());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_caseDeletedByModel_deleteSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageArchivedSection();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withTitle(\"Alice\").withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStubWithCaseList modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        CommandResult result \u003d deleteCommand.execute(modelStub);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, testCase),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(Arrays.asList(), modelStub.caseList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeDefaultSection_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageDefaultSection();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX, () -\u003e deleteCommand.execute(modelStub));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void executeArchivedSection_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        setUpMainPageArchivedSection();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                UserMessages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX, () -\u003e deleteCommand.execute(modelStub));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void deleteCase(Case target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            caseList.remove(target);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            caseList.stream().filter(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "Jargonx": 1,
      "-": 36,
      "Vielheim": 60,
      "constancensq": 56
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/casecommands/ListCaseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCaseCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(Model.PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(new ListCaseCommand(), model, ListCaseCommand.MESSAGE_LIST_CASE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        expectedModel.updateFilteredCaseList(Model.PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(new ListCaseCommand(), model, ListCaseCommand.MESSAGE_LIST_CASE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "CodyChew": 2,
      "-": 25,
      "Vielheim": 4,
      "constancensq": 5
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/documentcommands/AddDocumentCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDocumentCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Reference DEFAULT_REFERENCE \u003d new Reference(\"test1.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Document DEFAULT_DOCUMENT \u003d new Document(DEFAULT_NAME, DEFAULT_REFERENCE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidDocumentUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DOCUMENT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withDocument(DEFAULT_NAME.getAlphaNum(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                DEFAULT_REFERENCE.getFileName()).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDocumentCommand(INDEX_FIRST_PERSON, DEFAULT_DOCUMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddDocumentCommand.MESSAGE_ADD_DOCUMENT_SUCCESS, DEFAULT_DOCUMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateDocumentUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DESCRIPTIONS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Document document \u003d caseToUpdate.getDocuments().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDocumentCommand(INDEX_FIRST_PERSON, document);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddDocumentCommand.MESSAGE_DUPLICATE_DOCUMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidDocumentFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DOCUMENT"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withDocument(DEFAULT_NAME.getAlphaNum(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                DEFAULT_REFERENCE.getFileName()).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDocumentCommand(INDEX_FIRST_PERSON, DEFAULT_DOCUMENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddDocumentCommand.MESSAGE_ADD_DOCUMENT_SUCCESS, DEFAULT_DOCUMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateDocumentFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT DESCRIPTIONS"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Document document \u003d caseToUpdate.getDocuments().get(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDocumentCommand(INDEX_FIRST_PERSON, document);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddDocumentCommand.MESSAGE_DUPLICATE_DOCUMENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 93
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/documentcommands/AddDocumentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDocumentCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Reference DEFAULT_REFERENCE \u003d new Reference(\"test1.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Document DEFAULT_DOCUMENT \u003d new Document(DEFAULT_NAME, DEFAULT_REFERENCE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDocumentCommand(null, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDocumentCommand(null, DEFAULT_DOCUMENT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDocumentCommand(DEFAULT_INDEX, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Document alternateDoc \u003d new Document(new Name(\"Random Name\"), new Reference(\"Random Ref\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand testCommand \u003d new AddDocumentCommand(DEFAULT_INDEX, DEFAULT_DOCUMENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(testCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(new AddDocumentCommand(DEFAULT_INDEX, DEFAULT_DOCUMENT)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddDocumentCommand(DEFAULT_INDEX, alternateDoc)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddDocumentCommand(alternateIndex, DEFAULT_DOCUMENT)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddDocumentCommand(alternateIndex, alternateDoc)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validDocument_success() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDocumentCommand(DEFAULT_INDEX, DEFAULT_DOCUMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddDocumentCommand.MESSAGE_ADD_DOCUMENT_SUCCESS, DEFAULT_DOCUMENT),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_sameDocument_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withDocument(DEFAULT_NAME.getAlphaNum(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                DEFAULT_REFERENCE.getFileName()).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddDocumentCommand(DEFAULT_INDEX, DEFAULT_DOCUMENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                AddDocumentCommand.MESSAGE_DUPLICATE_DOCUMENT, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 120
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/documentcommands/DeleteDocumentCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteDocumentCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_DOC_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithDoc \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Document doc \u003d caseWithDoc.getDocuments().get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteDocumentCommand(INDEX_FIRST_PERSON, DEFAULT_DOC_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteDocumentCommand.MESSAGE_DELETE_DOCUMENT_SUCCESS, doc),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidDocIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getDocuments().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteDocumentCommand(INDEX_FIRST_PERSON, invalidDocIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithDoc \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Document doc \u003d caseWithDoc.getDocuments().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteDocumentCommand(INDEX_FIRST_PERSON, DEFAULT_DOC_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteDocumentCommand.MESSAGE_DELETE_DOCUMENT_SUCCESS, doc),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidDocIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getDocuments().size() + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteDocumentCommand(INDEX_FIRST_PERSON, invalidDocIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 74
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/documentcommands/DeleteDocumentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteDocumentCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Reference DEFAULT_REFERENCE \u003d new Reference(\"test1.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Document DEFAULT_DOCUMENT \u003d new Document(DEFAULT_NAME, DEFAULT_REFERENCE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_CASE_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_DOC_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteDocumentCommand(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteDocumentCommand(null, DEFAULT_DOC_INDEX));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteDocumentCommand(DEFAULT_CASE_INDEX, null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateCaseIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateDocIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteDocumentCommand(DEFAULT_CASE_INDEX, DEFAULT_DOC_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(new DeleteDocumentCommand(DEFAULT_CASE_INDEX, DEFAULT_DOC_INDEX)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(new DeleteDocumentCommand(alternateCaseIndex, alternateDocIndex)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_documentDeletedByModel_success() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withDocument(DEFAULT_NAME.getAlphaNum(), DEFAULT_REFERENCE.getFileName()).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteDocumentCommand(DEFAULT_CASE_INDEX, DEFAULT_DOC_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteDocumentCommand.MESSAGE_DELETE_DOCUMENT_SUCCESS, DEFAULT_DOCUMENT),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteDocumentCommand(DEFAULT_CASE_INDEX, invalidIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                UserMessages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 121
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/suspectcommands/AddSuspectCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddSuspectCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Suspect DEFAULT_SUSPECT \u003d new Suspect(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidSuspectUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Suspect"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withSuspects(DEFAULT_SUSPECT).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddSuspectCommand(INDEX_FIRST_PERSON, DEFAULT_SUSPECT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddSuspectCommand.MESSAGE_ADD_SUSPECT_SUCCESS, DEFAULT_SUSPECT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateSuspectUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Suspect"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d caseToUpdate.getSuspects().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddSuspectCommand(INDEX_FIRST_PERSON, suspect);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddSuspectCommand.MESSAGE_DUPLICATE_SUSPECT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidSuspectFilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Suspect"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withSuspects(DEFAULT_SUSPECT).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddSuspectCommand(INDEX_FIRST_PERSON, DEFAULT_SUSPECT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddSuspectCommand.MESSAGE_ADD_SUSPECT_SUCCESS, DEFAULT_SUSPECT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateSuspectFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Suspect"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d caseToUpdate.getSuspects().get(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddSuspectCommand(INDEX_FIRST_PERSON, suspect);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddSuspectCommand.MESSAGE_DUPLICATE_SUSPECT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 97
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/suspectcommands/AddSuspectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddSuspectCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Suspect DEFAULT_SUSPECT \u003d new Suspect(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSuspectCommand(null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSuspectCommand(null, DEFAULT_SUSPECT));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSuspectCommand(DEFAULT_INDEX, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect alternateSuspect \u003d new Suspect(new Name(\"Alice\"), Gender.F,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Phone(\"92345678\"), new Email(\"alice@hello.com\"), new Address(\"Blk 345\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand testCommand \u003d new AddSuspectCommand(DEFAULT_INDEX, DEFAULT_SUSPECT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(testCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(new AddSuspectCommand(DEFAULT_INDEX, DEFAULT_SUSPECT)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddSuspectCommand(DEFAULT_INDEX, alternateSuspect)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddSuspectCommand(alternateIndex, DEFAULT_SUSPECT)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddSuspectCommand(alternateIndex, alternateSuspect)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validSuspect_success() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddSuspectCommand(DEFAULT_INDEX, DEFAULT_SUSPECT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddSuspectCommand.MESSAGE_ADD_SUSPECT_SUCCESS, DEFAULT_SUSPECT),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_sameSuspect_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withSuspects(DEFAULT_SUSPECT).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddSuspectCommand(DEFAULT_INDEX, DEFAULT_SUSPECT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                AddSuspectCommand.MESSAGE_DUPLICATE_SUSPECT, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 128
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/suspectcommands/DeleteSuspectCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteSuspectCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_SUS_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithSus \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d caseWithSus.getSuspects().get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteSuspectCommand(INDEX_FIRST_PERSON, DEFAULT_SUS_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteSuspectCommand.MESSAGE_DELETE_SUSPECT_SUCCESS, suspect),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidSusIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getSuspects().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteSuspectCommand(INDEX_FIRST_PERSON, invalidSusIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithSus \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d caseWithSus.getSuspects().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteSuspectCommand(INDEX_FIRST_PERSON, DEFAULT_SUS_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteSuspectCommand.MESSAGE_DELETE_SUSPECT_SUCCESS, suspect),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidSusIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getSuspects().size() + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteSuspectCommand(INDEX_FIRST_PERSON, invalidSusIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 73
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/suspectcommands/DeleteSuspectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteSuspectCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Suspect DEFAULT_SUSPECT \u003d new Suspect(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_CASE_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_SUSPECT_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteSuspectCommand(null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteSuspectCommand(null, DEFAULT_SUSPECT_INDEX));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteSuspectCommand(DEFAULT_CASE_INDEX, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateCaseIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateSusIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteSuspectCommand(DEFAULT_CASE_INDEX, DEFAULT_SUSPECT_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(new DeleteSuspectCommand(DEFAULT_CASE_INDEX, DEFAULT_SUSPECT_INDEX)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(new DeleteSuspectCommand(alternateCaseIndex, alternateSusIndex)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_suspectDeletedByModel_success() throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withSuspects(DEFAULT_SUSPECT).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteSuspectCommand(DEFAULT_CASE_INDEX, DEFAULT_SUSPECT_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteSuspectCommand.MESSAGE_DELETE_SUSPECT_SUCCESS, DEFAULT_SUSPECT),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteSuspectCommand(DEFAULT_CASE_INDEX, invalidIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                UserMessages.MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 126
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/testutil/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.DetailsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee Disappearance\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo Salon Theft\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String VALID_STATUS_AMY \u003d \"active\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String VALID_STATUS_BOB \u003d \"closed\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_CASEPERSON_NAME_AMY \u003d \"Amy\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_CASEPERSON_NAME_BOB \u003d \"Bob\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_CASEPERSON_NAME \u003d \"James\u0026\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_TITLE_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_TITLE_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_STATUS_AMY \u003d \" \" + PREFIX_STATUS + VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_STATUS_BOB \u003d \" \" + PREFIX_STATUS + VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_TAG_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_TAG_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in title"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_INVALID_TITLE_AMY \u003d \" \" + PREFIX_TITLE + \"James\u0026\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String PREFIX_WITH_INVALID_STATUS \u003d \" \" + PREFIX_STATUS + \"status\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String PREFIX_WITH_INVALID_TAG \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final EditCommand.EditCaseDescriptor EDIT_CASE_DESCRIPTOR_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final EditCommand.EditCaseDescriptor EDIT_CASE_DESCRIPTOR_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        EDIT_CASE_DESCRIPTOR_AMY \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withStatus(VALID_STATUS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        EDIT_CASE_DESCRIPTOR_BOB \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * - the PIVOT, filtered Case list and selected Case in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot expectedPivot \u003d new Pivot(actualModel.getPivot());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCaseList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedPivot, actualModel.getPivot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCaseList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the Case at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * {@code model}\u0027s PIVOT."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void showCaseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d model.getFilteredCaseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final String[] splitName \u003d investigationCase.getTitle().getAlphaNum().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(new DetailsContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(1, model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 19,
      "Jargonx": 7,
      "-": 71,
      "Vielheim": 26,
      "constancensq": 6
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Classes that require a ModelStub can extend from this class and implement their own ModelStubs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setPivotFilePath(Path pivotFilePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivot(ReadOnlyPivot newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void deleteCase(Case target) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void commitPivot(String command) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean canRedoPivot() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public String redoPivot() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean canUndoPivot() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public String undoPivot() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 26,
      "Vielheim": 86
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/victimcommands/AddVictimCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddVictimCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Victim DEFAULT_VICTIM \u003d new Victim(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidVictimUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Victim"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withVictims(DEFAULT_VICTIM).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddVictimCommand(INDEX_FIRST_PERSON, DEFAULT_VICTIM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddVictimCommand.MESSAGE_ADD_VICTIM_SUCCESS, DEFAULT_VICTIM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateVictimUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Victim"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d caseToUpdate.getVictims().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddVictimCommand(INDEX_FIRST_PERSON, victim);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddVictimCommand.MESSAGE_DUPLICATE_VICTIM);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidVictimFilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Victim"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withVictims(DEFAULT_VICTIM).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddVictimCommand(INDEX_FIRST_PERSON, DEFAULT_VICTIM);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddVictimCommand.MESSAGE_ADD_VICTIM_SUCCESS, DEFAULT_VICTIM);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateVictimFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Victim"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d caseToUpdate.getVictims().get(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddVictimCommand(INDEX_FIRST_PERSON, victim);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddVictimCommand.MESSAGE_DUPLICATE_VICTIM);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 97
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/victimcommands/AddVictimCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddVictimCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Victim DEFAULT_VICTIM \u003d new Victim(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVictimCommand(null, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVictimCommand(null, DEFAULT_VICTIM));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddVictimCommand(DEFAULT_INDEX, null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim alternateVictim \u003d new Victim(new Name(\"Alice\"), Gender.F,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Phone(\"92345678\"), new Email(\"alice@hello.com\"), new Address(\"Blk 345\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand testCommand \u003d new AddVictimCommand(DEFAULT_INDEX, DEFAULT_VICTIM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(testCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(new AddVictimCommand(DEFAULT_INDEX, DEFAULT_VICTIM)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddVictimCommand(DEFAULT_INDEX, alternateVictim)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddVictimCommand(alternateIndex, DEFAULT_VICTIM)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddVictimCommand(alternateIndex, alternateVictim)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validVictim_success() throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddVictimCommand(DEFAULT_INDEX, DEFAULT_VICTIM);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddVictimCommand.MESSAGE_ADD_VICTIM_SUCCESS, DEFAULT_VICTIM),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_sameVictim_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withVictims(DEFAULT_VICTIM).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddVictimCommand(DEFAULT_INDEX, DEFAULT_VICTIM);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                AddVictimCommand.MESSAGE_DUPLICATE_VICTIM, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 127
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/victimcommands/DeleteVictimCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteVictimCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_VICTIM_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithVictim \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d caseWithVictim.getVictims().get(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteVictimCommand(INDEX_FIRST_PERSON, DEFAULT_VICTIM_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteVictimCommand.MESSAGE_DELETE_VICTIM_SUCCESS, victim),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidVictimIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getVictims().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteVictimCommand(INDEX_FIRST_PERSON, invalidVictimIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithVictim \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d caseWithVictim.getVictims().get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteVictimCommand(INDEX_FIRST_PERSON, DEFAULT_VICTIM_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteVictimCommand.MESSAGE_DELETE_VICTIM_SUCCESS, victim),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidVictimIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getVictims().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteVictimCommand(INDEX_FIRST_PERSON, invalidVictimIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 72
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/victimcommands/DeleteVictimCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteVictimCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Victim DEFAULT_VICTIM \u003d new Victim(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_CASE_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_VICTIM_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteVictimCommand(null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteVictimCommand(null, DEFAULT_VICTIM_INDEX));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteVictimCommand(DEFAULT_CASE_INDEX, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateCaseIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateVictimIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteVictimCommand(DEFAULT_CASE_INDEX, DEFAULT_VICTIM_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(new DeleteVictimCommand(DEFAULT_CASE_INDEX, DEFAULT_VICTIM_INDEX)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(new DeleteVictimCommand(alternateCaseIndex, alternateVictimIndex)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_victimDeletedByModel_success() throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withVictims(DEFAULT_VICTIM).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteVictimCommand(DEFAULT_CASE_INDEX, DEFAULT_VICTIM_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteVictimCommand.MESSAGE_DELETE_VICTIM_SUCCESS, DEFAULT_VICTIM),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteVictimCommand(DEFAULT_CASE_INDEX, invalidIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                UserMessages.MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 126
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/witnesscommands/AddWitnessCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddWitnessCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Witness DEFAULT_WITNESS \u003d new Witness(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidWitnessUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Witness"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withWitnesses(DEFAULT_WITNESS).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddWitnessCommand(INDEX_FIRST_PERSON, DEFAULT_WITNESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddWitnessCommand.MESSAGE_ADD_WITNESS_SUCCESS, DEFAULT_WITNESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateWitnessUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Witness"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d caseToUpdate.getWitnesses().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddWitnessCommand(INDEX_FIRST_PERSON, witness);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddWitnessCommand.MESSAGE_DUPLICATE_WITNESS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndValidWitnessFilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Witness"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(caseToUpdate).withWitnesses(DEFAULT_WITNESS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddWitnessCommand(INDEX_FIRST_PERSON, DEFAULT_WITNESS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(AddWitnessCommand.MESSAGE_ADD_WITNESS_SUCCESS, DEFAULT_WITNESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager((model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedModel.setCase(caseToUpdate, expectedCase);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexAndDuplicateWitnessFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseToUpdate \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // CASE: ALICE, WITHOUT Witness"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d caseToUpdate.getWitnesses().get(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddWitnessCommand(INDEX_FIRST_PERSON, witness);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, AddWitnessCommand.MESSAGE_DUPLICATE_WITNESS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 97
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/witnesscommands/AddWitnessCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddWitnessCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Witness DEFAULT_WITNESS \u003d new Witness(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddWitnessCommand(null, null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddWitnessCommand(null, DEFAULT_WITNESS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddWitnessCommand(DEFAULT_INDEX, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness alternateWitness \u003d new Witness(new Name(\"Alice\"), Gender.F,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Phone(\"92345678\"), new Email(\"alice@hello.com\"), new Address(\"Blk 345\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand testCommand \u003d new AddWitnessCommand(DEFAULT_INDEX, DEFAULT_WITNESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(testCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(testCommand.equals(new AddWitnessCommand(DEFAULT_INDEX, DEFAULT_WITNESS)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddWitnessCommand(DEFAULT_INDEX, alternateWitness)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddWitnessCommand(alternateIndex, DEFAULT_WITNESS)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(testCommand.equals(new AddWitnessCommand(alternateIndex, alternateWitness)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validWitness_success() throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddWitnessCommand(DEFAULT_INDEX, DEFAULT_WITNESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddWitnessCommand.MESSAGE_ADD_WITNESS_SUCCESS, DEFAULT_WITNESS),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_sameWitness_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withWitnesses(DEFAULT_WITNESS).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AddCommand command \u003d new AddWitnessCommand(DEFAULT_INDEX, DEFAULT_WITNESS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                AddWitnessCommand.MESSAGE_DUPLICATE_WITNESS, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 126
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/witnesscommands/DeleteWitnessCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.showCaseAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteWitnessCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_WITNESS_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithWitness \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d caseWithWitness.getWitnesses().get(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteWitnessCommand(INDEX_FIRST_PERSON, DEFAULT_WITNESS_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteWitnessCommand.MESSAGE_DELETE_WITNESS_SUCCESS, witness),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidWitnessIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getWitnesses().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteWitnessCommand(INDEX_FIRST_PERSON, invalidWitnessIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case caseWithWitness \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d caseWithWitness.getWitnesses().get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteWitnessCommand(INDEX_FIRST_PERSON, DEFAULT_WITNESS_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteWitnessCommand.MESSAGE_DELETE_WITNESS_SUCCESS, witness),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        showCaseAtIndex(model, INDEX_FIRST_PERSON); // filter the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidWitnessIndex \u003d Index.fromOneBased(model.getFilteredCaseList().get(0).getWitnesses().size() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteWitnessCommand(INDEX_FIRST_PERSON, invalidWitnessIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandFailure(command, model, UserMessages.MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 72
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/witnesscommands/DeleteWitnessCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.UserMessages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DeleteWitnessCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.createGender(\"m\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@gmail.com\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Witness DEFAULT_WITNESS \u003d new Witness(DEFAULT_NAME, DEFAULT_GENDER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_CASE_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Index DEFAULT_WITNESS_INDEX \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteWitnessCommand(null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteWitnessCommand(null, DEFAULT_WITNESS_INDEX));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteWitnessCommand(DEFAULT_CASE_INDEX, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateCaseIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index alternateWitnessIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteWitnessCommand(DEFAULT_CASE_INDEX, DEFAULT_WITNESS_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(command.equals(new DeleteWitnessCommand(DEFAULT_CASE_INDEX, DEFAULT_WITNESS_INDEX)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(command.equals(new DeleteWitnessCommand(alternateCaseIndex, alternateWitnessIndex)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_witnessDeletedByModel_success() throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withWitnesses(DEFAULT_WITNESS).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteWitnessCommand(DEFAULT_CASE_INDEX, DEFAULT_WITNESS_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(DeleteWitnessCommand.MESSAGE_DELETE_WITNESS_SUCCESS, DEFAULT_WITNESS),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                command.execute(modelStub).getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(DEFAULT_CASE_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseList.add(testCase);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index invalidIndex \u003d Index.fromZeroBased(1000);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCaseList(caseList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DeleteCommand command \u003d new DeleteWitnessCommand(DEFAULT_CASE_INDEX, invalidIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                UserMessages.MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * A Model stub that holds a caseList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class ModelStubWithCaseList extends ModelStub {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private final List\u003cCase\u003e caseList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private ModelStubWithCaseList(List\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList \u003d caseList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return FXCollections.observableList(caseList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.caseList.set(caseList.indexOf(target), editedCase);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void commitPivot(String command) {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 126
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddCaseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_INVALID_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_INVALID_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_INVALID_TITLE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_STATUS_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_STATUS_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TITLE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TITLE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.AMY_BEE_DISAPPEARANCE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BOB_CHOO_SALON_THEFT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private AddCaseCommandParser parser \u003d new AddCaseCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(BOB_CHOO_SALON_THEFT).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + PREFIX_WITH_TITLE_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                + PREFIX_WITH_STATUS_BOB + PREFIX_WITH_TAG_FRIEND,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, PREFIX_WITH_TITLE_AMY + PREFIX_WITH_TITLE_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                + PREFIX_WITH_STATUS_BOB + PREFIX_WITH_TAG_FRIEND,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // multiple statuses - last status accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, PREFIX_WITH_TITLE_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                + PREFIX_WITH_STATUS_AMY + PREFIX_WITH_STATUS_BOB + PREFIX_WITH_TAG_FRIEND,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCaseMultipleTags \u003d new CaseBuilder(BOB_CHOO_SALON_THEFT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, PREFIX_WITH_TITLE_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                + PREFIX_WITH_STATUS_BOB + PREFIX_WITH_TAG_HUSBAND + PREFIX_WITH_TAG_FRIEND,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCaseMultipleTags));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(AMY_BEE_DISAPPEARANCE).withTags().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, PREFIX_WITH_TITLE_AMY, new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // no status"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCase \u003d new CaseBuilder(expectedCase).withStatus(\"active\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, PREFIX_WITH_TITLE_AMY, new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, PREFIX_WITH_INVALID_TITLE_AMY + PREFIX_WITH_TAG_HUSBAND + PREFIX_WITH_TAG_FRIEND,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, PREFIX_WITH_TITLE_BOB + PREFIX_WITH_INVALID_STATUS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        + PREFIX_WITH_TAG_HUSBAND + PREFIX_WITH_TAG_FRIEND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREFIX_WITH_TITLE_BOB + PREFIX_WITH_INVALID_TAG + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // Is relevant for \"add case t:TITLE s:STATUS\" or any number of invalid fields"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // Using 2 invalid Fields Title and Status"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREFIX_WITH_INVALID_TITLE_AMY + PREFIX_WITH_INVALID_STATUS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + PREFIX_WITH_TITLE_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        + PREFIX_WITH_TAG_HUSBAND + PREFIX_WITH_TAG_FRIEND,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 31,
      "Jargonx": 6,
      "CodyChew": 1,
      "-": 37,
      "Vielheim": 37,
      "constancensq": 1
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddCommandParserMainPageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddCommandParserMainPageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_TITLE \u003d \"I am a valid Title\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String PREFIX_TITLE \u003d \" \" + CliSyntax.PREFIX_TITLE.getPrefix();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String TYPE_CASE \u003d \"case\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index caseIndex \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_validArgs_returnsAddCaseCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Title title \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Description description \u003d new Description(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Status status \u003d Status.createStatus(\"active\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cDocument\u003e documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Case validCase \u003d new Case(title, description, status, documents,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                suspects, victims, witnesses, tagList, ArchiveStatus.DEFAULT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, TYPE_CASE + PREFIX_TITLE + VALID_TITLE, new AddCaseCommand(validCase));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 49,
      "constancensq": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_TYPE \u003d \"IAmWrongFormat\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_TYPE_MAIN_PAGE \u003d \"victim\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_TYPE_CASE_PAGE \u003d \"case\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //public static final String EMPTY_STRING \u003d  \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseMainPage_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Main Page"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Empty Arguments"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e parser.parse(EMPTY_STRING));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertParseFailure(parser, EMPTY_STRING, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //        AddCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseMainPage_invalidTypes_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Main Page"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                AddCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid main page type"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE_MAIN_PAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_MAIN_PAGE, MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseCasePage_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Case Page"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Empty Arguments"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e parser.parse(EMPTY_STRING));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertParseFailure(parser, EMPTY_STRING, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //        AddCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseCasePage_invalidArguments_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Case Page"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Type is wrong"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                AddCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Invalid type for Case page"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE_CASE_PAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_CASE_PAGE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 86
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddDescriptionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddDescriptionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddDescriptionCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String PREFIX_DESC \u003d \" \" + CliSyntax.PREFIX_DESC.getPrefix();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_DESC \u003d \"I am a valid description\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private AddDescriptionCommandParser parser \u003d new AddDescriptionCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_prefixPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, PREFIX_DESC + VALID_DESC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddDescriptionCommand(index, new Description(VALID_DESC)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_prefixAbsent_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // missing prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(VALID_DESC));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, VALID_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                AddDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jargonx": 54
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddDocumentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_REFERENCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.AddDocumentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddDocumentCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static Path testFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String PREFIX_NAME_TEST \u003d \" \" + PREFIX_NAME.getPrefix();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_NAME \u003d \"I am a valid name\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_NAME \u003d \"| am |nval|d name\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String PREFIX_REFERENCE_TEST \u003d \" \" + CliSyntax.PREFIX_REFERENCE.getPrefix();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_REFERENCE \u003d \"existingReference.txt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_REFERENCE \u003d \"invalidReference.myExt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private AddDocumentCommandParser parser \u003d new AddDocumentCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Represents a Reference with separate default paths for testing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static class ReferenceStub extends Reference {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        private static final String DEFAULT_TESTPATH \u003d \"./testDirectory/\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        public ReferenceStub(String fileName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            super(fileName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        public String getFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return DEFAULT_TESTPATH;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //override isExists to check the correct test file location"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        public boolean isExists() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return FileUtil.isFileExists(getTempFilePath(path.toString()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static class AddDocumentCommandParserStub extends AddDocumentCommandParser {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        public AddDocumentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_REFERENCE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_REFERENCE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                        AddDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            Reference reference \u003d new ReferenceStub(argMultimap.getValue(PREFIX_REFERENCE).get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            if (!reference.isExists()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                throw new ParseException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            Document doc \u003d new Document(name, reference);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return new AddDocumentCommand(index, doc);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_allFieldsArePresent_success() throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final AddDocumentCommandParserStub parserStub \u003d new AddDocumentCommandParserStub();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        FileUtil.createFile(getTempFilePath(\"./testDirectory/\" + VALID_REFERENCE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Reference existingReference \u003d new ReferenceStub(VALID_REFERENCE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Document legalDocument \u003d new Document(new Name(VALID_NAME), existingReference);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parserStub, PREFIX_NAME_TEST + VALID_NAME + PREFIX_REFERENCE_TEST + VALID_REFERENCE,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddDocumentCommand(index, legalDocument));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_prefixesMissing_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(PREFIX_REFERENCE_TEST + VALID_REFERENCE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREFIX_REFERENCE_TEST + VALID_REFERENCE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                AddDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // missing reference prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(PREFIX_NAME_TEST + VALID_NAME));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME_TEST + VALID_NAME, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                AddDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_invalidArguments_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(PREFIX_NAME_TEST + INVALID_NAME"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                + PREFIX_REFERENCE_TEST + VALID_REFERENCE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME_TEST + INVALID_NAME"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                + PREFIX_REFERENCE_TEST + VALID_REFERENCE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid reference"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(PREFIX_NAME_TEST + VALID_NAME"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                + PREFIX_REFERENCE_TEST + INVALID_REFERENCE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME_TEST + VALID_NAME"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                        + PREFIX_REFERENCE_TEST + INVALID_REFERENCE, Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 154
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddSuspectCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.INVALID_CASEPERSON_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_CASEPERSON_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_CASEPERSON_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.AddSuspectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.testutil.CasePersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddSuspectCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // Todo: move static fields to CommandTestUtil"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_CASEPERSON_NAME_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_CASEPERSON_NAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_CASEPERSON_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private AddSuspectCommandParser parser \u003d new AddSuspectCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    //TODO: add all the fields in for suspect here"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Suspect expectedSuspect \u003d new CasePersonBuilder().withName(VALID_CASEPERSON_NAME_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .buildSuspect();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddSuspectCommand(index, expectedSuspect));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddSuspectCommand(index, expectedSuspect));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddSuspectCommand(index, expectedSuspect));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSuspectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSuspectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 59,
      "Jargonx": 10,
      "Vielheim": 2,
      "constancensq": 14
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddVictimCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.INVALID_CASEPERSON_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_CASEPERSON_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_CASEPERSON_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.victimcommands.AddVictimCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.testutil.CasePersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddVictimCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    // Todo: move static fields to CommandTestUtil"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_CASEPERSON_NAME_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_CASEPERSON_NAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_CASEPERSON_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private AddVictimCommandParser parser \u003d new AddVictimCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //TODO: add all the fields in for victim here"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Victim expectedVictim \u003d new CasePersonBuilder().withName(VALID_CASEPERSON_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .buildVictim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddVictimCommand(index, expectedVictim));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddVictimCommand(index, expectedVictim));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddVictimCommand(index, expectedVictim));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVictimCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVictimCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 84
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddWitnessCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.INVALID_CASEPERSON_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_CASEPERSON_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_CASEPERSON_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.witnesscommands.AddWitnessCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.testutil.CasePersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddWitnessCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    // Todo: move static fields to CommandTestUtil"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_CASEPERSON_NAME_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_CASEPERSON_NAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_CASEPERSON_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private AddWitnessCommandParser parser \u003d new AddWitnessCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //TODO: add all the fields in for witness here"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Witness expectedWitness \u003d new CasePersonBuilder().withName(VALID_CASEPERSON_NAME_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .buildWitness();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddWitnessCommand(index, expectedWitness));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddWitnessCommand(index, expectedWitness));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                new AddWitnessCommand(index, expectedWitness));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWitnessCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, VALID_CASEPERSON_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + GENDER_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWitnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 85
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/DeleteCommandParserCasePageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.DeleteDocumentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.DeleteSuspectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.victimcommands.DeleteVictimCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.witnesscommands.DeleteWitnessCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteCommandParserCasePageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_INDEX \u003d \" \" + \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String TYPE_DOC \u003d \"doc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String TYPE_SUSPECT \u003d \"suspect\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String TYPE_WITNESS \u003d \"witness\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String TYPE_VICTIM \u003d \"victim\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static final Index caseIndex \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static final Index miscTypeIndex \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void setStateZero() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(caseIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_validArgs_returnsDeleteDocumentCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, TYPE_DOC + VALID_INDEX, new DeleteDocumentCommand(caseIndex, miscTypeIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_validArgs_returnsDeleteSuspectCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, TYPE_SUSPECT + VALID_INDEX, new DeleteSuspectCommand(caseIndex, miscTypeIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_validArgs_returnsDeleteVictimCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, TYPE_VICTIM + VALID_INDEX, new DeleteVictimCommand(caseIndex, miscTypeIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_validArgs_returnsDeleteWitnessCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, TYPE_WITNESS + VALID_INDEX, new DeleteWitnessCommand(caseIndex, miscTypeIndex));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 61
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/DeleteCommandParserMainPageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.DeleteCaseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteCommandParserMainPageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_INDEX \u003d \" \" + \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String TYPE_CASE \u003d \"case\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index caseIndex \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_validArgs_returnsDeleteCaseCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, TYPE_CASE + VALID_INDEX, new DeleteCaseCommand(caseIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 32
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "// For reference, when the code reaches to DeleteCommandParser, it should have only \"*TYPE INDEX\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_TYPE \u003d \"IamWrongFormat\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_TYPE_MAIN_PAGE \u003d \"victim\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_TYPE_CASE_PAGE \u003d \"case\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_TYPE_MAIN_PAGE \u003d \"case\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_TYPE_CASE_PAGE \u003d \"victim\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_INDEX \u003d \" \" + \"1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_INDEX \u003d \" \" + \"A\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //public static final String EMPTY_STRING \u003d  \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseMainPage_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Main Page"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Empty Arguments"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e parser.parse(EMPTY_STRING));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertParseFailure(parser, EMPTY_STRING, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //        DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //No Index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(VALID_TYPE_MAIN_PAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_MAIN_PAGE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseMainPage_invalidArguments_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Main Page"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Type is wrong"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE + VALID_INDEX));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE + VALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Invalid Index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(VALID_TYPE_MAIN_PAGE + INVALID_INDEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_MAIN_PAGE + INVALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Invalid type for Main page"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE_MAIN_PAGE + VALID_INDEX));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_MAIN_PAGE + VALID_INDEX,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseCasePage_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Case Page"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Empty Arguments"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e parser.parse(EMPTY_STRING));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertParseFailure(parser, EMPTY_STRING, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //        DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //No Index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(VALID_TYPE_MAIN_PAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_CASE_PAGE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseCasePage_invalidArguments_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Case Page"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Type is wrong"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE + VALID_INDEX));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE + VALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Invalid Index"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(VALID_TYPE_CASE_PAGE + INVALID_INDEX));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, VALID_TYPE_CASE_PAGE + INVALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Invalid type for Case page"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE_CASE_PAGE + VALID_INDEX));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE_CASE_PAGE + VALID_INDEX,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "Jargonx": 91,
      "-": 14,
      "constancensq": 4
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/DeleteDocumentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.DeleteDocumentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteDocumentCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index caseIndex \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index miscTypeIndex \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.setState(caseIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_validArgs_returnsDeleteDocCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, \"doc 1\", new DeleteDocumentCommand(caseIndex, miscTypeIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 35
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_INVALID_TITLE_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TAG_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TITLE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREFIX_WITH_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.PREIFX_WITH_INVALID_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import static seedu.pivot.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//public class EditCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, VALID_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + PREFIX_WITH_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"0\" + PREFIX_WITH_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PREFIX_WITH_INVALID_TITLE_AMY, Title.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PREIFX_WITH_INVALID_TAG, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // TODO: can have additional test case of invalid var1 followed by valid var2 here as well if needed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // valid name followed by invalid name. The test case for invalid name followed by valid name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PREFIX_WITH_TITLE_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                + PREFIX_WITH_INVALID_TITLE_AMY, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PREFIX_WITH_TAG_FRIEND"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                + PREFIX_WITH_TAG_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PREFIX_WITH_TAG_FRIEND + TAG_EMPTY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                + PREFIX_WITH_TAG_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + PREFIX_WITH_TAG_FRIEND"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                + PREFIX_WITH_TAG_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // TODO: originally test for two different invalid fields, changed to 2 INVALID_NAME_DESC"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        //  for curr implementation)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PREFIX_WITH_INVALID_TITLE_AMY + PREFIX_WITH_INVALID_TITLE_AMY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PREFIX_WITH_TAG_HUSBAND"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                + PREFIX_WITH_TITLE_AMY + PREFIX_WITH_TAG_FRIEND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    // TODO: Might need if we adding more fields, currently is same as parse_oneField test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PREFIX_WITH_TITLE_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_AMY).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PREFIX_WITH_TITLE_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PREFIX_WITH_TAG_FRIEND;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        descriptor \u003d new EditCaseDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                + PREFIX_WITH_TAG_FRIEND + PREFIX_WITH_TAG_FRIEND + PREFIX_WITH_TAG_HUSBAND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PREFIX_WITH_INVALID_TITLE_AMY + PREFIX_WITH_TITLE_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // TODO: Might need if we are adding more field, to add other valid values if there are"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PREFIX_WITH_INVALID_TITLE_AMY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                + PREFIX_WITH_TITLE_BOB;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 178
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.DetailsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parseCasePage_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"     \", MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parseCasePage_validArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"     \", MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parseMainPage_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parseMainPage_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                new FindCommand(new DetailsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 24,
      "constancensq": 28
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_ARCHIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.ListTabCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.commands.archivecommands.ListArchiveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parse_validArgs_returnsListCaseCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseSuccess(parser, \"case\", new ListCaseCommand());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void parse_validArgs_returnsListArchiveCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, \"archive\", new ListArchiveCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void parse_validArgs_returnsListTabCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, TYPE_DOC, new ListTabCommand(TYPE_DOC));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, TYPE_SUSPECT, new ListTabCommand(TYPE_SUSPECT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, TYPE_WITNESS, new ListTabCommand(TYPE_WITNESS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseSuccess(parser, TYPE_VICTIM, new ListTabCommand(TYPE_VICTIM));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void parse_invalidArgsAtMainPage_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState(); // At Main Page"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ListCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ListCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void parse_invalidArgsAtCasePage_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON); // At Case Page"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ListCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ListCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState(); // At Main Page"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void parse_casePageArgsAtMainPage_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState(); // At Main Page"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, TYPE_DOC, MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, TYPE_SUSPECT, MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, TYPE_VICTIM, MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, TYPE_WITNESS, MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void parse_mainPageArgsAtCasePage_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.setState(INDEX_FIRST_PERSON); // At Case Page"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, TYPE_CASE, MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertParseFailure(parser, TYPE_ARCHIVE, MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.resetState(); // At Main Page"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "Vielheim": 60,
      "constancensq": 20
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/OpenCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.OpenCaseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class OpenCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_TYPE \u003d \"IAmWrongFormat\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String TYPE_CASE \u003d \"case\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String VALID_INDEX \u003d \" \" + \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String INVALID_INDEX \u003d \" \" + \"A\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //public static final String EMPTY_STRING \u003d  \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, TYPE_CASE + VALID_INDEX, new OpenCaseCommand(index));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Main Page"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Empty Arguments"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e parser.parse(EMPTY_STRING));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //assertParseFailure(parser, EMPTY_STRING, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //        OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //No Index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(TYPE_CASE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertParseFailure(parser, TYPE_CASE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                OpenCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parse_invalidArguments_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //At Main Page"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Type is wrong"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(INVALID_TYPE + VALID_INDEX));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, INVALID_TYPE + VALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                OpenCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //Invalid Index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(TYPE_CASE + INVALID_INDEX));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, TYPE_CASE + INVALID_INDEX, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                OpenCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 67,
      "CodyChew": 4
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Title expectedName \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(VALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "CodyChew": 8,
      "-": 100,
      "Vielheim": 3
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/PivotParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.UserMessages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.DeleteCaseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.DetailsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final PivotParser parser \u003d new PivotParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parseCommand_addCase() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand command \u003d (AddCaseCommand) parser.parseCommand(CaseUtil.getAddCommand(investigationCase));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(new AddCaseCommand(investigationCase), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseCommand_delete_case() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + TYPE_CASE + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertEquals(new DeleteCaseCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        Case investigationCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder(investigationCase).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //                + INDEX_FIRST_PERSON.getOneBased() + \" \" + CaseUtil.getEditCaseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(new FindCommand(new DetailsContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parseCommand_list_case() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //TODO: check for state first?"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \" + TYPE_CASE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                instanceof ListCaseCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \" + TYPE_CASE + \" 3\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                instanceof ListCaseCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 24,
      "Jargonx": 3,
      "CodyChew": 8,
      "-": 60,
      "Vielheim": 2,
      "constancensq": 9
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_DEFAULT_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE_PAULINE_ASSAULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BENSON_MEIER_ROBBERY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.DetailsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.PivotBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(new Pivot(), new Pivot(modelManager.getPivot()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setPivotFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPivotFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setPivotFilePath_validPath_setsPivotFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        modelManager.setPivotFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(path, modelManager.getPivotFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void hasCase_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCase(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void hasCase_caseNotInPivot_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(modelManager.hasCase(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void hasCase_caseInPivot_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        modelManager.addCase(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(modelManager.hasCase(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void getFilteredCaseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCaseList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Pivot pivot \u003d new PivotBuilder().withCase(ALICE_PAULINE_ASSAULT).withCase(BENSON_MEIER_ROBBERY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot differentPivot \u003d new Pivot();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        modelManager \u003d new ModelManager(pivot, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(pivot, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different Pivot -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPivot, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String[] keywords \u003d ALICE_PAULINE_ASSAULT.getTitle().getAlphaNum().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        modelManager.updateFilteredCaseList(new DetailsContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pivot, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        modelManager.updateFilteredCaseList(PREDICATE_SHOW_DEFAULT_CASES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        differentUserPrefs.setPivotFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pivot, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 19,
      "-": 95,
      "Vielheim": 16,
      "constancensq": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/PivotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE_PAULINE_ASSAULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.DuplicateCaseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Pivot pivot \u003d new Pivot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(Collections.emptyList(), pivot.getCaseList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e pivot.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void resetData_withValidReadOnlyPivot_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot newData \u003d getTypicalPivot();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(newData, pivot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void resetData_withDuplicateCases_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e newCases \u003d Arrays.asList(ALICE_PAULINE_ASSAULT, editedAlice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        PivotStub newData \u003d new PivotStub(newCases);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e pivot.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void hasCase_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e pivot.hasCase(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void hasCase_caseNotInPivot_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(pivot.hasCase(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void hasCase_caseInPivot_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        pivot.addCase(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(pivot.hasCase(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void hasCase_caseWithSameIdentityFieldsInPivot_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        pivot.addCase(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(pivot.hasCase(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void getCaseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e pivot.getCaseList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * A stub ReadOnlyPivot whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    static class PivotStub implements ReadOnlyPivot {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private final ObservableList\u003cCase\u003e cases \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        PivotStub(Collection\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.cases.setAll(cases);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public ObservableList\u003cCase\u003e getCaseList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return cases;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 26,
      "-": 58,
      "Vielheim": 15
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivotFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPivotFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/VersionedPivotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.VersionedPivot.INITIAL_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.VersionedPivot.INITIAL_STATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class VersionedPivotTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final PivotTest.PivotStub emptyPivot \u003d new PivotTest.PivotStub(Collections.emptyList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private VersionedPivot versionedPivot \u003d new VersionedPivot(emptyPivot);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void setVersionedPivot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot \u003d new VersionedPivot(emptyPivot);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // initialisation of pivotStateList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cReadOnlyPivot\u003e listWithInitialPivot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        listWithInitialPivot.add(emptyPivot);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(listWithInitialPivot, versionedPivot.getPivotStateList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // initialisation of commands"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cString\u003e listWithInitialCommand \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        listWithInitialCommand.add(INITIAL_COMMAND);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(listWithInitialCommand, versionedPivot.getCommands());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // initialisation currentStatePointer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(INITIAL_STATE, versionedPivot.getCurrentStatePointer());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void commit_validPivotAndCommand_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String testCommand \u003d \"Valid Command\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.commit(getTypicalPivot(), testCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // constructing expected versioned pivot object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cReadOnlyPivot\u003e expectedPivotStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(emptyPivot);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(getTypicalPivot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cString\u003e expectedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(INITIAL_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(testCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int expectedCurrentStatePointer \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        VersionedPivot expectedVersionedPivot \u003d new VersionedPivot("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                expectedPivotStateList, expectedCommands, expectedCurrentStatePointer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(versionedPivot, expectedVersionedPivot);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void commit_nullPivot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String testCommand \u003d \"Valid Command\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e versionedPivot.commit(null, testCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void commit_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e versionedPivot.commit(getTypicalPivot(), null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void canUndo_atInitialState_returnFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(versionedPivot.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void canUndo_notAtInitialState_returnTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String testCommand \u003d \"Valid Command\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.commit(getTypicalPivot(), testCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(versionedPivot.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void undo_undoPreviousState_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String testCommand \u003d \"Valid Command\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.commit(getTypicalPivot(), testCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // check that previous state is correctly returned"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot currentState \u003d versionedPivot.undo();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(emptyPivot, currentState);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // constructing expected versioned pivot object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cReadOnlyPivot\u003e expectedPivotStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(emptyPivot);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(getTypicalPivot());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cString\u003e expectedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(INITIAL_COMMAND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(testCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int expectedCurrentStatePointer \u003d INITIAL_STATE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        VersionedPivot expectedVersionedPivot \u003d new VersionedPivot("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                expectedPivotStateList, expectedCommands, expectedCurrentStatePointer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedVersionedPivot, versionedPivot);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void canRedo_atMostRecentState_returnFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(versionedPivot.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void canRedo_notAtMostRecentState_returnTrue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String testCommand \u003d \"Valid Command\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.commit(getTypicalPivot(), testCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.undo();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(versionedPivot.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void redo_redoFollowingState_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String testCommand \u003d \"Valid Command\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.commit(getTypicalPivot(), testCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.undo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // check that following state is correctly returned"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot currentState \u003d versionedPivot.redo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(getTypicalPivot(), currentState);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // constructing expected versioned pivot object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cReadOnlyPivot\u003e expectedPivotStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(emptyPivot);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(getTypicalPivot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cString\u003e expectedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(INITIAL_COMMAND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(testCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int expectedCurrentStatePointer \u003d 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        VersionedPivot expectedVersionedPivot \u003d new VersionedPivot("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                expectedPivotStateList, expectedCommands, expectedCurrentStatePointer);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedVersionedPivot, versionedPivot);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void purgeStates_nothingToPurge_listsUnchanged() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.purgeStates();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // constructing expected versioned pivot object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cReadOnlyPivot\u003e expectedPivotStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(emptyPivot);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cString\u003e expectedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(INITIAL_COMMAND);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int expectedCurrentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        VersionedPivot expectedVersionedPivot \u003d new VersionedPivot("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                expectedPivotStateList, expectedCommands, expectedCurrentStatePointer);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedVersionedPivot, versionedPivot);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void purgeStates_purgeStatesAfterCurrent_listsChanged() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String testCommand \u003d \"Valid Command\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.commit(getTypicalPivot(), testCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.undo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        versionedPivot.purgeStates();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // constructing expected versioned pivot object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cReadOnlyPivot\u003e expectedPivotStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedPivotStateList.add(emptyPivot);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cString\u003e expectedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCommands.add(INITIAL_COMMAND);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int expectedCurrentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        VersionedPivot expectedVersionedPivot \u003d new VersionedPivot("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                expectedPivotStateList, expectedCommands, expectedCurrentStatePointer);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedVersionedPivot, versionedPivot);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 195
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/AlphanumericTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AlphanumericTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHANUMERIC \u003d \"ABC123\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHA \u003d \"ABC\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NUMERIC \u003d \"123\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NOT_ALPHANUMERIC \u003d \"ASdsa14@#$%^\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String BLANK \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final boolean CAN_BLANK \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final boolean CANNOT_BLANK \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AlphanumericStub(null, CAN_BLANK));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AlphanumericStub(null, CANNOT_BLANK));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_blankOrEmptyButCannotBlank_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AlphanumericStub(EMPTY, CANNOT_BLANK));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AlphanumericStub(BLANK, CANNOT_BLANK));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_notAlphanum_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AlphanumericStub(NOT_ALPHANUMERIC, CANNOT_BLANK));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AlphanumericStub(NOT_ALPHANUMERIC, CAN_BLANK));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidAlphanum_validAlphanum_true() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(ALPHANUMERIC, CAN_BLANK));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(ALPHANUMERIC, CANNOT_BLANK));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(ALPHA, CAN_BLANK));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(ALPHA, CANNOT_BLANK));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(NUMERIC, CAN_BLANK));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(NUMERIC, CANNOT_BLANK));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(BLANK, CAN_BLANK));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(AlphanumericStub.isValidAlphanum(EMPTY, CAN_BLANK));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidAlphanum_invalidAlphanum_false() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(AlphanumericStub.isValidAlphanum(NOT_ALPHANUMERIC, CAN_BLANK));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(AlphanumericStub.isValidAlphanum(NOT_ALPHANUMERIC, CANNOT_BLANK));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(AlphanumericStub.isValidAlphanum(BLANK, CANNOT_BLANK));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(AlphanumericStub.isValidAlphanum(EMPTY, CANNOT_BLANK));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AlphanumericStub alphanumericStub \u003d new AlphanumericStub(ALPHANUMERIC, CAN_BLANK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        AlphanumericStub alternateStub \u003d new AlphanumericStub(\"Test\", CAN_BLANK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(alphanumericStub.equals(new AlphanumericStub(ALPHANUMERIC, CAN_BLANK)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(alphanumericStub.equals(alphanumericStub));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(alphanumericStub.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(alphanumericStub.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different alphanum -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(alphanumericStub.equals(alternateStub));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class AlphanumericStub extends Alphanumeric {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Constructs a {@code AlphanumericStub}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * @param alphaNum   A valid alphaNum."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * @param canBeBlank boolean denoting if it can be blank"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        protected AlphanumericStub(String alphaNum, boolean canBeBlank) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            super(alphaNum, canBeBlank);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    || (other instanceof AlphanumericStub // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getAlphaNum().equals(((AlphanumericStub) other).getAlphaNum())); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 96
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/CaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE_PAULINE_ASSAULT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BOB_CHOO_SALON_THEFT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.testutil.CasePersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e investigationCase.getTags().remove(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(ALICE_PAULINE_ASSAULT.isSameCase(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.isSameCase(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.isSameCase(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withStatus(\"closed\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.isSameCase(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .withDescription(\"Some Random Description\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(ALICE_PAULINE_ASSAULT.isSameCase(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //TODO: Might want to test for permutations of different attributes if multiple fields in future."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Currently isSamePerson tests for equality in title and status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case aliceCopy \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(ALICE_PAULINE_ASSAULT.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(ALICE_PAULINE_ASSAULT.equals(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(BOB_CHOO_SALON_THEFT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withDescription(\"Some Random Description\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different status"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withStatus(\"CLOSED\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different suspect"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d new CasePersonBuilder().buildSuspect();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withSuspects(suspect).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different witness"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d new CasePersonBuilder().buildWitness();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withWitnesses(witness).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different victims"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d new CasePersonBuilder().buildVictim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withVictims(victim).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different document"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withDocument(\"Random Name\", \"test1.txt\").build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(ALICE_PAULINE_ASSAULT.equals(editedAlice));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void testGetters() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Title"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Title title \u003d new Title(\"Hello\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case testCase \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTitle(\"Hello\").build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(title, testCase.getTitle());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Description"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d new Description(\"Testing\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        testCase \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withDescription(\"Testing\").build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(description, testCase.getDescription());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Status"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Status status \u003d Status.ACTIVE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        testCase \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withStatus(\"active\").build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(status, testCase.getStatus());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Suspect"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d new CasePersonBuilder().buildSuspect();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspects.add(suspect);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        testCase \u003d new CaseBuilder().withSuspects(suspect).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(suspects, testCase.getSuspects());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Victim"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d new CasePersonBuilder().buildVictim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        victims.add(victim);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        testCase \u003d new CaseBuilder().withVictims(victim).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(victims, testCase.getVictims());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Witness"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d new CasePersonBuilder().buildWitness();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        witnesses.add(witness);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        testCase \u003d new CaseBuilder().withWitnesses(witness).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(witnesses, testCase.getWitnesses());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Document"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Document document \u003d new Document(new Name(\"Test\"), new Reference(\"test1.txt\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cDocument\u003e docs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        docs.add(document);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        testCase \u003d new CaseBuilder().withDocument(\"Test\", \"test1.txt\").build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(docs, testCase.getDocuments());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Tags"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Tag tag \u003d new Tag(\"Test\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        testCase \u003d new CaseBuilder().withTags(\"Test\").build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(tags, testCase.getTags());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "CodyChew": 1,
      "-": 38,
      "Vielheim": 119,
      "constancensq": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHANUMERIC \u003d \"ABC123\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHA \u003d \"ABC\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NUMERIC \u003d \"123\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NOT_ALPHANUMERIC \u003d \"ASdsa14@#$%^\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String BLANK \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_notAlphanum_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(NOT_ALPHANUMERIC));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Description is an Alphanumeric that can be blank."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // valid values"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Description.isValidDescription(ALPHANUMERIC));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Description.isValidDescription(ALPHA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Description.isValidDescription(NUMERIC));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // invalid values"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Description.isValidDescription(NOT_ALPHANUMERIC));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // blank -\u003e true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Description.isValidDescription(BLANK));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Description.isValidDescription(EMPTY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(new Description(ALPHANUMERIC), new Title(ALPHANUMERIC));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(new Description(ALPHANUMERIC), new Name(ALPHANUMERIC));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d new Description(ALPHANUMERIC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(description.equals(new Description(ALPHANUMERIC)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(description.equals(description));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(description.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(description.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different alphanum -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(description.equals(new Description(ALPHA)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 70
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/DetailsContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.testutil.CasePersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class DetailsContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate firstPredicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate secondPredicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate firstPredicateCopy \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_caseContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                Collections.singletonList(\"Bank\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Multiple keywords, muliple fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank\").withDescription(\"Robbery\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Only one matching keyword, one field"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"Bank\", \"Robbery\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank murder\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Mixed-case keywords, one field"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"bAnK\", \"roBerRy\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Mixed-case keywords, multiple fields"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"bAnK\", \"roBerRy\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank\").withDescription(\"Robbery\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_caseTitleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                Collections.singletonList(\"Bank\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Multiple keywords, one field"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"Bank\", \"Robbery\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_caseStatusContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                Collections.singletonList(\"ACTIVE\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\").withStatus(\"ACTIVE\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_caseDescriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                Collections.singletonList(\"Bank\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Robbery\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withDescription(\"Million dollars in XXX bank\").build()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_caseDocumentsContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Keywords match some fields in documents"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"evidence1.txt\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withDocument(\"Evidence found at Scene\", \"evidence1.txt\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_casePersonContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Keywords match some fields in victims"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withVictims(new CasePersonBuilder().withName(\"Janice\").withGender(\"F\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        .withEmail(\"alice@email.com\").withAddress(\"123 Main Street\").buildVictim())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Keywords match some fields in witness"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withWitnesses(new CasePersonBuilder().withName(\"Janice\").withGender(\"F\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        .withEmail(\"alice@email.com\").withAddress(\"123 Main Street\").buildWitness())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Keywords match some fields in suspect"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withSuspects(new CasePersonBuilder().withName(\"Janice\").withGender(\"F\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        .withEmail(\"alice@email.com\").withAddress(\"123 Main Street\").buildSuspect())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_caseDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(predicate.test(new CaseBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(predicate.test(new CaseBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertFalse(predicate.test(new CaseBuilder().withTitle(\"Alice Bob\").withDescription(\"Riots\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withStatus(\"CLOSED\").withVictims("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        new CasePersonBuilder().withName(\"Janice\").withGender(\"F\").buildVictim())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    //TODO: Test with more documents"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_getDocumentsInfo_returnsString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withDocument(\"Evidence found at Scene\", \"evidence1.txt\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedOutput \u003d \"Evidence found at Scene evidence1.txt \";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(predicate.getDocumentsInfo(testCase), expectedOutput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_getSuspectsInfo_returnsString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Suspect suspectOne \u003d new CasePersonBuilder().withName(\"Janice\").withGender(\"F\").withPhone(\"91234567\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withEmail(\"alice@gmail.com\").withAddress(\"123 Main Street\").buildSuspect();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Suspect suspectTwo \u003d new CasePersonBuilder().withName(\"Tom\").withGender(\"M\").withPhone(\"91234567\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withEmail(\"tom@gmail.com\").withAddress(\"123 Main Street\").buildSuspect();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withSuspects(suspectOne, suspectTwo)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedOutput \u003d \"Janice F 91234567 alice@gmail.com 123 Main Street Tom M 91234567 tom@gmail.com \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                + \"123 Main Street \";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(predicate.getSuspectsInfo(testCase), expectedOutput);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_getWitnessesInfo_returnsString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Witness witnessOne \u003d new CasePersonBuilder().withName(\"Janice\").withGender(\"F\").withPhone(\"91234567\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withEmail(\"alice@gmail.com\").withAddress(\"123 Main Street\").buildWitness();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Witness witnessTwo \u003d new CasePersonBuilder().withName(\"Tom\").withGender(\"M\").withPhone(\"91234567\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withEmail(\"tom@gmail.com\").withAddress(\"123 Main Street\").buildWitness();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withWitnesses(witnessOne, witnessTwo)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedOutput \u003d \"Janice F 91234567 alice@gmail.com 123 Main Street Tom M 91234567 tom@gmail.com \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                + \"123 Main Street \";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(predicate.getWitnessesInfo(testCase), expectedOutput);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_getVictimsInfo_returnsString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Victim victimOne \u003d new CasePersonBuilder().withName(\"Janice\").withGender(\"F\").withPhone(\"91234567\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withEmail(\"alice@gmail.com\").withAddress(\"123 Main Street\").buildVictim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Victim victimTwo \u003d new CasePersonBuilder().withName(\"Tom\").withGender(\"M\").withPhone(\"91234567\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withEmail(\"tom@gmail.com\").withAddress(\"123 Main Street\").buildVictim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case testCase \u003d new CaseBuilder().withTitle(\"Bank Robbery\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withVictims(victimOne, victimTwo)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedOutput \u003d \"Janice F 91234567 alice@gmail.com 123 Main Street Tom M 91234567 tom@gmail.com \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                + \"123 Main Street \";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(predicate.getVictimsInfo(testCase), expectedOutput);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void test_appendPersonDetails() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        StringBuilder test \u003d new StringBuilder();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String expectedOutput \u003d \"Janice F 91234567 janice@gmail.com 123 Main Street \";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Victim victim \u003d new CasePersonBuilder().withName(\"Janice\")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withGender(\"F\").withPhone(\"91234567\").withEmail(\"janice@gmail.com\")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        .withAddress(\"123 Main Street\").buildVictim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate.appendPersonDetails(test, victim);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(test.toString(), expectedOutput);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        test \u003d new StringBuilder();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Suspect suspect \u003d new CasePersonBuilder().withName(\"Janice\")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withGender(\"F\").withPhone(\"91234567\").withEmail(\"janice@gmail.com\")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withAddress(\"123 Main Street\").buildSuspect();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate.appendPersonDetails(test, suspect);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(test.toString(), expectedOutput);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        test \u003d new StringBuilder();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Witness witness \u003d new CasePersonBuilder().withName(\"Janice\")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withGender(\"F\").withPhone(\"91234567\").withEmail(\"janice@gmail.com\")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withAddress(\"123 Main Street\").buildWitness();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        predicate.appendPersonDetails(test, witness);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertEquals(test.toString(), expectedOutput);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "constancensq": 231
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/DocumentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class DocumentTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Document(new Name(\"name\"), null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Document(null, new Reference(\"valid\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document document \u003d new Document(new Name(\"name\"), new Reference(\"reference\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document duplicateDocument \u003d new Document(new Name(\"name\"), new Reference(\"reference\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document differentName \u003d new Document(new Name(\"Bob\"), new Reference(\"reference\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document differentReference \u003d new Document(new Name(\"name\"), new Reference(\"ref\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(document.equals(document));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(document.equals(duplicateDocument));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertFalse(document.equals(differentName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertFalse(document.equals(differentReference));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 30
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/ReferenceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReferenceTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Path testFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Represents a Reference with separate default paths for testing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static class ReferenceStub extends Reference {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        private static final String DEFAULT_TESTPATH \u003d \"./testDirectory/\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public ReferenceStub(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            super(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public String getFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return DEFAULT_TESTPATH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //override isExists to check the correct test file location"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public boolean isExists() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return FileUtil.isFileExists(getTempFilePath(path.toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reference(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void constructor_invalidReference_throwsIllegalArgumentException()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throws NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String invalidReference \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Reference(invalidReference));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void isValidReference() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertFalse(Reference.isValidReference(\"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertFalse(Reference.isValidReference(\"invalid :across ?/\\0 OS\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(Reference.isValidReference(\"fileWithExtension.txt\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Reference reference \u003d new Reference(\"validRef\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Reference referenceDuplicate \u003d new Reference(\"validRef\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(reference.equals(reference));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertFalse(reference.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //same path -\u003e true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(reference.equals(referenceDuplicate));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void isExists() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Reference doesNotExist \u003d new ReferenceStub(\"dummy.txt\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Reference exists \u003d new ReferenceStub(\"existReference.txt\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        FileUtil.createFile(getTempFilePath(\"./testDirectory/existReference.txt\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(exists.isExists());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertFalse(doesNotExist.isExists());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 94
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/StatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class StatusTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ACTIVE_SMALL \u003d \"active\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ACTIVE_CAPS \u003d \"ACTIVE\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ACTIVE_MIX \u003d \"aCtIvE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String COLD_SMALL \u003d \"cold\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String COLD_CAPS \u003d \"COLD\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String COLD_MIX \u003d \"cOLd\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String CLOSED_SMALL \u003d \"closed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String CLOSED_CAPS \u003d \"CLOSED\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String CLOSED_MIX \u003d \"cLoSeD\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"Hello\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String BLANK \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void createStatus_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Status.createStatus(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void createStatus_invalidStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Status.createStatus(INVALID_STATUS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Status.createStatus(EMPTY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Status.createStatus(BLANK));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidStatus_validStatus_true() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(ACTIVE_SMALL));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(ACTIVE_MIX));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(ACTIVE_CAPS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(COLD_SMALL));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(COLD_MIX));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(COLD_CAPS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(CLOSED_SMALL));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(CLOSED_MIX));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Status.isValidStatus(CLOSED_CAPS));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidStatus_invalidStatus_false() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Status.isValidStatus(INVALID_STATUS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Status.isValidStatus(EMPTY));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Status.isValidStatus(BLANK));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 54
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHANUMERIC \u003d \"ABC123\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHA \u003d \"ABC\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NUMERIC \u003d \"123\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NOT_ALPHANUMERIC \u003d \"ASdsa14@#$%^\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String BLANK \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_notAlphanum_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(NOT_ALPHANUMERIC));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Title is an Alphanumeric that cannot be blank."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_blank_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(BLANK));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(EMPTY));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // valid values"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Title.isValidTitle(ALPHANUMERIC));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Title.isValidTitle(ALPHA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Title.isValidTitle(NUMERIC));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // invalid values"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Title.isValidTitle(NOT_ALPHANUMERIC));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // blank -\u003e false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Title.isValidTitle(BLANK));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Title.isValidTitle(EMPTY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(new Description(ALPHANUMERIC), new Title(ALPHANUMERIC));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(new Name(ALPHANUMERIC), new Title(ALPHANUMERIC));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Title title \u003d new Title(ALPHANUMERIC);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(title.equals(new Title(ALPHANUMERIC)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(title.equals(title));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(title.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(title.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different alphanum -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(title.equals(new Title(ALPHA)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 76
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/UniqueCaseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE_PAULINE_ASSAULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BOB_CHOO_SALON_THEFT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.CaseNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.DuplicateCaseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class UniqueCaseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final UniqueCaseList uniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void contains_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void contains_caseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(uniqueCaseList.contains(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void contains_caseInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(uniqueCaseList.contains(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void contains_caseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(uniqueCaseList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void add_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void add_duplicateCase_throwsDuplicateCaseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e uniqueCaseList.add(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase_nullTargetCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCase(null, ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase_nullEditedCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCase(ALICE_PAULINE_ASSAULT, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase_targetCaseNotInList_throwsCaseNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CaseNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                uniqueCaseList.setCase(ALICE_PAULINE_ASSAULT, ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase_editedCaseIsSameCase_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.setCase(ALICE_PAULINE_ASSAULT, ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedUniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase_editedCaseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE_PAULINE_ASSAULT).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.setCase(ALICE_PAULINE_ASSAULT, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedUniqueCaseList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase_editedCaseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.setCase(ALICE_PAULINE_ASSAULT, BOB_CHOO_SALON_THEFT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedUniqueCaseList.add(BOB_CHOO_SALON_THEFT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCase_editedCaseHasNonUniqueIdentity_throwsDuplicateCaseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(BOB_CHOO_SALON_THEFT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                uniqueCaseList.setCase(ALICE_PAULINE_ASSAULT, BOB_CHOO_SALON_THEFT));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void remove_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void remove_caseDoesNotExist_throwsCaseNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(CaseNotFoundException.class, () -\u003e uniqueCaseList.remove(ALICE_PAULINE_ASSAULT));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void remove_existingCase_removesCase() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.remove(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCases_nullUniqueCaseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCases((UniqueCaseList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCases_uniqueCaseList_replacesOwnListWithProvidedUniqueCaseList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedUniqueCaseList.add(BOB_CHOO_SALON_THEFT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.setCases(expectedUniqueCaseList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCases_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCases((List\u003cCase\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCases_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        uniqueCaseList.add(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e caseList \u003d Collections.singletonList(BOB_CHOO_SALON_THEFT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.setCases(caseList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        expectedUniqueCaseList.add(BOB_CHOO_SALON_THEFT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void setCases_listWithDuplicateCases_throwsDuplicateCaseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e listWithDuplicateCases \u003d Arrays.asList(ALICE_PAULINE_ASSAULT, ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e uniqueCaseList.setCases(listWithDuplicateCases));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            -\u003e uniqueCaseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 114,
      "Vielheim": 57
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"Blk 123\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Address defaultAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Same value --\u003e true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(defaultAddress.equals(new Address(VALID_ADDRESS)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object --\u003e true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(defaultAddress.equals(defaultAddress));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null --\u003e false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(defaultAddress.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types --\u003e false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(defaultAddress.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different value --\u003e false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(defaultAddress.equals(new Address(\"Blk 223\"))); // any real number is coincidental."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 36
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/CasePersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class CasePersonTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@kmail.com\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.M;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(null, null, null, null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(null, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, null, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, null, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, null, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void testGetter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        CasePerson person \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(DEFAULT_NAME, person.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(DEFAULT_GENDER, person.getGender());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(DEFAULT_PHONE, person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(DEFAULT_EMAIL, person.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(DEFAULT_ADDRESS, person.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        CasePerson person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(person.equals("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(person.equals(person));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(person.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(person.equals(5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(person.equals("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(new Name(\"Tommy\"), DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(person.equals("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, Gender.F, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(person.equals("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, new Phone(\"923\"), DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(person.equals(new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Email(\"Tommy@hello.com\"), DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(person.equals("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new CasePersonStub(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        new Address(\"Blk 231231\"))));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private class CasePersonStub extends CasePerson {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Every field must be present and not null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * @param name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * @param gender"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * @param phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * @param email"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * @param address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public CasePersonStub(Name name, Gender gender, Phone phone, Email email, Address address) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            super(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    || (other instanceof CasePersonStub // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getName().equals(((CasePersonStub) other).getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getAddress().equals(((CasePersonStub) other).getAddress())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getEmail().equals(((CasePersonStub) other).getEmail())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getPhone().equals(((CasePersonStub) other).getPhone())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getGender().equals(((CasePersonStub) other).getGender())); // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 102
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "Vielheim": 6
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/GenderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String MALE_CAPS \u003d \"M\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String MALE_SMALL \u003d \"m\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FEMALE_CAPS \u003d \"F\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FEMALE_SMALL \u003d \"f\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"SOMETHING\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String BLANK \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void createGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Gender.createGender(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void createGender_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Gender.createGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Gender.createGender(EMPTY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Gender.createGender(BLANK));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidGender_validGender_true() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Gender.isValidGender(MALE_CAPS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Gender.isValidGender(MALE_SMALL));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Gender.isValidGender(FEMALE_CAPS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Gender.isValidGender(FEMALE_SMALL));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidGender_invalidGender_false() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Gender.isValidGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Gender.isValidGender(EMPTY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Gender.isValidGender(BLANK));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 44
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHANUMERIC \u003d \"ABC123\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String ALPHA \u003d \"ABC\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NUMERIC \u003d \"123\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String NOT_ALPHANUMERIC \u003d \"ASdsa14@#$%^\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String BLANK \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_notAlphanum_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(NOT_ALPHANUMERIC));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_blank_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(BLANK));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(EMPTY));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValidName_blank_false() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // valid values"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Name.isValidName(ALPHANUMERIC));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Name.isValidName(ALPHA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Name.isValidName(NUMERIC));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // invalid values"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Name.isValidName(NOT_ALPHANUMERIC));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // blank -\u003e false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Name.isValidName(BLANK));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Name.isValidName(EMPTY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(new Name(ALPHANUMERIC), new Title(ALPHANUMERIC));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(new Name(ALPHANUMERIC), new Description(ALPHANUMERIC));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Name name \u003d new Name(ALPHANUMERIC);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(name.equals(new Name(ALPHANUMERIC)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(name.equals(name));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(name.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(name.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different alphanum -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(name.equals(new Name(ALPHA)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 22,
      "Vielheim": 53
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_PHONE \u003d \"91234567\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_PHONE_SHORT \u003d \"123\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_PHONE_LONG \u003d \"123456789765432\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String INVALID_SHORT \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String INVALID_VALUES \u003d \"123abc+#$!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_invalidValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(INVALID_SHORT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(INVALID_VALUES));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValid_true() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Phone.isValidPhone(BLANK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Phone.isValidPhone(EMPTY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Phone.isValidPhone(VALID_PHONE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Phone.isValidPhone(VALID_PHONE_SHORT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(Phone.isValidPhone(VALID_PHONE_LONG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void isValid_false() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Phone.isValidPhone(INVALID_SHORT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(Phone.isValidPhone(INVALID_VALUES));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Phone defaultPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // Same value --\u003e true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(defaultPhone.equals(new Phone(VALID_PHONE)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object --\u003e true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(defaultPhone.equals(defaultPhone));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null --\u003e false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(defaultPhone.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different types --\u003e false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(defaultPhone.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different value --\u003e false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(defaultPhone.equals(new Phone(\"92273613\"))); // any real number is coincidental."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 62
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/SuspectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class SuspectTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@kmail.com\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.M;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(null, null, null, null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(null, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, null, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, null, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, null, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(witness, suspect);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(victim, suspect);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(suspect.equals("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(suspect.equals(suspect));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(suspect.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(suspect.equals(5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(suspect.equals("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(new Name(\"Tommy\"), DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(suspect.equals("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, Gender.F, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(suspect.equals("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, new Phone(\"923\"), DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(suspect.equals(new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Email(\"Tommy@hello.com\"), DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(suspect.equals("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        new Address(\"Blk 231231\"))));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 71
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/VictimTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class VictimTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@kmail.com\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.M;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(null, null, null, null, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(null, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, null, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, null, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, null, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(victim, witness);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(victim, suspect);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(victim.equals("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(victim.equals(victim));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(victim.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(victim.equals(5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(victim.equals("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(new Name(\"Tommy\"), DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(victim.equals("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, Gender.F, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(victim.equals("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, new Phone(\"923\"), DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(victim.equals(new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Email(\"Tommy@hello.com\"), DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(victim.equals("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        new Address(\"Blk 231231\"))));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 71
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/caseperson/WitnessTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "package seedu.pivot.model.investigationcase.caseperson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class WitnessTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Test Name\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d new Phone(\"91234567\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Address DEFAULT_ADDRESS \u003d new Address(\"Blk 123\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Email DEFAULT_EMAIL \u003d new Email(\"abc@kmail.com\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Gender DEFAULT_GENDER \u003d Gender.M;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(null, null, null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(null, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, null, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, null, DEFAULT_EMAIL, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, null, DEFAULT_ADDRESS));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect suspect \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Suspect(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim victim \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Victim(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Witness witness \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(victim, witness);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertNotEquals(suspect, witness);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(witness.equals("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertTrue(witness.equals(witness));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(witness.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(witness.equals(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(witness.equals("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(new Name(\"Tommy\"), DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(witness.equals("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, Gender.F, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(witness.equals("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, new Phone(\"923\"), DEFAULT_EMAIL, DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(witness.equals(new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Email(\"Tommy@hello.com\"), DEFAULT_ADDRESS)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertFalse(witness.equals("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                new Witness(DEFAULT_NAME, DEFAULT_GENDER, DEFAULT_PHONE, DEFAULT_EMAIL,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        new Address(\"Blk 231231\"))));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 70
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonAdaptedCaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.storage.JsonAdaptedCase.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BENSON_MEIER_ROBBERY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonAdaptedCaseTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"Esm@nd@\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String INVALID_DOCUMENT_REFERENCE \u003d \"invalid :across ?/\\0 OS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String INVALID_DOCUMENT_NAME \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String INVALID_WITNESS_NAME \u003d \"T|M\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String INVALID_SUSPECT_NAME \u003d \"!!!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String INVALID_VICTIM_NAME \u003d \"P@ul\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"P\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"phone\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"abc\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON_MEIER_ROBBERY.getTitle().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON_MEIER_ROBBERY.getDescription().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_STATUS \u003d BENSON_MEIER_ROBBERY.getStatus().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String VALID_ARCHIVE_STATUS \u003d BENSON_MEIER_ROBBERY.getArchiveStatus().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String VALID_DOCUMENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String VALID_DOCUMENT_REFERENCE \u003d \"test1.txt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final List\u003cJsonAdaptedDocument\u003e VALID_DOCUMENTS \u003d BENSON_MEIER_ROBBERY.getDocuments().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .map(JsonAdaptedDocument::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final List\u003cJsonAdaptedSuspect\u003e VALID_SUSPECTS \u003d BENSON_MEIER_ROBBERY.getSuspects().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            .map(JsonAdaptedSuspect::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final List\u003cJsonAdaptedVictim\u003e VALID_VICTIMS \u003d BENSON_MEIER_ROBBERY.getVictims().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .map(JsonAdaptedVictim::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON_MEIER_ROBBERY.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final List\u003cJsonAdaptedWitness\u003e VALID_WITNESSES \u003d BENSON_MEIER_ROBBERY.getWitnesses().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .map(JsonAdaptedWitness::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"Blk 123\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        JsonAdaptedCase person \u003d new JsonAdaptedCase(BENSON_MEIER_ROBBERY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(BENSON_MEIER_ROBBERY, person.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(INVALID_NAME, VALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d new JsonAdaptedCase(null, VALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                VALID_DOCUMENTS, VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, INVALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, null, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_invalidStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, INVALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_nullStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                null, VALID_DOCUMENTS, VALID_SUSPECTS, VALID_VICTIMS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_DOCUMENTS, VALID_SUSPECTS, VALID_VICTIMS,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_WITNESSES, invalidTags, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void toModelType_invalidSuspect_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cJsonAdaptedSuspect\u003e invalidSuspects \u003d new ArrayList\u003c\u003e(VALID_SUSPECTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        invalidSuspects.add(new JsonAdaptedSuspect(INVALID_SUSPECT_NAME, INVALID_GENDER, INVALID_PHONE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                INVALID_EMAIL, VALID_ADDRESS));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        invalidSuspects, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void toModelType_invalidVictims_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cJsonAdaptedVictim\u003e invalidVictims \u003d new ArrayList\u003c\u003e(VALID_VICTIMS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        invalidVictims.add(new JsonAdaptedVictim(INVALID_VICTIM_NAME, INVALID_GENDER, INVALID_PHONE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                INVALID_EMAIL, VALID_ADDRESS));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, invalidVictims, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void toModelType_invalidWitnesses_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cJsonAdaptedWitness\u003e invalidWitnesses \u003d new ArrayList\u003c\u003e(VALID_WITNESSES);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        invalidWitnesses.add(new JsonAdaptedWitness(INVALID_WITNESS_NAME, INVALID_GENDER, INVALID_PHONE,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                INVALID_EMAIL, VALID_ADDRESS));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, invalidWitnesses, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void toModelType_invalidDocuments_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cJsonAdaptedDocument\u003e invalidDocumentReference \u003d new ArrayList\u003c\u003e(VALID_DOCUMENTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        invalidDocumentReference.add(new JsonAdaptedDocument(VALID_DOCUMENT_NAME, INVALID_DOCUMENT_REFERENCE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, invalidDocumentReference,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cJsonAdaptedDocument\u003e invalidDocumentName \u003d new ArrayList\u003c\u003e(VALID_DOCUMENTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        invalidDocumentName.add(new JsonAdaptedDocument(INVALID_DOCUMENT_NAME, VALID_DOCUMENT_REFERENCE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person2 \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, invalidDocumentName,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS, VALID_ARCHIVE_STATUS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(IllegalValueException.class, person2::toModelType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 44,
      "CodyChew": 12,
      "Jargonx": 6,
      "-": 42,
      "Vielheim": 39,
      "constancensq": 35
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonPivotStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE_PAULINE_ASSAULT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.HOON_MEIER_ARSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.IDA_MUELLER_STABBING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonPivotStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPivotStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readPivot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPivot(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPivot\u003e readPivot(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new JsonPivotStorage(Paths.get(filePath)).readPivot(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(readPivot(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPivot(\"notJsonFormatPivot.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readPivot_invalidPersonPivot_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPivot(\"invalidPersonPivot.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readPivot_invalidAndValidPersonPivot_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPivot(\"invalidAndValidPersonPivot.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readAndSavePivot_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPivot.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot original \u003d getTypicalPivot();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage jsonPivotStorage \u003d new JsonPivotStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        jsonPivotStorage.savePivot(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot readBack \u003d jsonPivotStorage.readPivot(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        original.addCase(HOON_MEIER_ARSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        original.removeCase(ALICE_PAULINE_ASSAULT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        jsonPivotStorage.savePivot(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        readBack \u003d jsonPivotStorage.readPivot(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        original.addCase(IDA_MUELLER_STABBING);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        jsonPivotStorage.savePivot(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        readBack \u003d jsonPivotStorage.readPivot().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot_nullPivot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePivot(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Saves {@code pivot} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private void savePivot(ReadOnlyPivot pivot, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            new JsonPivotStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    .savePivot(pivot, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePivot(new Pivot(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 39,
      "-": 65,
      "Vielheim": 6
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonSerializablePivotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.TypicalCases;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonSerializablePivotTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePivotTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsPivot.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonPivot.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonPivot.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonSerializablePivot dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                JsonSerializablePivot.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot pivotFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot typicalPersonsPivot \u003d TypicalCases.getTypicalPivot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(pivotFromFile, typicalPersonsPivot);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonSerializablePivot dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                JsonSerializablePivot.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonSerializablePivot dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                JsonSerializablePivot.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePivot.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 47
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(Paths.get(\"pivot.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/ReferenceStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.storage.testutil.ReferenceStorageStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReferenceStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private ReferenceStorage referenceStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void constructor_success() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ReferenceStorage referenceStorage \u003d new ReferenceStorageStub(getTempFilePath(\"./tests\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(Files.exists(getTempFilePath(\"tests\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void addTestFile_success() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ReferenceStorage referenceStorage \u003d new ReferenceStorageStub(getTempFilePath(\"./testDir\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertFalse(Files.exists(getTempFilePath(\"./testDir/testFile.txt\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        referenceStorage.addTestFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertTrue(Files.exists(getTempFilePath(\"./testDir/testFile.txt\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 44
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.storage.testutil.ReferenceStorageStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage pivotStorage \u003d new JsonPivotStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ReferenceStorage referenceStorage \u003d new ReferenceStorageStub(getTempFilePath(\"./testDir\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        storageManager \u003d new StorageManager(pivotStorage, userPrefsStorage, referenceStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void pivotReadSave() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * {@link JsonPivotStorage} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPivotStorageTest} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot original \u003d getTypicalPivot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        storageManager.savePivot(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot retrieved \u003d storageManager.readPivot().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(retrieved));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void getPivotFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertNotNull(storageManager.getPivotFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 16,
      "CodyChew": 6,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/testutil/ReferenceStorageStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.storage.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.storage.ReferenceStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Simulates creation of a { @code ReferenceStorage } at a separate test location."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReferenceStorageStub extends ReferenceStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Path testDirectory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a directory at specified { @code Path } , path is assumed to be valid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public ReferenceStorageStub(Path testDirectory) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        FileUtil.createDirectories(testDirectory);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.testDirectory \u003d testDirectory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void addTestFile() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Path filePath \u003d Paths.get(testDirectory.toString() + \"/testFile.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 30
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/CaseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * A utility class to help with building Case objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Kovan Thefts\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"active\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private List\u003cDocument\u003e documents;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private List\u003cSuspect\u003e suspects;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private List\u003cVictim\u003e victims;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private List\u003cWitness\u003e witnesses;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private ArchiveStatus archiveStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code CaseBuilder} with the default details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status \u003d Status.createStatus(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        archiveStatus \u003d ArchiveStatus.DEFAULT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Initializes the CaseBuilder with the data of {@code caseToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder(Case caseToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        title \u003d caseToCopy.getTitle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        description \u003d caseToCopy.getDescription();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status \u003d caseToCopy.getStatus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documents \u003d caseToCopy.getDocuments();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        suspects \u003d caseToCopy.getSuspects();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        victims \u003d caseToCopy.getVictims();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        witnesses \u003d caseToCopy.getWitnesses();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(caseToCopy.getTags());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        archiveStatus \u003d caseToCopy.getArchiveStatus();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Title} of the {@code Case} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Description} of the {@code Case} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Case} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code witnesses} into a {@code List\u003cWitness\u003e} and set it to the {@code Case} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CaseBuilder withWitnesses(Witness ... witnesses) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (this.witnesses \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.witnesses.addAll(Arrays.asList(witnesses));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Document} of the {@code Case} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withDocument(String name, String ref) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (this.documents \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documents.add(new Document(new Name(name), new Reference(ref)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Status} of the {@code Case} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.status \u003d Status.createStatus(status);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code suspects} into a {@code List\u003cSuspect\u003e} and set it to the {@code Case} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CaseBuilder withSuspects(Suspect ... suspects) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (this.suspects \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.suspects.addAll(Arrays.asList(suspects));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code victims} into a {@code List\u003cVictim\u003e} and set it to the {@code Case} that we are building."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CaseBuilder withVictims(Victim ... victims) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (this.victims \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.victims.addAll(Arrays.asList(victims));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the {@code ArchiveStatus} of the {@code Case} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CaseBuilder withArchiveStatus(ArchiveStatus archiveStatus) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.archiveStatus \u003d archiveStatus;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Generates a {@code Case} object with existing fields."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return Person object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Case build() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Case(title, description, status, documents, suspects, victims, witnesses, tags,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                archiveStatus);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 33,
      "CodyChew": 12,
      "Jargonx": 7,
      "-": 34,
      "Vielheim": 50,
      "constancensq": 29
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/CasePersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "constancensq"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.CasePerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Gender;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * A utility class to help with building CasePerson objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class CasePersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Tom Holland\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"M\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePersonBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        gender \u003d Gender.createGender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Initializes the CasePersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePersonBuilder(CasePerson personToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the {@code Name} of the {@code CasePerson} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the {@code Gender} of the {@code CasePerson} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.gender \u003d Gender.createGender(gender);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the {@code Phone} of the {@code CasePerson} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the {@code Email} of the {@code CasePerson} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Sets the {@code Address} of the {@code CasePerson} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CasePersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Generates a {@code Suspect} object with existing fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return Suspect object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Suspect buildSuspect() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Suspect(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Generates a {@code Witness} object with existing fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return Witness object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Witness buildWitness() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Witness(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Generates a {@code Victim} object with existing fields."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return Victim object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Victim buildVictim() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Victim(name, gender, phone, email, address);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "constancensq": 118
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/CaseUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * A utility class for Case."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns an add command string for adding the {@code Case}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static String getAddCommand(Case investigationCase) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + AddCommand.TYPE_CASE + \" \" + getCaseDetails(investigationCase);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns the part of command string for the given {@code Case}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static String getCaseDetails(Case investigationCase) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        sb.append(PREFIX_TITLE + investigationCase.getTitle().getAlphaNum() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        sb.append(PREFIX_STATUS + investigationCase.getStatus().name() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        investigationCase.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns the part of command string for the given {@code EditCaseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static String getEditCaseDescriptorDetails(EditCaseDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.getAlphaNum()).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.getStatus().ifPresent(status -\u003e sb.append(PREFIX_STATUS).append(status.name()).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 13,
      "-": 34,
      "Vielheim": 9
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/EditCaseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * A utility class to help with building EditCaseDescriptor objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditCaseDescriptorBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private EditCaseDescriptor descriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor \u003d new EditCaseDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder(EditCaseDescriptor descriptor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.descriptor \u003d new EditCaseDescriptor(descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns an {@code EditCaseDescriptor} with fields containing {@code Case}\u0027s details"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder(Case investigationCase) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor \u003d new EditCaseDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setTitle(investigationCase.getTitle());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setDescription(investigationCase.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setStatus(investigationCase.getStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setSuspects(investigationCase.getSuspects());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setWitnesses(investigationCase.getWitnesses());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setDocuments(investigationCase.getDocuments());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setVictims(investigationCase.getVictims());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setTags(investigationCase.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Title} of the {@code EditCaseDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Description} of the {@code EditCaseDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public EditCaseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Status} of the {@code EditCaseDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setStatus(Status.createStatus(status));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCaseDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code suspects} into a {@code List\u003cSuspect\u003e} and set it to the {@code EditCaseDescriptor}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public EditCaseDescriptorBuilder withSuspects(Suspect... suspects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cSuspect\u003e suspectList \u003d Arrays.asList(suspects);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        descriptor.setSuspects(suspectList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code victims} into a {@code List\u003cVictim\u003e} and set it to the {@code EditCaseDescriptor}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public EditCaseDescriptorBuilder withVictims(Victim... victims) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cVictim\u003e victimList \u003d Arrays.asList(victims);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        descriptor.setVictims(victimList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code witnesses} into a {@code List\u003cWitness\u003e} and set it to the {@code EditCaseDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public EditCaseDescriptorBuilder withWitnesses(Witness... witnesses) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cWitness\u003e witnessList \u003d Arrays.asList(witnesses);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setWitnesses(witnessList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code documents} into a {@code List\u003cDocument\u003e} and set it to the {@code EditCaseDescriptor}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public EditCaseDescriptorBuilder withDocuments(Document... documents) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cDocument\u003e documentList \u003d Arrays.asList(documents);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setDocuments(documentList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptor build() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 29,
      "CodyChew": 1,
      "-": 34,
      "Vielheim": 54,
      "constancensq": 9
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/PivotBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A utility class to help with building PIVOT objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " *     {@code Pivot pivot \u003d new PivotBuilder().withCase(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Pivot pivot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PivotBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot \u003d new Pivot();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PivotBuilder(Pivot pivot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivot \u003d pivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds a new {@code Case} to the {@code PIVOT} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PivotBuilder withCase(Case investigationCase) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.addCase(investigationCase);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 34
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCaseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Case getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getFilteredCaseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/TypicalCases.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static seedu.pivot.logic.commands.testutil.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.ArchiveStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Suspect;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Victim;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.model.investigationcase.caseperson.Witness;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class TypicalCases {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // CasePersons"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Suspect PETER \u003d new CasePersonBuilder().withName(\"Peter\").withGender(\"M\").withPhone(\"912345678\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withEmail(\"peter@gmail.com\").withAddress(\"Blk 123\").buildSuspect();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Victim TOM \u003d new CasePersonBuilder().withName(\"Tom\").withGender(\"M\").withPhone(\"912345678\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withEmail(\"tom@gmail.com\").withAddress(\"Blk 123\").buildVictim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Witness JANICE \u003d new CasePersonBuilder().withName(\"Janice\").withGender(\"F\").buildWitness();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Cases"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // The cases here are linked to the test file: typicalPersonsPivot.json"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // If the Case is modified here, it has to be modified there too."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case ALICE_PAULINE_ASSAULT \u003d new CaseBuilder().withTitle(\"Alice Pauline Assault\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .withDocument(\"name\", \"validButShouldNotExist.txt\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withStatus(\"COLD\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withVictims(TOM)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withWitnesses(JANICE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withSuspects(PETER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case BENSON_MEIER_ROBBERY \u003d new CaseBuilder().withTitle(\"Benson Meier Robbery\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            .withStatus(\"CLOSED\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .withDocument(\"name\", \"test1.txt\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withVictims(TOM)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withWitnesses(JANICE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case CARL_KURZ_FIRE \u003d new CaseBuilder().withTitle(\"Carl Kurz Fire\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case DANIEL_MEIER_SHOPLIFTING \u003d new CaseBuilder().withTitle(\"Daniel Meier Shoplifting\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case ELLE_MEYER_SHOOTING \u003d new CaseBuilder().withTitle(\"Elle Meyer Shooting\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case FIONA_KUNZ_KIDNAPPING \u003d new CaseBuilder().withTitle(\"Fiona Kunz Kidnapping\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case GEORGE_BEST_VANDALISM \u003d new CaseBuilder().withTitle(\"George Best Vandalism\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case HOON_MEIER_ARSON \u003d new CaseBuilder().withTitle(\"Hoon Meier Arson\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case IDA_MUELLER_STABBING \u003d new CaseBuilder().withTitle(\"Ida Mueller Stabbing\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case AMY_BEE_DISAPPEARANCE \u003d new CaseBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withStatus(VALID_STATUS_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Case BOB_CHOO_SALON_THEFT \u003d new CaseBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Manually added - Cases that are archived"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Case JUNK_YARD_MURDER \u003d new CaseBuilder().withTitle(\"Junk Yard Murder\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withStatus(\"ACTIVE\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Case KLOOK_SCAM \u003d new CaseBuilder().withTitle(\"Klook Scam\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withStatus(\"ACTIVE\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Case LOUIS_HOMICIDE \u003d new CaseBuilder().withTitle(\"Louis Homicide\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withStatus(\"ACTIVE\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withArchiveStatus(ArchiveStatus.ARCHIVED).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private TypicalCases() {} // prevents instantiation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns an {@code Pivot} with all the typical cases."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Pivot getTypicalPivot() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Pivot pivot \u003d new Pivot();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        for (Case investigationCase : getTypicalCases()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            pivot.addCase(investigationCase);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return pivot;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static List\u003cCase\u003e getTypicalCases() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_PAULINE_ASSAULT, BENSON_MEIER_ROBBERY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                CARL_KURZ_FIRE, DANIEL_MEIER_SHOPLIFTING, ELLE_MEYER_SHOOTING,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                FIONA_KUNZ_KIDNAPPING, GEORGE_BEST_VANDALISM, JUNK_YARD_MURDER, KLOOK_SCAM,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                LOUIS_HOMICIDE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "CodyChew": 2,
      "Jargonx": 13,
      "-": 26,
      "Vielheim": 28,
      "constancensq": 32
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/pivot/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/pivot/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003c?import seedu.pivot.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cfx:root type\u003d\"seedu.pivot.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 5
    }
  }
]
