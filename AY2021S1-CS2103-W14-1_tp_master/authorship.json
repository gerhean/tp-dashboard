[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "# PropertyFree"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "With PropertyFree, property management and client meetings become simplified."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "## About"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "PropertyFree is a Command Line Interface (CLI) app for property management. It has a user-friendly Graphical User Interface (GUI) so that property agents can easily navigate our features. PropertyFree helps agents manage admin paperwork for each property and utilises a calendar to track meetings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "## User Interface"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 11,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "# **About Us**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree was developed by the AY2021S1-CS2103-W14-1 team."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is a bookeeping system that allows Property Real Estate Agents to keep track of properties, clients and meetings related to their work."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is a brownfield project which references the [AddressBook level-3](https://github.com/se-edu/addressbook-level3)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "***"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "### Dianne Loh Wen Hui"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cimg src\u003d\"images/dianneloh9.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[github](https://github.com/dianneloh9)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[portfolio](team/dianneloh9.md)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Responsibilities: Property Management, UI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "***"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "### Kor Ming Soon"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cimg src\u003d\"images/kormingsoon.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[github](https://github.com/kormingsoon)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[portfolio](team/kormingsoon.md)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Role: Deliverables and deadlines, Intellij expert"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Responsibilities: Storage, Client Management, UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "***"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "### Marcus Duigan Xing Yu"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cimg src\u003d\"images/marcon2509.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[github](https://github.com/Marcon2509)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[portfolio](team/marcon2509.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Role: Documentation, Code Quality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Responsibilities: Bid Management, Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "***"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "### Munnamgi Harsha Vardhan Reddy"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cimg src\u003d\"images/munharsha.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[github](https://github.com/munharsha)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[portfolio](team/munharsha.md)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Role: Testing, Integration"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Responsibilities: Calendar Management, Storage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "***"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "### Christopher Leo Mervyn"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cimg src\u003d\"images/christopher-lm.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[github](https://github.com/Christopher-LM)]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "[[portfolio](team/christopher-lm.md)]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Role: Scheduling and tracking, Integration"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* Responsibilities: Calendar Management, Model"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 43,
      "-": 29
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "**`Main`** has **two** classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "* Returns what to be printed out on the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "## Appendix A: Product scope"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* Has a need to manage a significant number of property details, seller details and buyer details"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**Value proposition**: Able to manage property listings, client "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "contact details as well as creating a meeting schedule easily "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "while being faster and more convenient than traditional bookkeeping "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "softwares such as Excel. "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "## Appendix B: User stories"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                                           | So that I can…​                                                         |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| -------- | ----------------------------------------- | --------------------------------------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | add a new property listing                                                          | add a new property entry when a seller wants to sell a new property    |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | add bidder or seller                                                                | keep track of bidders or sellers involved                              |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | view the list of interested sellers                                                 | keep track of property owners                                          |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* *`    | Real estate agent           | edit the property listing                                                           | ensure that the property information is accurate                       |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | delete a property listing                                                           | remove listings that are closed or that sellers no longer want to sell |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* *`    | Real estate agent           | view the listings I have by area                                                    | be better equipped to give more options to the buyers on the spot      |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* *`    | Real estate agent           | input details about the rental                                                      | inform the client about the renter’s property                          |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* *`    | Real estate agent           | edit the details of the property rental                                             | update with new information from the client                            |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | search the properties by id, name or area etc                                       | filter properties according to my criteria                             |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | sort the listing according to my criteria                                           | obtain a filtered list to easily observe properties of the same type   |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `*`      | Real estate agent           | mark a property as sold                                                             | keep track on which houses are already sold                            |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `*`      | Real estate agent           | see the historical transactions                                                     | track my performance                                                   |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | add bids to my properties                                                           | keep track of my customers’ bids                                       |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | delete bids                                                                         | so that I can remove bids that are withdrawn by the bidders            |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Real estate agent           | view the current bids organised by property, sellers and buyers                     | keep track of the bids                                                 |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* *`    | Real estate agent           | edit bids                                                                           | so that I can remove bids that are withdrawn by the bidders            |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Busy real estate agent      | create meetings                                                                     | so that I can remove bids that are withdrawn by the bidders            |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Busy real estate agent      | view the list of meetings                                                           | so that I can remove bids that are withdrawn by the bidders            |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* * *`  | Busy real estate agent      | delete meetings                                                                     | so that I can remove bids that are withdrawn by the bidders            |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* *`    | Busy real estate agent      | schedule meetings such that it can warn me if there is any clashes in meetings      | so that I can remove bids that are withdrawn by the bidders            |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "| `* *`    | Busy real estate agent      | edit meeting details                                                                | ensure that meeting details are accurate in case of changes            |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "## Appendix C: Use cases"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "(For all use cases below, the **System** is the `PropertyFree` and the **Actor** is the `Real Estate Agent`, unless specified otherwise)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "munharsha"
        },
        "content": "**1. Use case: Delete a property form the list of properties**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "1. User requests to list of properties"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "2. PropertyFree shows a list of properties"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "3. User requests to delete a specific property in the list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "4. PropertyFree deletes the property  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    * 3a1. PropertyFree shows an error message.  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**2. Use case: Add a property**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "1. User requests to add a property"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "2. PropertyFree adds the property to the list  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 2a. The given property is of the wrong format."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    * 3a1. PropertyFree shows an error message.  "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**3. Use case: View a calendar of meetings**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "munharsha"
        },
        "content": "1. User requests for a list of meetings scheduled"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "2. PropertyFree shows a list of meetings scheduled.  "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 2a. The list of meetings is empty.  "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**4. Use case: Edit an Existing Meeting on the Calendar**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "1. User requests to edit a meeting on the calendar."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "2. PropertyFree shows the old meeting details and the new meeting details.  "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "   Use case ends"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 2a. There is no corresponding meeting existing to be edited.  "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**5. Use case: Add Bid to a Property**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "1. User requests to view the list of existing properties inside the property list."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "2. PropertyFree shows the current list of properties that are on the list."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "3. User requests to add bid to a specific property"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "4. PropertyFree shows the property updated with the addition of the new bid."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 2a. There are no properties in the list.  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 3a. There are no properties corresponding to what the user input is.  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "  "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**6. Use case: Edit Bid to a Property**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "1. User requests to list of bids"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "2. PropertyFree shows a list of bids"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "3. User requests to edit a specific bid in the list"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "4. PropertyFree edits the bid  "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 2a. The list is empty.  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    * 3a1. PropertyFree shows an error message.  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* 3b. The given format of message is wrong."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    * 3b1. PropertyFree shows an error message.  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "munharsha"
        },
        "content": "**7. Use case: Edit Current Meeting(to be implemented)**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "munharsha"
        },
        "content": "**8. Use case: Edit Details of a property(to be implemented)**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "munharsha"
        },
        "content": "**9. Use case: Edit type of meeting(to be implemented)**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* **Private Seller and Bidder details**: Contact details that are not meant to be publicly shared with others"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* **Public Property Details**: Description of the property that is meant to be shared with others"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* **Bid Details**: Description of the bid which is meant to be shared with others "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 107,
      "munharsha": 8,
      "-": 337
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "PropertyFree is adapted from AB3, which is a desktop application for managing property listing. Leveraging on Command "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Line Interface for those who are more comfortable with typing than with Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "The UserGuide is still in the midst of updating. However, you can find"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "the commands we are aspiring toward creating for Property Agents."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "2. Stay tuned to our release!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "# CS2103-W14-1: PropertyFree User Guide"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "**PropertyFree is a management system for property agents to track and manage their property listing "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "details.** It **a**llows users to easily take control of their bookkeeping matters inclusive of seller ask prices, "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "bidder buy prices, key details of properties and record keeping of past properties. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "PropertyFree also provides a "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "calendar for property agents to manage their schedule be it for property viewings or meeting with clients. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "It is optimized for CLI users so that the bookkeeping can be done faster by typing in commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "# Property Features"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "---"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Addition of Property Listing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Adds a property listing and its relevant details to the list of properties."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command:  `add -p`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `add -p n/PROPERTY_NAME s/SELLER_ID ab/ASKING_BID d/DESCRIPTION t/TYPE a/ADDRESS r/IS_RENTAL`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "add -p n/Sunrise s/C12345678 ab/100 d/Beautiful home t/landed a/99 Sunrise Street r/No"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Property"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: P23"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tName: Sunrise"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tSeller id: C12345678"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tAsking bid: $100"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tDescription: Beautiful home"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tType: Landed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tAddress: 99 Sunrise Street"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tRental: No"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been added!"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 IS_RENTAL can be the following format : Yes / yes / Y / y or No / no / N / n"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## **Addition of Seller**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Adds a seller to the seller list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `add -s`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `add -s n/SELLER_NAME p/PHONE_NUMBER a/ADDRESS`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "add -c n/Marcus Duigan p/12345678 a/99 Hill Street"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Client"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: S2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Name: Marcus Duigan"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Phone number: 12345678"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Address: 99 Hill Street"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been added!"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## **View List of Sellers**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Views the list of sellers with property listings that I manage."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `list -s`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `list -s`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "list -s"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Here are the list of sellers:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "C1 Marcus Duigan, 12345678, 99 Hill Street"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "C2 Kor Ming Soon, 12345679, 99 Mountain Street"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## **Deletion of Property Listing**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Deletes a property listing that the seller no longer wants to sell."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `delete -p`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `delete -p PROPERTY_ID`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "delete -p P23"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Property P23 has been deleted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## **Editing Property Listing**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Edits a property listing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `edit -p`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `edit -p PROPERTY_ID [n/PROPERTY_NAME] [s/SELLER_ID] "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "[ab/ASKING_BID] [d/DESCRIPTION] [t/TYPE] [r/IS_RENTAL]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "edit -p P23 ab/200"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 Only the parameter provided will be updated while all other details remain the same."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Property"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: P23"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tName: Sunrise"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tSeller id: S12345678"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tAsking bid: $200"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tDescription: Beautiful home"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tAddress: 99 Sunrise Street"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tType: Landed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\t\tRental: No"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been updated!"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## **View List of Property**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Shows a picture of a the current property in the list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `view -p`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `view -p`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "view -p"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "These are your current property listings!"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "1. Punggol Avenue 3 Block 46 #12-345"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "2. Chinatown Avenue 4 Block 44 #11-111"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## **Search for a Property**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Searches for a property according to the address, property id or description of the property."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `search -p`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `search -p [PROPERTY_ID] [n/PROPERTY_NAME] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "search -p Chinatown"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Search Results:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "1. Chinatown Avenue 4 Block 44 #11-111"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## **Sort Property List**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Sorts the property accordingly to how I want it: property name (alphabetically), asking bid, type of housing, deal type (rental or sale)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `sort-p`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    `sort-p name` "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    `sort-p bid` "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    `sort-p housing` "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    `sort-p deal` "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "sort -p name"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Your property list is sorted!"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "1. Chinatown Avenue 4 Block 44 #11-111 "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "2. Punggol Avenue 3 Block 46 #12-345"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "---"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "# Bid Features"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "---"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Adding to Bid to a Property"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Adds a bid to the property when there is a bidder for a specific property"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `add -b`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `add -b a/ADDRESS c/CLIENT_NAME a/BID_AMOUNT`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "add -b a/99 Sunrise Street c/Marcus Duigan a/150000"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Added bid to property: 99 Sunrise Street of $150,000 by Marcus Duigan"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## View List of Bidders for a Property"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Will display all bidders for a property"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `list -b`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `list -b n/PROPERTY_NAME`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "list -b n/99 Sunrise Street"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "List of bidders for 99 Sunrise Street"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "* Marcus Duigan- $150000"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "* Kor Ming Soon- $140330"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Deletion of Existing Bid"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Will display all bidders for a property"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `delete -b`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `delete -b a/ADDRESS c/CLIENT_NAME`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "delete -b a/99 Sunrise Street c/Marcus Duigan"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Removed bid made by Marcus Duigan for property: 99 Sunrise Street"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Editing Bid from a Property"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Will edit a bidder’s bid value for a specific property"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `edit -b`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `edit -b a/ADDRESS c/CLIENT_NAME ab/BID_AMOUNT`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "edit -b a/99 Sunrise Streetc/Marcus Duigan ab/140000"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Edited bid made by: Marcus Duigan "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Property: 99 Sunrise Street"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Amount: $140000"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "---"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "# Calendar Features"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "---"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "There are three types of meetings of which the agent will be able to add:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "1. View - For viewing of properties"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "2. Admin - For general admin meetings"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "3. Paperwork - For signing of paperwork related to the selling and buying of the house"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "---"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Add a View Meeting"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Creates a view meeting to be added to the schedule."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `add -m view`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `add -m view at/PROPERTY_ID by/TIME d/DESCRIPTION`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "add -m view at/4 by/12102020 1600 d/bring to condo"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 at/PROPERTY_ID indicates the id of the property listing."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 by/TIME indicates the time of the meeting."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Client Viewing Meeting: 12 Oct 2020 at 1600hrs"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: C2"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Name: Marcus Duigan"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Phone number: 12345678"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Address: 99 Hill Street"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Type: Seller"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Description: bring to condo"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been added!"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Add an Administrative Meeting"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Creates an admin meeting to be added to the schedule."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `add -m admin`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `add -m admin at/PROPERTY_ID by/TIME d/DESCRIPTION`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "add -m admin at/4 by/12102020 1600 d/talk about regulations"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 at/PROPERTY_ID indicates the id of the property listing."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 by/TIME indicates the time of the meeting."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Client Admin Meeting: 12 Oct 2020 at 1600hrs"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: C2"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Name: Marcus Duigan"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Phone number: 12345678"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Address: 99 Hill Street"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Type: Seller"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Description: talk about regulations"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been added!"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Add a Paperwork Meeting"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Creates a paperwork meeting to be added to the schedule."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `add -m admin`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `add -m paper at/PROPERTY_ID by/TIME d/DESCRIPTION`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "add -m paper at/4 by/12102020 1600 d/sign CPF paper"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 at/PROPERTY_ID indicates the id of the property listing."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 by/TIME indicates the time of the meeting."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Client Paperwork Meeting: 12 Oct 2020 at 1600hrs"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: C2"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Name: Marcus Duigan"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Phone number: 12345678"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Address: 99 Hill Street"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Type: Seller"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     Description: sign CPF paper"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been added!"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Deleting a Meeting"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Deletes a meeting from the calendar when a meeting is cancelled"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `delete -m`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `delete -m m/MEETING_ID`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "delete -m m/M4"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Meeting M4 has been deleted"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Editing an Existing Meeting"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Edits an existing meeting detail that is in the list."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `edit -m`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `edit -m m/MEETING_ID by/TIME t/TYPE_MEETING d/DESCRIPTION`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "edit -c m/4 by/12102020 1600 t/view d/show bedroom"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 at/PROPERTY_ID indicates the id of the property listing."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 by/TIME indicates the time of the meeting."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Client Paperwork Meeting: 12 Oct 2020 at 1600hrs"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: C2"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Name: Marcus Duigan"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Phone number: 12345678"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Address: 99 Hill Street"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Type: Seller"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Description: show bedroom"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been added!"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## Listing all Meeting Schedules"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Displays all meetings in the calendar list chronologically"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Command: `add -m admin`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "- Format: `add -m admin at/PROPERTY_ID by/TIME d/DESCRIPTION`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "add -m admin at/4 by/12102020 1600 d/talk about regulations"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 at/PROPERTY_ID indicates the id of the property listing."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "💡 by/TIME indicates the time of the meeting."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```java"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Client Admin Meeting: 12 Oct 2020 at 1600hrs"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Id: C2"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Name: Marcus Duigan"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Phone number: 12345678"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Address: 99 Hill Street"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Type: Seller"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Description: talk about regulations"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "Has been added!"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "```"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "To be completed. Stay tuned!"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 433,
      "-": 70
    }
  },
  {
    "path": "docs/team/christopher-lm.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "# Christopher Leo Mervyn- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Project: PropertyFree"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Overview:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "This document is a project portfolio that documents all contributions made to PropertyFree\u0027s development by Christopher."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Description of Project:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is a real estate management application meant for property agents to organize their properties and meetings more efficiently."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Other application can keep track of meetings and schedules but there are relatively few applications that help track properties "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and associate them with meetings with clients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "For our project we hope to make it more streamlined for agents to keep track of their property and have clear information about those properties"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and there clients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "##Developers of PropertyFree:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is developed by a group of second year Computer Science Students from the School of Computing, National"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "University if Singapore. This was developed for the team projects assignment fro the module CS2103 and is a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "brown-field project adapting from existing projects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## My Contributions to PropertyFree"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 65
    }
  },
  {
    "path": "docs/team/dianneloh9.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "# Dianne Loh Wen Hui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Project: PropertyFree"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Overview:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "This document is a project portfolio that documents all contributions made to PropertyFree\u0027s development by Dianne."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Description of Project:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is a real estate management application meant for property agents to organize their properties and meetings more efficiently."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Other application can keep track of meetings and schedules but there are relatively few applications that help track properties "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and associate them with meetings with clients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "For our project we hope to make it more streamlined for agents to keep track of their property and have clear information about those properties"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and there clients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "##Developers of PropertyFree:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is developed by a group of second year Computer Science Students from the School of Computing, National"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "University if Singapore. This was developed for the team projects assignment fro the module CS2103 and is a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "brown-field project adapting from existing projects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## My Contributions to PropertyFree"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 65
    }
  },
  {
    "path": "docs/team/kormingsoon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "# Kor Ming Soon- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Project: PropertyFree"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Overview:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "This document is a project portfolio that documents all contributions made to PropertyFree\u0027s development by Ming Soon."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Description of Project:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is a real estate management application meant for property agents to organize their properties and meetings more efficiently."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Other application can keep track of meetings and schedules but there are relatively few applications that help track properties "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and associate them with meetings with clients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "For our project we hope to make it more streamlined for agents to keep track of their property and have clear information about those properties"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and there clients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "##Developers of PropertyFree:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is developed by a group of second year Computer Science Students from the School of Computing, National"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "University if Singapore. This was developed for the team projects assignment fro the module CS2103 and is a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "brown-field project adapting from existing projects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## My Contributions to PropertyFree"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 65
    }
  },
  {
    "path": "docs/team/marcon2509.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "# Marcus Duigan Xing Yu - Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Project: PropertyFree"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Overview:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "This document is a project portfolio that documents all contributions made to PropertyFree\u0027s development by Marcus."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Description of Project:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is a real estate management application meant for property agents to organize their properties and meetings more efficiently."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Other application can keep track of meetings and schedules but there are relatively few applications that help track properties "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and associate them with meetings with clients."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "For our project we hope to make it more streamlined for agents to keep track of their property and have clear information about those properties"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and there clients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "##Developers of PropertyFree:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is developed by a group of second year Computer Science Students from the School of Computing, National"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "University if Singapore. This was developed for the team projects assignment fro the module CS2103 and is a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "brown-field project adapting from existing projects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## My Contributions to PropertyFree"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "#### Documenting the AboutUs page for all members"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "The AboutUs page provides and overall view on what each team member has done for the project and"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "is update and maintained by Marcus."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 76
    }
  },
  {
    "path": "docs/team/munharsha.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "# Munnamgi Harsha Vardhan Reddy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Project: PropertyFree"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Overview:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "This document is a project portfolio that documents all contributions made to PropertyFree\u0027s development by Harsha."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## Description of Project:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is a real estate management application meant for property agents to organize their properties and meetings more efficiently."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "Other application can keep track of meetings and schedules but there are relatively few applications that help track properties "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and associate them with meetings with clients."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "For our project we hope to make it more streamlined for agents to keep track of their property and have clear information about those properties"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "and there clients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "##Developers of PropertyFree:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "PropertyFree is developed by a group of second year Computer Science Students from the School of Computing, National"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "University if Singapore. This was developed for the team projects assignment fro the module CS2103 and is a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "brown-field project adapting from existing projects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "___"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "## My Contributions to PropertyFree"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.ReadOnlyPropertyBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.storage.BidBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.storage.JsonBidBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.bidderstorage.BidderAddressBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.bidderstorage.JsonBidderAddressBookStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.storage.calendar.JsonMeetingBookStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.storage.calendar.MeetingBookStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.sellerstorage.JsonSellerAddressBookStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.sellerstorage.SellerAddressBookStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        BidBookStorage bidBookStorage \u003d new JsonBidBookStorage(userPrefs.getBidBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        BidderAddressBookStorage bidderAddressBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonBidderAddressBookStorage(userPrefs.getBidderAddressBookFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        SellerAddressBookStorage sellerAddressBookStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonSellerAddressBookStorage(userPrefs.getSellerAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        MeetingBookStorage meetingBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new JsonMeetingBookStorage(userPrefs.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, bidBookStorage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidderAddressBookStorage, sellerAddressBookStorage, meetingBookStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        Optional\u003cReadOnlyBidBook\u003e bidBookOptional;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Optional\u003cReadOnlyBidderAddressBook\u003e bidderAddressBookOptional;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Optional\u003cReadOnlySellerAddressBook\u003e sellerAddressBookOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Optional\u003cReadOnlyPropertyBook\u003e propertyBookOptional;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Optional\u003cReadOnlyMeetingManager\u003e meetingBookOptional;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ReadOnlyBidderAddressBook initialBidderData;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ReadOnlySellerAddressBook initialSellerData;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ReadOnlyPropertyBook initialPropertyData;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        ReadOnlyBidBook initialBidData;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        ReadOnlyMeetingManager initialMeetingData;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            bidBookOptional \u003d storage.readBidBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            propertyBookOptional \u003d Optional.ofNullable(new PropertyBook());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            bidderAddressBookOptional \u003d storage.readBidderAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            sellerAddressBookOptional \u003d storage.readSellerAddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            meetingBookOptional \u003d storage.readMeetingBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                logger.info(\"AddressBook Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (!bidBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                logger.info(\"BidBook Data file not found. Will be starting with a sample BidBook\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            if (!bidderAddressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample bidderAddressBook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            if (!sellerAddressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample sellerAddressBook\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (!meetingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample meetingBook\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            initialBidData \u003d bidBookOptional.orElseGet(SampleDataUtil::getSampleBidBook);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialPropertyData \u003d new PropertyBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialBidderData \u003d bidderAddressBookOptional.orElseGet(SampleDataUtil::getSampleBidderAddressBook);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialSellerData \u003d sellerAddressBookOptional.orElseGet(SampleDataUtil::getSampleSellerAddressBook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            initialMeetingData \u003d meetingBookOptional.orElseGet(SampleDataUtil::getSampleMeetingBook);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            initialBidData \u003d new BidBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialPropertyData \u003d new PropertyBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialBidderData \u003d new BidderAddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialSellerData \u003d new SellerAddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            initialMeetingData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            initialBidData \u003d new BidBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialPropertyData \u003d new PropertyBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialBidderData \u003d new BidderAddressBook();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            initialSellerData \u003d new SellerAddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            initialMeetingData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialBidData, initialPropertyData,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                initialBidderData, initialSellerData, initialMeetingData);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 16,
      "kormingsoon": 40,
      "dianneloh9": 1,
      "munharsha": 18,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_DISPLAYED_INDEX \u003d \"The meeting index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IllegalArgumentException if the argument is not valid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 8,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws JsonProcessingException if there is a problem with Json processing"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 2,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.ReadOnlyPropertyBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Returns the BidBook."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @see seedu.address.model.Model#getBidBook()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    ReadOnlyBidBook getBidBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    ObservableList\u003cBid\u003e getFilteredBidList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meeting \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ReadOnlyMeetingManager getMeetingManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ObservableList\u003cCalendarMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BIDDER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the BidderAddressBook."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see seedu.address.model.Model#getBidderAddressBook()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ReadOnlyBidderAddressBook getBidderAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ObservableList\u003cBidder\u003e getFilteredBidderList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SELLER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the SellerAddressBook."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see seedu.address.model.Model#getSellerAddressBook()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ReadOnlySellerAddressBook getSellerAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ObservableList\u003cSeller\u003e getFilteredSellerList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns the PropertyBook."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @see seedu.address.model.Model#getPropertyBook()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    ReadOnlyPropertyBook getPropertyBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of properties */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    ObservableList\u003cProperty\u003e getFilteredPropertyList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 11,
      "kormingsoon": 37,
      "dianneloh9": 11,
      "munharsha": 9,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.ReadOnlyPropertyBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        logger.info(\"----------------[DOUBLE CHECK][\" + command + \"]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            storage.saveBidBook(model.getBidBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            storage.saveBidderAddressBook(model.getBidderAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            storage.saveSellerAddressBook(model.getSellerAddressBook());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            storage.saveMeetingBook(model.getMeetingManager());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ReadOnlyBidBook getBidBook() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return model.getBidBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ObservableList\u003cBid\u003e getFilteredBidList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return model.getFilteredBidList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BIDDER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ReadOnlyBidderAddressBook getBidderAddressBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return model.getBidderAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cBidder\u003e getFilteredBidderList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return model.getFilteredBidderList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getBidderAddressBookFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return model.getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SELLER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ReadOnlySellerAddressBook getSellerAddressBook() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return model.getSellerAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cSeller\u003e getFilteredSellerList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return model.getFilteredSellerList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getSellerAddressBookFilePath() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return model.getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Meeting \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ReadOnlyMeetingManager getMeetingManager() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return model.getMeetingManager();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ObservableList\u003cCalendarMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ReadOnlyPropertyBook getPropertyBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return model.getPropertyBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ObservableList\u003cProperty\u003e getFilteredPropertyList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return model.getFilteredPropertyList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 13,
      "kormingsoon": 44,
      "dianneloh9": 10,
      "munharsha": 16,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class AddBidCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-bid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New bid added: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a bid to the bid book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + PREFIX_PROPERTY_ID + \"PROPERTY ID \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + PREFIX_CLIENT + \"CLIENT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + PREFIX_MONEY + \"MONEY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + PREFIX_PROPERTY_ID + \"P12 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + PREFIX_CLIENT + \"B24 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            + PREFIX_MONEY + \"500000\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final Bid bid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public AddBidCommand(Bid bid) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bid \u003d bid;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        model.addBid(bid);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, bid));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                || (other instanceof AddBidCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u0026\u0026 bid.equals(((AddBidCommand) other).bid));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final Person toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_BIDDER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_PROPERTY_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Adds a meeting to the meeting book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class AddMeetingCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-meeting\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to the meeting book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_TYPE + \"TYPE\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_PROPERTY_ID + \"PROPERTY_ID\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_BIDDER_ID + \"BIDDER_ID\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_TIME + \"TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_TYPE + \"VIEW\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_PROPERTY_ID + \"P12 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_BIDDER_ID + \"B12 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_TIME + \"11-12-2021 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + PREFIX_CALENDAR_VENUE + \"2 ALBERT PARK\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private final CalendarMeeting toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public AddMeetingCommand(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.toAdd \u003d meeting;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        model.addMeeting(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || (other instanceof AddMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddMeetingCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Deletes a meeting identified using it\u0027s displayed index from the calendar book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class DeleteMeetingCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + \": Deletes the meeting identified by the index number used in the displayed meeting list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_DELETE_MEETING_SUCCESS \u003d \"Deleted Meeting: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public DeleteMeetingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        List\u003cCalendarMeeting\u003e lastShownList \u003d model.getFilteredMeetingList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        CalendarMeeting meetingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        model.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || (other instanceof DeleteMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteMeetingCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 3,
      "-": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BIDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class ListBidCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-bid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bids\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        model.updateFilteredBidList(PREDICATE_SHOW_ALL_BIDS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEETINGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Lists all meetings in the calendar book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class ListMeetingCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all meetings\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        model.updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Views the list of meetings in the calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class ViewCalendarCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewed all meetings\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/biddercommands/AddBidderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.logic.commands.biddercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class AddBidderCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-b\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a bidder to the bidder address book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_TAG + \"bidder \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New bidder added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This bidder already exists in the bidder address book\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final Bidder bidder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates an AddBidderCommand to add the specified {@code Bidder}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public AddBidderCommand(Bidder bidder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.bidder \u003d bidder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (model.hasPerson(bidder)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        model.addBidder(bidder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, bidder));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || (other instanceof AddBidderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 bidder.equals(((AddBidderCommand) other).bidder));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/biddercommands/ListBidderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.logic.commands.biddercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BIDDERS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class ListBidderCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-b\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bidder\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        model.updateFilteredBidderList(PREDICATE_SHOW_ALL_BIDDERS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/property/AddPropertyCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.logic.commands.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_ASKING_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_IS_RENTAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_SELLER_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Adds a property to the property book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class AddPropertyCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-p\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a property to the property book. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + PREFIX_PROPERTY_NAME + \"PROPERTY NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + PREFIX_PROPERTY_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + PREFIX_PROPERTY_SELLER_ID + \"SELLER ID \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + PREFIX_PROPERTY_ASKING_PRICE + \"ASKING PRICE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + PREFIX_PROPERTY_TYPE + \"PROPERTY TYPE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + PREFIX_PROPERTY_IS_RENTAL + \"IS RENTAL?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New property added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROPERTY \u003d \"This property already exists in the property book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final Property toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Creates an AddPropertyCommand to add the specified {@code Property}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public AddPropertyCommand(Property property) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(property);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        toAdd \u003d property;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (model.hasProperty(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROPERTY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        model.addProperty(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (other instanceof AddPropertyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPropertyCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sellercommands/AddSellerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.logic.commands.sellercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class AddSellerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a seller to the bidder address book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            + PREFIX_TAG + \"seller \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New seller added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This seller already exists in the bidder address book\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final Seller seller;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates an AddSellerCommand to add the specified {@code Seller}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public AddSellerCommand(Seller seller) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.seller \u003d seller;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (model.hasPerson(seller)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        model.addSeller(seller);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, seller));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || (other instanceof AddSellerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 seller.equals(((AddSellerCommand) other).seller));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sellercommands/ListSellerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.logic.commands.sellercommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SELLERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class ListSellerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all sellers\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        model.updateFilteredSellerList(PREDICATE_SHOW_ALL_SELLERS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBidCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.logic.commands.AddBidCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class AddBidCommandParser implements Parser\u003cAddBidCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Parses input from user to create a addBid command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param args the input from the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return AddBidCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException If the command is in the wrong format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public AddBidCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PROPERTY_ID, PREFIX_CLIENT, PREFIX_MONEY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PROPERTY_ID, PREFIX_CLIENT, PREFIX_MONEY)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBidCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String propertyId \u003d ParserUtil.parsePropertyId(argMultimap.getValue(PREFIX_PROPERTY_ID).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        String bidderId \u003d ParserUtil.parseBidderId(argMultimap.getValue(PREFIX_CLIENT).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        double bidAmount \u003d ParserUtil.parseBidAmount(argMultimap.getValue(PREFIX_MONEY).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        Bid bid \u003d new Bid(propertyId, bidderId, bidAmount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return new AddBidCommand(bid);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 42,
      "dianneloh9": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Person person \u003d new Person(name, phone, tagList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 4,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_BIDDER_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_PROPERTY_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALENDAR_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.AddMeetingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarAdmin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarBidderId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarPaperwork;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarPropertyId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarVenue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarViewing;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "* Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class AddMeetingCommandParser implements Parser\u003cAddMeetingCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    * Parses the given {@code String} of arguments in the context of the AddMeetingCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public AddMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALENDAR_TYPE, PREFIX_CALENDAR_BIDDER_ID,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                        PREFIX_CALENDAR_PROPERTY_ID, PREFIX_CALENDAR_VENUE, PREFIX_CALENDAR_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALENDAR_BIDDER_ID, PREFIX_CALENDAR_PROPERTY_ID)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        CalendarVenue venue \u003d ParserUtil.parseCalendarVenue(argMultimap.getValue(PREFIX_CALENDAR_VENUE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        CalendarTime time \u003d ParserUtil.parseCalendarTime(argMultimap.getValue(PREFIX_CALENDAR_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        CalendarPropertyId propertyId \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                ParserUtil.parseCalendarPropertyId(argMultimap.getValue(PREFIX_CALENDAR_PROPERTY_ID).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        CalendarBidderId bidderId \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                ParserUtil.parseCalendarBidderId(argMultimap.getValue(PREFIX_CALENDAR_BIDDER_ID).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String type \u003d ParserUtil.parseCalendarType(argMultimap.getValue(PREFIX_CALENDAR_TYPE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (type.contains(\"p\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            CalendarMeeting meeting \u003d new CalendarPaperwork(bidderId, propertyId,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                    time, venue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new AddMeetingCommand(meeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } else if (type.contains(\"a\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            CalendarMeeting meeting \u003d new CalendarAdmin(bidderId, propertyId,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                    time, venue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new AddMeetingCommand(meeting);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } else if (type.contains(\"v\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            CalendarMeeting meeting \u003d new CalendarViewing(bidderId, propertyId,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                    time, venue);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new AddMeetingCommand(meeting);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.logic.commands.AddBidCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.AddMeetingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.logic.commands.ListBidCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.biddercommands.AddBidderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.biddercommands.ListBidderCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.property.AddPropertyCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.sellercommands.AddSellerCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.sellercommands.ListSellerCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.bidderparser.AddBidderCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.property.AddPropertyCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.sellerparser.AddSellerCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        case ListBidCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return new ListBidCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        case AddBidCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return new AddBidCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        case AddMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new AddMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        case DeleteMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new DeleteMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case AddPropertyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return new AddPropertyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        case AddBidderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return new AddBidderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        case AddSellerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return new AddSellerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        case ListSellerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return new ListSellerCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        case ListBidderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return new ListBidderCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 8,
      "kormingsoon": 20,
      "dianneloh9": 3,
      "Christopher-LM": 8,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalendarBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class CalendarBookParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY_ID \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final Prefix PREFIX_CLIENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final Prefix PREFIX_MONEY \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /* Calendar Prefix definitions */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_PROPERTY_ID \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_BIDDER_ID \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR_TYPE \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /* Property Prefix definitions */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY_SELLER_ID \u003d new Prefix(\"sID/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY_ASKING_PRICE \u003d new Prefix(\"ap/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY_IS_RENTAL \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 3,
      "dianneloh9": 7,
      "Christopher-LM": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteMeetingCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.DeleteMeetingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class DeleteMeetingCommandParser implements Parser\u003cDeleteMeetingCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public DeleteMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return new DeleteMeetingCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 2,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarBidderId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarPropertyId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.CalendarVenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if there is an error when parsing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * trims off any excess white spaces for a given string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param propertyId string to trim"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return a string that has no white spaces on the sides"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException If the property id is in the wrong format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static String parsePropertyId(String propertyId) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(propertyId);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedPropertyId \u003d propertyId.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return trimmedPropertyId;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * trims off any excess white spaces for a given string"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param bidderId string to trim"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return a string that has no white spaces on the sides"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException If the bidder id is in the wrong format."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static String parseBidderId(String bidderId) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(bidderId);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedBidderId \u003d bidderId.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return trimmedBidderId;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *  trims off any excess white spaces for a given string"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param bidAmount string to trim"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return a string that has no white spaces on the sides"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException If the bidAmount is in the wrong format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static double parseBidAmount(String bidAmount) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(bidAmount);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedBidAmount \u003d bidAmount.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        double numericalBidAmount \u003d Double.parseDouble(trimmedBidAmount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return numericalBidAmount;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses a {@code String venue} into a {@code venue}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the given {@code venue} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static CalendarVenue parseCalendarVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedVenue \u003d venue.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return new CalendarVenue(trimmedVenue);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static CalendarTime parseCalendarTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return new CalendarTime(trimmedTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static CalendarPropertyId parseCalendarPropertyId(String propertyId) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(propertyId);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedpropertyId \u003d propertyId.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return new CalendarPropertyId(trimmedpropertyId);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static CalendarBidderId parseCalendarBidderId(String bidderId) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(bidderId);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedbidderId \u003d bidderId.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return new CalendarBidderId(trimmedbidderId);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static String parseCalendarType(String type) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return trimmedType;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 5,
      "Christopher-LM": 99,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCalendarParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.commands.ViewCalendarCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Parses input arguments and creates a new ViewCalendarCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class ViewCalendarParser implements Parser\u003cViewCalendarCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Parses the given user input and returns a ViewCalendarCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param userInput user arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return ViewCalendarCommand to be executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public ViewCalendarCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/bidderparser/AddBidderCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.logic.parser.bidderparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.biddercommands.AddBidderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class AddBidderCommandParser implements Parser\u003cAddBidderCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String bidderIdDefaultPrefix \u003d \"B\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final int bidderIdDefaultNumber \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String bidderTag \u003d \"bidder\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public AddBidderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tagList.add(new Tag(bidderTag));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Id id \u003d new Id(bidderIdDefaultPrefix, bidderIdDefaultNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder bidder \u003d new Bidder(name, phone, tagList, id);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new AddBidderCommand(bidder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/property/AddPropertyCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.logic.parser.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_ASKING_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_IS_RENTAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_SELLER_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.commands.property.AddPropertyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.parser.util.PropertyParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.price.Price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.IsRental;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.PropertyName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.PropertyType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Parses input arguments and creates a new AddPropertyCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class AddPropertyCommandParser implements Parser\u003cAddPropertyCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPropertyCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * and returns an AddPropertyCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public AddPropertyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PROPERTY_NAME, PREFIX_PROPERTY_ADDRESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                PREFIX_PROPERTY_SELLER_ID, PREFIX_PROPERTY_ASKING_PRICE, PREFIX_PROPERTY_TYPE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                PREFIX_PROPERTY_IS_RENTAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PROPERTY_NAME, PREFIX_PROPERTY_ADDRESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                PREFIX_PROPERTY_SELLER_ID, PREFIX_PROPERTY_ASKING_PRICE, PREFIX_PROPERTY_TYPE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                PREFIX_PROPERTY_IS_RENTAL)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPropertyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        PropertyName propertyName \u003d PropertyParserUtil.parsePropertyName(argMultimap.getValue(PREFIX_PROPERTY_NAME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Address address \u003d PropertyParserUtil.parseAddress(argMultimap.getValue(PREFIX_PROPERTY_ADDRESS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Id sellerId \u003d PropertyParserUtil.parseSellerId(argMultimap.getValue(PREFIX_PROPERTY_SELLER_ID)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Price askingPrice \u003d PropertyParserUtil.parseAskingPrice(argMultimap.getValue(PREFIX_PROPERTY_ASKING_PRICE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        PropertyType propertyType \u003d PropertyParserUtil.parsePropertyType(argMultimap.getValue(PREFIX_PROPERTY_TYPE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        IsRental isRental \u003d PropertyParserUtil.parseIsRental(argMultimap.getValue(PREFIX_PROPERTY_IS_RENTAL)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Property property \u003d new Property(propertyName, sellerId, address, askingPrice, propertyType,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                isRental, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new AddPropertyCommand(property);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sellerparser/AddSellerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.logic.parser.sellerparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.commands.sellercommands.AddSellerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class AddSellerCommandParser implements Parser\u003cAddSellerCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String sellerIdDefaultPrefix \u003d \"S\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final int sellerIdDefaultNumber \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String sellerTag \u003d \"seller\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public AddSellerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tagList.add(new Tag(sellerTag));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Id id \u003d new Id(sellerIdDefaultPrefix, sellerIdDefaultNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller seller \u003d new Seller(name, phone, tagList, id);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new AddSellerCommand(seller);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/PropertyParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.price.Price;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.IsRental;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.PropertyName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.PropertyType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Contains utility methods used for parsing strings in the various *PropertyCommandParser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Parses a {@code String name} into a {@code PropertyName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static PropertyName parsePropertyName(String name) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!PropertyName.isValidPropertyName(trimmedName)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new ParseException(PropertyName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new PropertyName(trimmedName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Parses a {@code String sellerId} into an {@code Id}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if the given {@code sellerId} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static Id parseSellerId(String sellerId) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(sellerId);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String trimmedSellerId \u003d sellerId.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!Id.isValidId(sellerId)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new ParseException(Id.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new Id(trimmedSellerId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Parses a {@code String askingPrice} into an {@code Price}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if the given {@code askingPrice} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static Price parseAskingPrice(String askingPrice) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(askingPrice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String trimmedAskingPrice \u003d askingPrice.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            double doublePrice \u003d Double.parseDouble(trimmedAskingPrice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (!Price.isValidPrice(doublePrice)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return new Price(doublePrice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Parses a {@code String type} into a {@code PropertyType}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static PropertyType parsePropertyType(String type) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!PropertyType.isValidPropertyType(trimmedType)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new ParseException(PropertyType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new PropertyType(trimmedType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Parses a {@code String isRental} into a IsRental."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws ParseException if the given {@code isRental} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static IsRental parseIsRental(String isRental) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(isRental);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String trimmedIsRental \u003d isRental.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!IsRental.isValidIsRental(trimmedIsRental)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new ParseException(IsRental.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new IsRental(trimmedIsRental);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BidBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.UniqueBidList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class BidBook implements ReadOnlyBidBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final UniqueBidList listOfBids;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        listOfBids \u003d new UniqueBidList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public BidBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Constructor to create a BidBook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param toBeCopied item to be contained in teh BidBook Object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public BidBook(ReadOnlyBidBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void setBids(List\u003cBid\u003e bids) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.listOfBids.setBids(bids);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void addBid(Bid b) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        listOfBids.add(b);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * checks if the listOfBods contains the specified bid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param bid bid to be compared to the list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return boolean value if the bid is in the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean hasBid(Bid bid) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(bid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return listOfBids.contains(bid);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * resets the data inside the bidBook bye setting it as the new bidBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param newData data to overwrite the old data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void resetData(ReadOnlyBidBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        setBids(newData.getBidList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return listOfBids.asUnmodifiableObservableBidList().size() + \" bids\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ObservableList\u003cBid\u003e getBidList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return listOfBids.asUnmodifiableObservableBidList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                || (other instanceof BidBook // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u0026\u0026 listOfBids.equals(((BidBook) other).listOfBids));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return listOfBids.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BidderModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface BidderModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Predicate\u003cBidder\u003e PREDICATE_SHOW_ALL_BIDDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the user prefs\u0027 Bidder address book file path."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the user prefs\u0027 Bidder address book file path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void setBidderAddressBookFilePath(Path bidderAddressBookFilePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void setBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ReadOnlyBidderAddressBook getBidderAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if a bidder with the same identity as {@code bidder} exists in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    boolean hasBidder(Bidder bidder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Deletes the given bidder."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The bidder must exist in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void deleteBidder(Bidder target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Adds the given bidder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code bidder} must not already exist in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void addBidder(Bidder bidder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the given bidder {@code target} with {@code editedBidder}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The bidder identity of {@code editedBidder} must not be the same as another existing bidder in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void setBidder(Bidder target, Bidder editedBidder);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** Returns an unmodifiable view of the filtered bidder list */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ObservableList\u003cBidder\u003e getFilteredBidderList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Updates the filter of the filtered bidder list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void updateFilteredBidderList(Predicate\u003cBidder\u003e predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.UniqueMeetingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class MeetingBook implements ReadOnlyMeetingManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final UniqueMeetingList meetings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public MeetingBook() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Creates a Meeting Book using the Meetings in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public MeetingBook(ReadOnlyMeetingManager toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Replaces the contents of the meeting list with {@code meetings}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setMeetings(List\u003cCalendarMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.meetings.setMeetings(meetings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Resets the existing data of this {@code MeetingBook} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void resetData(ReadOnlyMeetingManager newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        setMeetings(newData.getMeetingList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    //// property-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns true if a meeting with the same identity as {@code meeting} exists in the meeting book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean hasMeetings(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Adds a meeting to the meeting book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The meeting must not already exist in the meeting book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void addMeeting(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetings.add(meeting);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Replaces the given meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * {@code target} must exist in the meeting book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as another existing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * meeting in the meeting book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setMeeting(CalendarMeeting target, CalendarMeeting editedMeeting) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(editedMeeting);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetings.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Removes {@code key} from this {@code MeetingBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * {@code key} must exist in the meeting book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void removeMeeting(CalendarMeeting key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetings.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetings.asUnmodifiableObservableList().size() + \" meetings\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ObservableList\u003cCalendarMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                || (other instanceof MeetingBook // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 meetings.equals(((MeetingBook) other).meetings));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetings.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 3,
      "munharsha": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface Model extends BidderModel, SellerModel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Predicate\u003cBid\u003e PREDICATE_SHOW_ALL_BIDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    Predicate\u003cCalendarMeeting\u003e PREDICATE_SHOW_ALL_MEETINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    Predicate\u003cProperty\u003e PREDICATE_SHOW_ALL_PROPERTIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BidBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the BidBook */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    ReadOnlyBidBook getBidBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    ObservableList\u003cBid\u003e getFilteredBidList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    void updateFilteredBidList(Predicate\u003cBid\u003e predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    void addBid(Bid bid);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Replaces property book data with the data in {@code propertyBook}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    void setPropertyBook(ReadOnlyPropertyBook propertyBook);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the property book. */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    ReadOnlyPropertyBook getPropertyBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if a property with the same identity as {@code property} exists in the property book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    boolean hasProperty(Property property);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Deletes the given property."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The property must exist in the property book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    void deleteProperty(Property target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Adds the given property."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code property} must not already exist in the property book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    void addProperty(Property property);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Replaces the given property {@code target} with {@code editedProperty}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code target} must exist in the property book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The property identity of {@code editedProperty} must not be the same as another existing property in the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * property book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    void setProperty(Property target, Property editedProperty);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns an unmodifiable view of the filtered property list */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    ObservableList\u003cProperty\u003e getFilteredPropertyList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Updates the filter of the filtered property list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    void updateFilteredPropertyList(Predicate\u003cProperty\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModelManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    void setMeetingManager(ReadOnlyMeetingManager meetingManager);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /** Returns the Meeting manager */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ReadOnlyMeetingManager getMeetingManager();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    boolean hasMeeting(CalendarMeeting meeting);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    void deleteMeeting(CalendarMeeting target);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    void addMeeting(CalendarMeeting meeting);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    void setMeeting(CalendarMeeting target, CalendarMeeting editedMeeting);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ObservableList\u003cCalendarMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    void updateFilteredMeetingList(Predicate\u003cCalendarMeeting\u003e predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 11,
      "kormingsoon": 1,
      "dianneloh9": 55,
      "munharsha": 46,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class ModelManager implements Model, SellerModel, BidderModel {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final BidBook bidBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final BidderAddressBook bidderAddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final SellerAddressBook sellerAddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PropertyBook propertyBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final MeetingBook meetingBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final FilteredList\u003cSeller\u003e filteredSellers;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final FilteredList\u003cBidder\u003e filteredBidders;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final FilteredList\u003cBid\u003e filteredBids;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final FilteredList\u003cCalendarMeeting\u003e filteredMeetings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final FilteredList\u003cProperty\u003e filteredProperties;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs, bidBook, meetingManager and propertyBook."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyBidBook bidBook,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        ReadOnlyPropertyBook propertyBook, ReadOnlyBidderAddressBook bidderAddressBook,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        ReadOnlySellerAddressBook sellerAddressBook, ReadOnlyMeetingManager meetingManager) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, bidBook, propertyBook,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidderAddressBook, sellerAddressBook, meetingManager);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \" and user prefs \" + userPrefs + \" and bid book: \" + bidBook"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + \" and property book: \" + propertyBook"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + \"\\n bidderAddressBook: \" + bidderAddressBook"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"\\n sellerAddressBook: \" + sellerAddressBook"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                + \"\\n and meeting manager\" + meetingManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.bidderAddressBook \u003d new BidderAddressBook(bidderAddressBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.sellerAddressBook \u003d new SellerAddressBook(sellerAddressBook);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bidBook \u003d new BidBook(bidBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.meetingBook \u003d new MeetingBook(meetingManager);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.propertyBook \u003d new PropertyBook(propertyBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        filteredBidders \u003d new FilteredList\u003c\u003e(this.bidderAddressBook.getBidderList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        filteredSellers \u003d new FilteredList\u003c\u003e(this.sellerAddressBook.getSellerList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        filteredBids \u003d new FilteredList\u003c\u003e(this.bidBook.getBidList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        filteredMeetings \u003d new FilteredList\u003c\u003e(this.meetingBook.getMeetingList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        filteredProperties \u003d new FilteredList\u003c\u003e(this.propertyBook.getPropertyList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructor for the ModelManager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this(new AddressBook(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new BidBook(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new PropertyBook(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new BidderAddressBook(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new SellerAddressBook(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new MeetingBook());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ReadOnlyBidBook getBidBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return bidBook;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ObservableList\u003cBid\u003e getFilteredBidList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return filteredBids;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void updateFilteredBidList(Predicate\u003cBid\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        filteredBids.setPredicate(predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void addBid(Bid bid) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidBook.addBid(bid);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        updateFilteredBidList(PREDICATE_SHOW_ALL_BIDS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setPropertyBook(ReadOnlyPropertyBook propertyBook) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.propertyBook.resetData(propertyBook);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ReadOnlyPropertyBook getPropertyBook() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return propertyBook;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean hasProperty(Property property) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(property);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return propertyBook.hasProperty(property);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void deleteProperty(Property target) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyBook.removeProperty(target);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void addProperty(Property property) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyBook.addProperty(property);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        updateFilteredPropertyList(PREDICATE_SHOW_ALL_PROPERTIES);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setProperty(Property target, Property editedProperty) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireAllNonNull(target, editedProperty);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyBook.setProperty(target, editedProperty);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Property List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Property} backed by the internal list of"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code versionedPropertyBook}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ObservableList\u003cProperty\u003e getFilteredPropertyList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return filteredProperties;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void updateFilteredPropertyList(Predicate\u003cProperty\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        filteredProperties.setPredicate(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setMeetingManager(ReadOnlyMeetingManager meetingManager) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.meetingBook.resetData(meetingManager);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ReadOnlyMeetingManager getMeetingManager() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean hasMeeting(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetingBook.hasMeetings(meeting);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void deleteMeeting(CalendarMeeting target) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetingBook.removeMeeting(target);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void addMeeting(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setMeeting(CalendarMeeting target, CalendarMeeting editedMeeting) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetingBook.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public ObservableList\u003cCalendarMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return filteredMeetings;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void updateFilteredMeetingList(Predicate\u003cCalendarMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        filteredMeetings.setPredicate(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bidder \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.bidderAddressBook.resetData(bidderAddressBook);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ReadOnlyBidderAddressBook getBidderAddressBook() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidderAddressBook;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean hasBidder(Bidder bidder) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(bidder);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidderAddressBook.hasBidder(bidder);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void deleteBidder(Bidder target) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderAddressBook.removeBidder(target);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void addBidder(Bidder bidder) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderAddressBook.addBidder(bidder);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        updateFilteredBidderList(PREDICATE_SHOW_ALL_BIDDERS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder(Bidder target, Bidder editedBidder) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(target, editedBidder);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderAddressBook.setBidder(target, editedBidder);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getBidderAddressBookFilePath() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return userPrefs.getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidderAddressBookFilePath(Path bidderAddressBookFilePath) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(bidderAddressBookFilePath);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        userPrefs.setAddressBookFilePath(bidderAddressBookFilePath);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cBidder\u003e getFilteredBidderList() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return filteredBidders;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void updateFilteredBidderList(Predicate\u003cBidder\u003e predicate) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        filteredBidders.setPredicate(predicate);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Seller \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.sellerAddressBook.resetData(sellerAddressBook);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ReadOnlySellerAddressBook getSellerAddressBook() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellerAddressBook;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean hasSeller(Seller seller) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(seller);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellerAddressBook.hasSeller(seller);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void deleteSeller(Seller target) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerAddressBook.removeSeller(target);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void addSeller(Seller seller) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerAddressBook.addSeller(seller);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        updateFilteredSellerList(PREDICATE_SHOW_ALL_SELLERS);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller(Seller target, Seller editedSeller) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(target, editedSeller);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerAddressBook.setSeller(target, editedSeller);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getSellerAddressBookFilePath() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return userPrefs.getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellerAddressBookFilePath(Path sellerAddressBookFilePath) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(sellerAddressBookFilePath);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        userPrefs.setAddressBookFilePath(sellerAddressBookFilePath);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cSeller\u003e getFilteredSellerList() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return filteredSellers;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void updateFilteredSellerList(Predicate\u003cSeller\u003e predicate) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        filteredSellers.setPredicate(predicate);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EQUALS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 meetingBook.equals(other.meetingBook)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 filteredMeetings.equals(other.filteredMeetings)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 propertyBook.equals(other.propertyBook)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 filteredProperties.equals(other.filteredProperties);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 28,
      "kormingsoon": 144,
      "dianneloh9": 55,
      "munharsha": 74,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PropertyBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.UniquePropertyList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Wraps all data at the property-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Duplicates are not allowed (by .isSameProperty comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyBook implements ReadOnlyPropertyBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final UniquePropertyList properties;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        properties \u003d new UniquePropertyList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Creates a PropertyBook using the Properties in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBook(ReadOnlyPropertyBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Replaces the contents of the property list with {@code properties}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code properties} must not contain duplicate properties."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setProperties(List\u003cProperty\u003e properties) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.properties.setProperties(properties);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Resets the existing data of this {@code PropertyBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void resetData(ReadOnlyPropertyBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        setProperties(newData.getPropertyList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //// property-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if a property with the same identity as {@code property} exists in the property book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean hasProperty(Property property) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(property);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return properties.contains(property);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Adds a property to the property book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The property must not already exist in the property book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void addProperty(Property p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        properties.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Replaces the given property {@code target} in the list with {@code editedProperty}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code target} must exist in the property book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The property identity of {@code editedProperty} must not be the same as another existing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * property in the property book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setProperty(Property target, Property editedProperty) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(editedProperty);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        properties.setProperty(target, editedProperty);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Removes {@code key} from this {@code PropertyBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code key} must exist in the property book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void removeProperty(Property key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        properties.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return properties.asUnmodifiableObservableList().size() + \" properties\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ObservableList\u003cProperty\u003e getPropertyList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return properties.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (other instanceof PropertyBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 properties.equals(((PropertyBook) other).properties));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return properties.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBidBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public interface ReadOnlyBidBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    ObservableList\u003cBid\u003e getBidList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyMeetingManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Unmodifiable view of a calendar of meeting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public interface ReadOnlyMeetingManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns an unmodifiable view of the meeting list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * This list will not contain any duplicate meetings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    ObservableList\u003cCalendarMeeting\u003e getMeetingList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 3,
      "munharsha": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPropertyBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Unmodifiable view of an property book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public interface ReadOnlyPropertyBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns an unmodifiable view of the properties list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * This list will not contain any duplicate properties."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    ObservableList\u003cProperty\u003e getPropertyList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Path getBidBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 2,
      "kormingsoon": 4,
      "munharsha": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SellerModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface SellerModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Predicate\u003cSeller\u003e PREDICATE_SHOW_ALL_SELLERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    * Returns the user prefs\u0027 Seller address book file path."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the user prefs\u0027 Seller address book file path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void setSellerAddressBookFilePath(Path sellerAddressBookFilePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void setSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ReadOnlySellerAddressBook getSellerAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if a seller with the same identity as {@code seller} exists in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    boolean hasSeller(Seller seller);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Deletes the given seller."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The seller must exist in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void deleteSeller(Seller target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Adds the given seller."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code seller} must not already exist in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void addSeller(Seller seller);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the given seller {@code target} with {@code editedSeller}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The seller identity of {@code editedSeller} must not be the same as another existing seller in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void setSeller(Seller target, Seller editedSeller);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /** Returns an unmodifiable view of the filtered seller list */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ObservableList\u003cSeller\u003e getFilteredSellerList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Updates the filter of the filtered seller list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void updateFilteredSellerList(Predicate\u003cSeller\u003e predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Path bidBookFilePath \u003d Paths.get(\"data\" , \"bidbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Path bidderAddressBookFilePath \u003d Paths.get(\"data\" , \"bidderaddressbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Path sellerAddressBookFilePath \u003d Paths.get(\"data\" , \"selleraddressbook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Path meetingBookFilePath \u003d Paths.get(\"data\" , \"meetingbook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        setBidBookFilePath(newUserPrefs.getBidBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        setBidderAddressBookFilePath(newUserPrefs.getBidderAddressBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        setSellerAddressBookFilePath(newUserPrefs.getSellerAddressBookFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        setMeetingBookFilePath(newUserPrefs.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Path getBidBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return bidBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getBidderAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidderAddressBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getSellerAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellerAddressBookFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetingBookFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d bid \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void setBidBookFilePath(Path bidBookFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(bidBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bidBookFilePath \u003d bidBookFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d bidder \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidderAddressBookFilePath(Path bidderAddressBookFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(bidderAddressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.bidderAddressBookFilePath \u003d bidderAddressBookFilePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d seller \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellerAddressBookFilePath(Path sellerAddressBookFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(sellerAddressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.sellerAddressBookFilePath \u003d sellerAddressBookFilePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d property \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d meeting \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(meetingBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.meetingBookFilePath \u003d meetingBookFilePath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath) \u0026\u0026 bidBookFilePath.equals(o.bidBookFilePath)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 meetingBookFilePath.equals(o.meetingBookFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, bidBookFilePath,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidderAddressBookFilePath, sellerAddressBookFilePath, meetingBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        sb.append(\"\\nLocal addressBook data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        sb.append(\"\\nLocal bidBook data file location : \" + bidBookFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sb.append(\"\\nLocal Bidder data file location : \" + bidderAddressBookFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sb.append(\"\\nLocal Seller data file location : \" + sellerAddressBookFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        sb.append(\"\\nLocal Meeting data file location : \" + meetingBookFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 14,
      "kormingsoon": 31,
      "munharsha": 15,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bid/Bid.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.model.bid;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class Bid {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private String propertyId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private String bidderId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private double bidAmount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Constructor for Bid Object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param propertyId string id of the property to bid for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param bidderId string id of the bidder wanting the property"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param bidAmount double value of the amount the bidder wants the property for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Bid(String propertyId, String bidderId, double bidAmount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.propertyId \u003d propertyId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bidderId \u003d bidderId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bidAmount \u003d bidAmount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String getPropertyId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return propertyId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String getBidderId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return bidderId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public double getBidAmount() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return bidAmount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean isValidPropertyId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return false; //will check against propertyList to see if propertyId exists"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean isValidBidderId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return false; //will check against bidderList to see if propertyId exists"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * compares one bid with another bid to see if they are the same in content"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param otherBid bid to compare to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return boolean value if they are the same or not"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean isSameBid(Bid otherBid) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (otherBid \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return otherBid !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u0026\u0026 otherBid.getPropertyId().equals(getPropertyId())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u0026\u0026 (otherBid.getBidderId().equals(getBidderId()))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u0026\u0026 ((otherBid.getBidAmount() \u003d\u003d getBidAmount())); // added this in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return Objects.hash(propertyId, bidderId, bidAmount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        builder.append(\"Added bid of $\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                .append(getBidAmount())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                .append(\" by \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                .append(getBidderId())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                .append(\" to property: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                .append(getPropertyId());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bid/UniqueBidList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.model.bid;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class UniqueBidList implements Iterable\u003cBid\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final ObservableList\u003cBid\u003e internalBidList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final ObservableList\u003cBid\u003e internalUnmodifiableBidList \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalBidList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * adds a bid to the internal list containing all the bids"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param toAdd the bid to add to the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void add(Bid toAdd) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        internalBidList.add(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * checks if their is any identical bids"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param toCheck bid object to compare"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return boolean value if the bid is contained in the list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean contains(Bid toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return internalBidList.stream().anyMatch(toCheck::isSameBid);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void setBids(List\u003cBid\u003e bids) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireAllNonNull(bids);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        internalBidList.setAll(bids);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public ObservableList\u003cBid\u003e asUnmodifiableObservableBidList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return internalUnmodifiableBidList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Iterator\u003cBid\u003e iterator() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return internalBidList.iterator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                || (other instanceof UniqueBidList // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u0026\u0026 internalBidList.equals(((UniqueBidList) other).internalBidList));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return internalBidList.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bidderaddressbook/BidderAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.bidderaddressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.UniqueBidderList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class BidderAddressBook implements ReadOnlyBidderAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final UniqueBidderList bidders;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidders \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderAddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates an BidderAddressBook using the Bidders in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderAddressBook(ReadOnlyBidderAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the contents of the bidders list with {@code bidders}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code bidders} must not contain duplicate persons."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidders(List\u003cBidder\u003e bidders) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.bidders.setBidders(bidders);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Resets the existing data of this {@code BidderAddressBook} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void resetData(ReadOnlyBidderAddressBook newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        setBidders(newData.getBidderList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if a Bidder with the same identity as {@code Bidder} exists in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean hasBidder(Bidder bidder) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(bidder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidders.contains(bidder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Adds a bidder to the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void addBidder(Bidder p) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidders.add(p);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder(Bidder target, Bidder editedBidder) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(editedBidder);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidders.setBidder(target, editedBidder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Removes {@code key} from this {@code BidderAddressBook}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void removeBidder(Bidder key) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidders.remove(key);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidders.asUnmodifiableObservableList().size() + \" bidders\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cBidder\u003e getBidderList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || (other instanceof BidderAddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 bidders.equals(((BidderAddressBook) other).bidders));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidders.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bidderaddressbook/ReadOnlyBidderAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.bidderaddressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface ReadOnlyBidderAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ObservableList\u003cBidder\u003e getBidderList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarAdmin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarAdmin extends CalendarMeeting {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String PREFIX \u003d \"a\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *  Constructor for admin meeting."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarBidderId Bidder ID."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarPropertyId Property ID."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarTime Calendar Time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarVenue Calendar Venue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CalendarAdmin(CalendarBidderId calendarBidderId, CalendarPropertyId calendarPropertyId,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                         CalendarTime calendarTime, CalendarVenue calendarVenue) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(calendarBidderId, calendarPropertyId, calendarTime, calendarVenue);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireAllNonNull(calendarBidderId, calendarPropertyId, calendarTime, calendarVenue);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super.isAdmin \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 13,
      "munharsha": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarBidderId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a bidderId in the address book to be used in calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBidderId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarBidderId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final String bidderId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a {@code CalendarBidderId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarBidderId(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        checkArgument(isValidBidderId(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        bidderId \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isValidBidderId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return bidderId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || (other instanceof CalendarBidderId // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 bidderId.equals(((CalendarBidderId) other).bidderId)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return bidderId.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 2,
      "munharsha": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a meeting in the calendar book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarMeeting {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String PREFIX \u003d \"p\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    // TODO: should be managed somewhere else to access last id in storage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected boolean isPaperWork;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected boolean isViewing;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    protected boolean isAdmin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final CalendarBidderId calendarBidderId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final CalendarPropertyId calendarPropertyId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final CalendarTime calendarTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final CalendarVenue calendarVenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private boolean isMeeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarMeeting(CalendarBidderId calendarBidderId, CalendarPropertyId calendarPropertyId,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                           CalendarTime calendarTime, CalendarVenue calendarVenue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireAllNonNull(calendarBidderId, calendarPropertyId, calendarTime, calendarVenue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.calendarBidderId \u003d calendarBidderId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.calendarPropertyId \u003d calendarPropertyId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.calendarTime \u003d calendarTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.calendarVenue \u003d calendarVenue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isMeeting \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isPaperWork \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isViewing \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.isAdmin \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Checks the type of meeting."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return String containing the correct meeting type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String checkMeetingType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (isPaperWork) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return \"Paperwork\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } else if (isViewing) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return \"Viewing\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } else if (isAdmin) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            return \"Admin\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new AssertionError(\"no such meeting type\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarBidderId getCalendarBidderId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.calendarBidderId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarPropertyId getCalendarPropertyId() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.calendarPropertyId;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarTime getCalendarTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.calendarTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarVenue getCalendarVenue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.calendarVenue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean isViewing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.isViewing;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean isPaperWork() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.isPaperWork;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean isAdmin() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.isAdmin;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns true if either the property id is the same or if the address is the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param otherMeeting The other property."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @return True if both property objects represent the same property."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean isSameMeeting(CalendarMeeting otherMeeting) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return this \u003d\u003d otherMeeting;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        builder.append(checkMeetingType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        builder.append(\" Bidder Id: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                .append(getCalendarBidderId())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                .append(\" Property Id: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                .append(getCalendarPropertyId())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                .append(getCalendarVenue())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                .append(getCalendarTime());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 45,
      "munharsha": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarPaperwork.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarPaperwork extends CalendarMeeting {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String PREFIX \u003d \"p\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructor for paperwork meeting."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarBidderId Bidder ID."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarPropertyId Property ID."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarTime Calendar Time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarVenue Calendar Venue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CalendarPaperwork(CalendarBidderId calendarBidderId, CalendarPropertyId calendarPropertyId,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                             CalendarTime calendarTime, CalendarVenue calendarVenue) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(calendarBidderId, calendarPropertyId, calendarTime, calendarVenue);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireAllNonNull(calendarBidderId, calendarPropertyId, calendarTime, calendarVenue);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super.isPaperWork \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 11,
      "munharsha": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarPropertyId.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Represents a propertyId in the address book to be used in calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPropertyId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarPropertyId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final String propertyId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a {@code CalendarPropertyId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarPropertyId(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        checkArgument(isValidPropertyId(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        propertyId \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static boolean isValidPropertyId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return propertyId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || (other instanceof CalendarPropertyId // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 propertyId.equals(((CalendarPropertyId) other).propertyId)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return propertyId.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 2,
      "munharsha": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Calendar\u0027s Time in the Calendar book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalendarTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class CalendarTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should only contain numbers, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructs an {@code CalendarTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param time A valid CalendarTime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CalendarTime (String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        checkArgument(isValidCalendarTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static boolean isValidCalendarTime(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || (other instanceof CalendarTime // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 this.time.equals(((CalendarTime) other).time)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.time.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 52,
      "munharsha": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarVenue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a Calendar\u0027s venue in the Calendar book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalendarTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class CalendarVenue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Calendar Venue should only contain alphanumeric characters\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            + \" and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * The first character of the CalendarVenue must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final String venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Constructs an {@code CalendarVenue}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param venue A valid CalendarVenue."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CalendarVenue(String venue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        checkArgument(isValidCalendarTime(venue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns true if a given string is a valid venue."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public static boolean isValidCalendarTime(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.venue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || (other instanceof CalendarVenue // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 this.venue.equals(((CalendarVenue) other).venue)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return this.venue.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 53,
      "munharsha": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/CalendarViewing.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarViewing extends CalendarMeeting {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String PREFIX \u003d \"v\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *  Constructor for viewing meeting."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarBidderId Bidder ID."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarPropertyId Property ID."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarTime Calendar Time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param calendarVenue Calendar Venue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public CalendarViewing(CalendarBidderId calendarBidderId, CalendarPropertyId calendarPropertyId,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                           CalendarTime calendarTime, CalendarVenue calendarVenue) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(calendarBidderId, calendarPropertyId, calendarTime, calendarVenue);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireAllNonNull(calendarBidderId, calendarPropertyId, calendarTime, calendarVenue);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super.isViewing \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 11,
      "munharsha": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/UniqueMeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.calendar.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * A list of meetings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * A meeting is considered unique by comparing using {@code Meeting#isSameMeeting(Meeting)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * As such, adding and updating of meetings uses Meeting#isSameMeeting(Meeting) for equality so as"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * to ensure that the meeting being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * UniqueMeetingList. However, the removal of a property uses Property#equals(Object) so as to ensure"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * that the property with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cCalendarMeeting\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private final ObservableList\u003cCalendarMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private final ObservableList\u003cCalendarMeeting\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns true if the list contains an equivalent Meeting as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean contains(CalendarMeeting toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeeting);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Adds a Meeting to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * The property must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void add(CalendarMeeting toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Replaces the Meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * The property identity of {@code editedMeeting} must not be the same as another"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * existing meeting in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void setMeeting(CalendarMeeting target, CalendarMeeting editedMeeting) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        internalList.set(index, editedMeeting);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Removes the equivalent meeting from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void remove(CalendarMeeting toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void setMeetings(seedu.address.model.calendar.UniqueMeetingList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Replaces the contents of this list with {@code meetings}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public void setMeetings(List\u003cCalendarMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        internalList.setAll(meetings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public ObservableList\u003cCalendarMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public Iterator\u003cCalendarMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                || (other instanceof seedu.address.model.calendar.UniqueMeetingList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.calendar.UniqueMeetingList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns true if {@code meetings} contains only unique meetings."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cCalendarMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/exceptions/DuplicateMeetingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Signals that the operation would result in duplicate Meetings (Meetings are the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * same when they have the same venue, time, property id, bidder id, meeting type)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        super(\"Operations would result in duplciate meetings\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/exceptions/MeetingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.model.calendar.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Signals that the operation is unable to find the specified meeting."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/id/Id.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.id;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "* Represents an Id to uniquely identify elements in a list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Ids should start with a representative character, followed by\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + \"some numbers.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[BSP]\\\\p{Digit}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final int idNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    * Constructs the Id with a prefix and id number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    * @param prefix The prefix representing the type of object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    * @param idNumber The id number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Id(String prefix, int idNumber) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.idNumber \u003d idNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Constructs the Id from a String."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param id The id in string format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Id(String id) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.prefix \u003d String.valueOf(id.charAt(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.idNumber \u003d Integer.parseInt(id.substring(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Gets the next id with the same prefix."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The next id."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Id increment() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new Id(prefix, idNumber + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns true if a given string is a valid Id. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return prefix + idNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this \u003d\u003d obj"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (obj instanceof Id"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.prefix.equals(((Id) obj).prefix)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.idNumber \u003d\u003d ((Id) obj).idNumber);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/id/IdManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.id;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Represents an Id management system that gives the next Id for a list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class IdManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Next Id to be allocated. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Id nextId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Constructs the IdManager object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param initialId The last id allocated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public IdManager(Id initialId) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.nextId \u003d initialId.increment();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns an IdManager that starts incrementing id from 0."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param prefix The prefix of the ids."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The IdManager whose id starts from 0."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static IdManager initialize(String prefix) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new IdManager(new Id(prefix, 0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Gets the next Id."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The next Id."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Id getNextId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Id currentId \u003d nextId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        nextId \u003d nextId.increment();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return currentId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ClientPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Represents the clients who interacts with the property agent."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class ClientPerson extends Person {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected Id clientId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructor for the client."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param name name of client."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param phone phone number of client."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param tags tags."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param id identifier."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected ClientPerson(Name name, Phone phone, Set\u003cTag\u003e tags, Id id) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        super(name, phone, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.clientId \u003d id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this.clientId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setId(Id updatedId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.clientId \u003d updatedId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return otherPerson instanceof ClientPerson \u0026\u0026 super.isSamePerson(otherPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .append(\"\\nPhone: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .append(\"\\nId: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .append(\"\\nTags: \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Person(Name name, Phone phone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(name, phone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return Objects.hash(name, phone, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 7,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 2,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/bidder/Bidder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person.bidder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.ClientPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Represents the bidders who are bidding for properties."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class Bidder extends ClientPerson {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructs the bidder with the name, phone, tags, and id."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param name name of the bidder."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param phone phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param tags tags."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param id identifier."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Bidder(Name name, Phone phone, Set\u003cTag\u003e tags, Id id) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        super(name, phone, tags, id);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tags.add(new Tag(\"bidder\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return otherPerson instanceof Bidder \u0026\u0026 super.isSamePerson(otherPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if both sellers have the same identity and data fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!(other instanceof Bidder)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder otherBidder \u003d (Bidder) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return otherBidder.getName().equals(getName())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 otherBidder.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 otherBidder.getTags().equals(getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/bidder/UniqueBidderList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person.bidder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * @see Bidder#isSamePerson(Person)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class UniqueBidderList implements Iterable\u003cBidder\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final ObservableList\u003cBidder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final ObservableList\u003cBidder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean contains(Bidder toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void add(Bidder toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        toAdd.setId(getLatestId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Id getLatestId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (internalList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return new Id(\"B\", 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this.internalList.get(internalList.size() - 1).getId().increment();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedBidder}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder(Bidder target, Bidder editedBidder) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(target, editedBidder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!target.isSamePerson(editedBidder) \u0026\u0026 contains(editedBidder)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.set(index, editedBidder);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove(Bidder toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidders(UniqueBidderList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the contents of this list with {@code bidders}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code bidders} must not contain duplicate bidders."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidders(List\u003cBidder\u003e bidders) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(bidders);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!biddersAreUnique(bidders)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.setAll(bidders);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cBidder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Iterator\u003cBidder\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || (other instanceof UniqueBidderList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueBidderList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if {@code bidders} contains only unique persons."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private boolean biddersAreUnique(List\u003cBidder\u003e bidders) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (int i \u003d 0; i \u003c bidders.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bidders.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                if (bidders.get(i).isSamePerson(bidders.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/seller/Seller.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person.seller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.ClientPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Represents the sellers who are selling the properties."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class Seller extends ClientPerson {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructs the seller with the name, phone, tags, and id."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param name name of the seller."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param phone phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param tags tags."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param id identifier."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Seller(Name name, Phone phone, Set\u003cTag\u003e tags, Id id) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        super(name, phone, tags, id);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return otherPerson instanceof Seller \u0026\u0026 super.isSamePerson(otherPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if both sellers have the same identity and data fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!(other instanceof Seller)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller otherSeller \u003d (Seller) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return otherSeller.getName().equals(getName())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 otherSeller.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 otherSeller.getTags().equals(getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/seller/UniqueSellerList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person.seller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A person is considered unique by comparing using {@code Seller#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * persons uses Seller#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * unique in terms of identity in the UniqueSellerList. However, the removal of a person uses Seller#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * @see Seller#isSamePerson(Person)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class UniqueSellerList implements Iterable\u003cSeller\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final ObservableList\u003cSeller\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    protected final ObservableList\u003cSeller\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean contains(Seller toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Adds a seller to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void add(Seller toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        toAdd.setId(getLatestId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Id getLatestId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (internalList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return new Id(\"S\", 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this.internalList.get(internalList.size() - 1).getId().increment();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the contents of this list with {@code sellers}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code sellers} must not contain duplicate bidders."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellers(List\u003cSeller\u003e sellers) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(sellers);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!sellersAreUnique(sellers)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.setAll(sellers);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellers(UniqueSellerList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedSeller}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person identity of {@code editedSeller} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller(Seller target, Seller editedSeller) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireAllNonNull(target, editedSeller);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!target.isSamePerson(editedSeller) \u0026\u0026 contains(editedSeller)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        internalList.set(index, editedSeller);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove(Seller toRemove) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cSeller\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Iterator\u003cSeller\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || (other instanceof UniqueSellerList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSellerList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private boolean sellersAreUnique(List\u003cSeller\u003e sellers) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (int i \u003d 0; i \u003c sellers.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            for (int j \u003d i + 1; j \u003c sellers.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                if (sellers.get(i).isSamePerson(sellers.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/price/Price.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.price;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Represents a Price."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Guarantees: immutable; price is valid as declared in {@link #isValidPrice(double)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Price should be greater than 0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public final double price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Price(double price) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if a given integer is a valid price."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static boolean isValidPrice(double test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return String.format(\"$%.2f\", price);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 price \u003d\u003d ((Price) other).price); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return Double.hashCode(price);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Represents a property\u0027s address in the property book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/IsRental.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Represents whether a property is a rental in the property book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIsRental(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class IsRental {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"isRental should be yes / y or no / n only.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final List\u003cString\u003e VALID_STRINGS \u003d Arrays.asList(\"yes\", \"y\", \"no\", \"n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public final boolean isRental;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Constructs a {@code IsRental}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param isRental A valid isRental."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public IsRental(String isRental) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(isRental);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        checkArgument(isValidIsRental(isRental), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String lowerCaseIsRental \u003d isRental.toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        switch (lowerCaseIsRental) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"yes\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"y\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            this.isRental \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"no\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"n\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            this.isRental \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"Invalid isRental should be handled already.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if a given string is a valid isRental."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static boolean isValidIsRental(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return VALID_STRINGS.stream().anyMatch(valid -\u003e valid.equals(test.toLowerCase()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the boolean representation of whether the property is a rental. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean isRental() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return isRental;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return isRental ? \"Yes\" : \"No\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (other instanceof IsRental // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 isRental \u003d\u003d ((IsRental) other).isRental); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return isRental ? 1 : 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/Property.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.id.IdManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.price.Price;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Represents a Property in the property book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Uniquely identified by the property id."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Property {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static IdManager idManager \u003d IdManager.initialize(\"P\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final Id propertyId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PropertyName propertyName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final Id sellerId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final Price askingPrice;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PropertyType propertyType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final IsRental isRental;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final boolean isClosedDeal;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Property(PropertyName propertyName, Id sellerId, Address address, Price askingPrice,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    PropertyType propertyType, IsRental isRental, boolean isClosedDeal) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireAllNonNull(propertyName, sellerId, address, askingPrice, propertyType, isRental, isClosedDeal);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.propertyId \u003d idManager.getNextId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.propertyName \u003d propertyName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.sellerId \u003d sellerId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.askingPrice \u003d askingPrice;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.propertyType \u003d propertyType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.isRental \u003d isRental;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.isClosedDeal \u003d isClosedDeal;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Id getPropertyId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return propertyId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyName getPropertyName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return propertyName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Id getSellerId() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return sellerId;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Price getAskingPrice() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return askingPrice;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyType getPropertyType() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return propertyType;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public IsRental getIsRental() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return isRental;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean isRental() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return isRental.isRental();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean isClosedDeal() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return isClosedDeal;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if either the property id is the same or if the address is the same."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param otherProperty The other property."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return True if both property objects represent the same property."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean isSameProperty(Property otherProperty) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this \u003d\u003d otherProperty"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || this.getPropertyId().equals(otherProperty.getPropertyId())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || this.getAddress().equals(otherProperty.getAddress());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if both properties have the same identity and data fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * This defines a stronger notion of equality between two properties."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param obj The other object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return True if both properties are equal."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!(obj instanceof Property)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Property otherProperty \u003d (Property) obj;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this.getPropertyId().equals(otherProperty.getPropertyId())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.getAddress().equals(otherProperty.getAddress())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.getAskingPrice().equals(otherProperty.getAskingPrice())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.getPropertyName().equals(otherProperty.getPropertyName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.getPropertyType().equals(otherProperty.getPropertyType())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.getSellerId().equals(otherProperty.getSellerId())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.isRental() \u003d\u003d (otherProperty.isRental())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 this.isClosedDeal() \u003d\u003d otherProperty.isClosedDeal();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return Objects.hash(propertyId, propertyName, address,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                askingPrice, propertyType, sellerId, isRental, isClosedDeal);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (isClosedDeal()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            builder.append(\"[CLOSED] \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        builder.append(getPropertyName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(\" Property Id: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(getPropertyId())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(\" Property type: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(getPropertyType())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(\" Asking price: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(getAskingPrice())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(\" Seller Id: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                .append(getSellerId());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (isRental()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            builder.append(\" Rental\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/PropertyName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Represents a property\u0027s name in the property book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPropertyName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public final String propertyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Constructs a {@code PropertyName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        checkArgument(isValidPropertyName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static boolean isValidPropertyName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return propertyName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (other instanceof PropertyName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 propertyName.equals(((PropertyName) other).propertyName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return propertyName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/PropertyType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Represents a property\u0027s type in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPropertyType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"Type should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Constructs a {@code PropertyType}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param type A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyType(String type) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        checkArgument(isValidPropertyType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static boolean isValidPropertyType(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // TODO: add more validation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (other instanceof PropertyType // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 type.equals(((PropertyType) other).type)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/UniquePropertyList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.exceptions.DuplicatePropertyException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.exceptions.PropertyNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * A list of properties that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * A property is considered unique by comparing using {@code Property#isSameProperty(Property)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * As such, adding and updating of properties uses Property#isSameProperty(Property) for equality so as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * to ensure that the property being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * UniquePropertyList. However, the removal of a property uses Property#equals(Object) so as to ensure"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * that the property with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * @see Property#isSameProperty(Property)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class UniquePropertyList implements Iterable\u003cProperty\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ObservableList\u003cProperty\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ObservableList\u003cProperty\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if the list contains an equivalent property as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean contains(Property toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProperty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Adds a property to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The property must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void add(Property toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new DuplicatePropertyException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Replaces the property {@code target} in the list with {@code editedProperty}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The property identity of {@code editedProperty} must not be the same as another existing property in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setProperty(Property target, Property editedProperty) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireAllNonNull(target, editedProperty);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new PropertyNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!target.isSameProperty(editedProperty) \u0026\u0026 contains(editedProperty)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new DuplicatePropertyException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        internalList.set(index, editedProperty);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Removes the equivalent property from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * The property must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void remove(Property toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new PropertyNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setProperties(UniquePropertyList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Replaces the contents of this list with {@code properties}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * {@code properties} must not contain duplicate properties."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setProperties(List\u003cProperty\u003e properties) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        requireAllNonNull(properties);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!propertiesAreUnique(properties)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new DuplicatePropertyException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        internalList.setAll(properties);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ObservableList\u003cProperty\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Iterator\u003cProperty\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                || (other instanceof UniquePropertyList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePropertyList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Returns true if {@code properties} contains only unique properties."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private boolean propertiesAreUnique(List\u003cProperty\u003e properties) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (int i \u003d 0; i \u003c properties.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            for (int j \u003d i + 1; j \u003c properties.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                if (properties.get(i).isSameProperty(properties.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/exceptions/DuplicatePropertyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Signals that the operation will result in duplicate Properties (Properties are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DuplicatePropertyException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DuplicatePropertyException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(\"Operation would result in duplicate properties\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/property/exceptions/PropertyNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Signals that the operation is unable to find the specified property."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/selleraddressbook/ReadOnlySellerAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.selleraddressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface ReadOnlySellerAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    ObservableList\u003cSeller\u003e getSellerList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/selleraddressbook/SellerAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.selleraddressbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.UniqueSellerList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class SellerAddressBook implements ReadOnlySellerAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final UniqueSellerList sellers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellers \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerAddressBook() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates an SellerAddressBook using the Sellers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerAddressBook(ReadOnlySellerAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the contents of the bidders list with {@code bidders}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code bidders} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellers(List\u003cSeller\u003e bidders) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.sellers.setSellers(bidders);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Resets the existing data of this {@code SellerAddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void resetData(ReadOnlySellerAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        setSellers(newData.getSellerList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns true if a Seller with the same identity as {@code Seller} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean hasSeller(Seller bidder) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(bidder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellers.contains(bidder);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Adds a bidder to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void addSeller(Seller p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellers.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller(Seller target, Seller editedSeller) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(editedSeller);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellers.setSeller(target, editedSeller);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Removes {@code key} from this {@code SellerAddressBook}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void removeSeller(Seller key) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellers.remove(key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellers.asUnmodifiableObservableList().size() + \" sellers\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public ObservableList\u003cSeller\u003e getSellerList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Id getLastSellerId() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return getSellerList().get(getSellerList().size()).getId().increment();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                || (other instanceof SellerAddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 sellers.equals(((SellerAddressBook) other).sellers));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellers.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarAdmin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarBidderId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarPaperwork;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarPropertyId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarVenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarViewing;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static Bid[] getSampleBids() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return new Bid[] {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            new Bid(\"P01\", \"B01\", 45000),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            new Bid(\"P02\", \"B23\", 123456),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            new Bid(\"P31\", \"B11\", 42344),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            new Bid(\"P01\", \"B02\", 45100),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            new Bid(\"P01\", \"B45\", 65000),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            new Bid(\"P12\", \"B22\", 450002),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static ReadOnlyBidBook getSampleBidBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        BidBook sampleBb \u003d new BidBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        for (Bid sampleBid : getSampleBids()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            sampleBb.addBid(sampleBid);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return sampleBb;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BIDDERS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static Bidder[] getSampleBidders() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Bidder[] {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Bidder(new Name(\"Kor Ming Soon\"), new Phone(\"125678\"), null, new Id(\"B\", 1)),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Bidder(new Name(\"Harsha\"), new Phone(\"12345777\"), null, new Id(\"B\", 2)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Bidder(new Name(\"Marcus\"), new Phone(\"47876428\"), null, new Id(\"B\", 3))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        };"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static ReadOnlyBidderAddressBook getSampleBidderAddressBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        BidderAddressBook sampleBidderAb \u003d new BidderAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (Bidder sampleBidder : getSampleBidders()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            sampleBidderAb.addBidder(sampleBidder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sampleBidderAb;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SELLERS \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static Seller[] getSampleSellers() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Seller[] {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Seller(new Name(\"Dianne\"), new Phone(\"7897456\"), null, new Id(\"S\", 1)),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new Seller(new Name(\"Christopher\"), new Phone(\"12345777\"), null, new Id(\"S\", 2)),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        };"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static ReadOnlySellerAddressBook getSampleSellerAddressBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        SellerAddressBook sampleSellerAb \u003d new SellerAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (Seller sampleSeller : getSampleSellers()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            sampleSellerAb.addSeller(sampleSeller);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sampleSellerAb;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PROPERTY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MEETING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static CalendarMeeting[] getSampleMeetings() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return new CalendarMeeting[] {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            new CalendarPaperwork(new CalendarBidderId(\"b1\"), new CalendarPropertyId(\"p2\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        new CalendarTime(\"15 OCT 2020\"), new CalendarVenue(\"Marina Bay\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            new CalendarAdmin(new CalendarBidderId(\"b5\"), new CalendarPropertyId(\"p6\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        new CalendarTime(\"19 OCT 2020\"), new CalendarVenue(\"Bedok\")),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            new CalendarViewing(new CalendarBidderId(\"b11\"), new CalendarPropertyId(\"p8\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        new CalendarTime(\"21 OCT 2020\"), new CalendarVenue(\"Tampines\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        };"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static ReadOnlyMeetingManager getSampleMeetingBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        MeetingBook sampleMeetingAb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (CalendarMeeting sampleMeeting : getSampleMeetings()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            sampleMeetingAb.addMeeting(sampleMeeting);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return sampleMeetingAb;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 22,
      "kormingsoon": 50,
      "munharsha": 27,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BidBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Represents a storage for {@link seedu.address.model.BidBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public interface BidBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Path getBidBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Returns BidBook data as a {@link ReadOnlyBidBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Optional\u003cReadOnlyBidBook\u003e readBidBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @see #getBidBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Optional\u003cReadOnlyBidBook\u003e readBidBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Saves the given {@link ReadOnlyBidBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param bidBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    void saveBidBook(ReadOnlyBidBook bidBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @see #saveBidBook(ReadOnlyBidBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    void saveBidBook(ReadOnlyBidBook bidBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBid.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class JsonAdaptedBid {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"bid\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final String propertyId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final String bidderId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final double bidAmount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * constructor to make a JsonAdaptedBid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param propertyId String id of the property"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param bidderId String id of the bidder"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param bidAmount Amount bidder wants to buy the property for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public JsonAdaptedBid(@JsonProperty(\"propertyId\") String propertyId,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                          @JsonProperty(\"bidderId\") String bidderId, @JsonProperty(\"bidAmount\") double bidAmount) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.propertyId \u003d propertyId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bidderId \u003d bidderId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bidAmount \u003d bidAmount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Constructor that wraps a bid object into a JsonAdaptedBid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param source bid object to convert"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public JsonAdaptedBid(Bid source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        propertyId \u003d source.getPropertyId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidderId \u003d source.getBidderId();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidAmount \u003d source.getBidAmount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Converts input into a model type for Bid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @return Bid object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws IllegalValueException in case null value is given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Bid toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (propertyId \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"P12\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (bidderId \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"B04\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (bidAmount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"450443\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return new Bid(propertyId, bidderId, bidAmount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Person(modelName, modelPhone, modelTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBidBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class JsonBidBookStorage implements BidBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBidBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public JsonBidBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Path getBidBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Optional\u003cReadOnlyBidBook\u003e readBidBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return readBidBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Similar to {@link #readBidBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Optional\u003cReadOnlyBidBook\u003e readBidBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        Optional\u003cJsonSerializableBidBook\u003e jsonBidBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                filePath, JsonSerializableBidBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (!jsonBidBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return Optional.of(jsonBidBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void saveBidBook(ReadOnlyBidBook bidBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        saveBidBook(bidBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Similar to {@link #saveBidBook(ReadOnlyBidBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void saveBidBook(ReadOnlyBidBook bidBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(bidBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBidBook(bidBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBidBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * An Immutable BidBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "@JsonRootName(value \u003d \"bidbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "class JsonSerializableBidBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BID \u003d \"Bid list contains duplicate bids.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final List\u003cJsonAdaptedBid\u003e bids \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public JsonSerializableBidBook(@JsonProperty(\"bids\") List\u003cJsonAdaptedBid\u003e bids) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bids.addAll(bids);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public JsonSerializableBidBook(ReadOnlyBidBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bids.addAll(source.getBidList().stream().map(JsonAdaptedBid::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public BidBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        BidBook bidBook \u003d new BidBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        for (JsonAdaptedBid jsonAdaptedBid : bids) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            Bid bid \u003d jsonAdaptedBid.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (bidBook.hasBid(bid)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            bidBook.addBid(bid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return bidBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.bidderstorage.BidderAddressBookStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.storage.calendar.MeetingBookStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.sellerstorage.SellerAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface Storage extends SellerAddressBookStorage, BidderAddressBookStorage,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        AddressBookStorage, UserPrefsStorage, BidBookStorage, MeetingBookStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BID \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Path getBidBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    Optional\u003cReadOnlyBidBook\u003e readBidBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    void saveBidBook(ReadOnlyBidBook bidBook) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BIDDER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Optional\u003cReadOnlyBidderAddressBook\u003e readBidderAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void saveBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook) throws IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SELLER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Optional\u003cReadOnlySellerAddressBook\u003e readSellerAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void saveSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook) throws IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PROPERTY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MEETING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    Optional\u003cReadOnlyMeetingManager\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingManager meetingBook) throws IOException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 10,
      "kormingsoon": 30,
      "munharsha": 11,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.bidderstorage.BidderAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.storage.calendar.MeetingBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.sellerstorage.SellerAddressBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private BidderAddressBookStorage bidderAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private SellerAddressBookStorage sellerAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private BidBookStorage bidBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private MeetingBookStorage meetingBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * {@code BidderAddressBookStorage}, {@code SellerAddressBookStorage}, {@code MeetingBookStorage}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                          BidBookStorage bidBookStorage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                          BidderAddressBookStorage bidderAddressBookStorage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                          SellerAddressBookStorage sellerAddressBookStorage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                          MeetingBookStorage meetingBookStorage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bidBookStorage \u003d bidBookStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.bidderAddressBookStorage \u003d bidderAddressBookStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.sellerAddressBookStorage \u003d sellerAddressBookStorage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.meetingBookStorage \u003d meetingBookStorage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BidBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Path getBidBookFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return bidBookStorage.getBidBookFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Optional\u003cReadOnlyBidBook\u003e readBidBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return readBidBook(bidBookStorage.getBidBookFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public Optional\u003cReadOnlyBidBook\u003e readBidBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return bidBookStorage.readBidBook(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void saveBidBook(ReadOnlyBidBook bidBook) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        saveBidBook(bidBook, bidBookStorage.getBidBookFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public void saveBidBook(ReadOnlyBidBook bidBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidBookStorage.saveBidBook(bidBook, filePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BidderAddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getBidderAddressBookFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidderAddressBookStorage.getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlyBidderAddressBook\u003e readBidderAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return readBidderAddressBook(bidderAddressBookStorage.getBidderAddressBookFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlyBidderAddressBook\u003e readBidderAddressBook(Path filePath) throws"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidderAddressBookStorage.readBidderAddressBook(filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        logger.info(\"-----------[TRIPLE CHECK][\" + bidderAddressBookStorage.getBidderAddressBookFilePath() + \"]\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        saveBidderAddressBook(bidderAddressBook, bidderAddressBookStorage.getBidderAddressBookFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderAddressBookStorage.saveBidderAddressBook(bidderAddressBook, filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SellerAddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getSellerAddressBookFilePath() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellerAddressBookStorage.getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlySellerAddressBook\u003e readSellerAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return readSellerAddressBook(sellerAddressBookStorage.getSellerAddressBookFilePath());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlySellerAddressBook\u003e readSellerAddressBook(Path filePath) throws"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellerAddressBookStorage.readSellerAddressBook(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        saveSellerAddressBook(sellerAddressBook, sellerAddressBookStorage.getSellerAddressBookFilePath());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerAddressBookStorage.saveSellerAddressBook(sellerAddressBook, filePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetingBookStorage.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Optional\u003cReadOnlyMeetingManager\u003e readMeetingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return readMeetingBook(meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Optional\u003cReadOnlyMeetingManager\u003e readMeetingBook(Path filePath) throws"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetingBookStorage.readMeetingBook(filePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingManager meetingBook) throws IOException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        saveMeetingBook(meetingBook, meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingManager meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetingBookStorage.saveMeetingBook(meetingBook, filePath);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 33,
      "kormingsoon": 72,
      "munharsha": 38,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bidderstorage/BidderAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.bidderstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Represents a storage for {@link seedu.address.model.bidderaddressbook.BidderAddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface BidderAddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getBidderAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyBidderAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Optional\u003cReadOnlyBidderAddressBook\u003e readBidderAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see #getBidderAddressBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Optional\u003cReadOnlyBidderAddressBook\u003e readBidderAddressBook(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Saves the given {@link ReadOnlyBidderAddressBook} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param bidderAddressBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void saveBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see #saveBidderAddressBook(ReadOnlyBidderAddressBook)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void saveBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bidderstorage/JsonAdaptedBidder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.bidderstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Jackson-friendly version of {@link Bidder}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class JsonAdaptedBidder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonAdaptedBidder(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"id\") String id) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonAdaptedBidder(Bidder source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Bidder} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Bidder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Id modelId \u003d new Id(id);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Bidder(modelName, modelPhone, modelTags, modelId);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bidderstorage/JsonBidderAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.bidderstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class JsonBidderAddressBookStorage implements BidderAddressBookStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBidderAddressBookStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonBidderAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getBidderAddressBookFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlyBidderAddressBook\u003e readBidderAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return readBidderAddressBook(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Similar to {@link #readBidderAddressBook()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlyBidderAddressBook\u003e readBidderAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Optional\u003cJsonSerializableBidderAddressBook\u003e jsonBidderAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                filePath, JsonSerializableBidderAddressBook.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!jsonBidderAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return Optional.of(jsonBidderAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveBidderAddressBook(ReadOnlyBidderAddressBook sellerAddressBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        saveBidderAddressBook(sellerAddressBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Similar to {@link #saveBidderAddressBook(ReadOnlyBidderAddressBook)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveBidderAddressBook(ReadOnlyBidderAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBidderAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/bidderstorage/JsonSerializableBidderAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.bidderstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "@JsonRootName(value \u003d \"selleraddressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "class JsonSerializableBidderAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Bidders list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final List\u003cJsonAdaptedBidder\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonSerializableBidderAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedBidder\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonSerializableBidderAddressBook(ReadOnlyBidderAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        persons.addAll(source.getBidderList().stream().map(JsonAdaptedBidder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderAddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        BidderAddressBook bidderAddressBook \u003d new BidderAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (JsonAdaptedBidder jsonAdaptedBidder : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            Bidder bidder \u003d jsonAdaptedBidder.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            if (bidderAddressBook.hasBidder(bidder)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            bidderAddressBook.addBidder(bidder);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return bidderAddressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonAdaptedMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarAdmin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarBidderId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarPaperwork;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarPropertyId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarVenue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarViewing;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * Jackson-friendly version of {@link CalendarMeeting}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final String propertyId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final String bidderId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final String venue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final String typeOfMeeting;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"propertyId\") String propertyId, @JsonProperty(\"bidderId\") String bidderId,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                             @JsonProperty(\"time\") String time, @JsonProperty(\"venue\") String venue,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                              @JsonProperty(\"typeOfMeeting\") String typeOfMeeting) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.propertyId \u003d propertyId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.bidderId \u003d bidderId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.typeOfMeeting \u003d typeOfMeeting;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Converts a given {@code Meeting} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public JsonAdaptedMeeting(CalendarMeeting source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        propertyId \u003d source.getCalendarPropertyId().propertyId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        bidderId \u003d source.getCalendarBidderId().bidderId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        time \u003d source.getCalendarTime().time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        venue \u003d source.getCalendarVenue().venue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        typeOfMeeting \u003d source.checkMeetingType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarMeeting toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (propertyId \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    CalendarPropertyId.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!CalendarPropertyId.isValidPropertyId(propertyId)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        final CalendarPropertyId modelPropertyId \u003d new CalendarPropertyId(propertyId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (bidderId \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    CalendarBidderId.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!CalendarBidderId.isValidBidderId(bidderId)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        final CalendarBidderId modelBidderId \u003d new CalendarBidderId(bidderId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    CalendarTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!CalendarTime.isValidCalendarTime(time)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        final CalendarTime modelTime \u003d new CalendarTime(time);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    CalendarVenue.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!CalendarVenue.isValidCalendarTime(venue)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        final CalendarVenue modelVenue \u003d new CalendarVenue(venue);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (typeOfMeeting.contains(\"Paperwork\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new CalendarPaperwork(modelBidderId, modelPropertyId, modelTime, modelVenue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else if (typeOfMeeting.contains(\"Viewing\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new CalendarViewing(modelBidderId, modelPropertyId, modelTime, modelVenue);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else if (typeOfMeeting.contains(\"Admin\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return new CalendarAdmin(modelBidderId, modelPropertyId, modelTime, modelVenue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    CalendarMeeting.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonMeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * A class to access MeetingBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class JsonMeetingBookStorage implements MeetingBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMeetingBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public JsonMeetingBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Optional\u003cReadOnlyMeetingManager\u003e readMeetingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return readMeetingBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public Optional\u003cReadOnlyMeetingManager\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        Optional\u003cJsonSerializableMeetingBook\u003e jsonMeetingBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                filePath, JsonSerializableMeetingBook.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!jsonMeetingBook.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return Optional.of(jsonMeetingBook.get().toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingManager meetingManager) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        saveMeetingBook(meetingManager, filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingManager meetingManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(meetingManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMeetingBook(meetingManager), filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "munharsha": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/JsonSerializableMeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * An Immutable MeetingBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "@JsonRootName(value \u003d \"meetingbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "class JsonSerializableMeetingBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"Meetings list contains duplicate meeting(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Constructs a {@code JsonSerializableMeetingBook} with the given meetings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public JsonSerializableMeetingBook(@JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.meetings.addAll(meetings);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Converts a given {@code ReadOnlyMeetingManager} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMeetingBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public JsonSerializableMeetingBook(ReadOnlyMeetingManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetings.addAll(source.getMeetingList().stream().map(JsonAdaptedMeeting::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Converts this meeting book into the model\u0027s {@code MeetingBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public MeetingBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        MeetingBook meetingBook \u003d new MeetingBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        for (JsonAdaptedMeeting jsonAdaptedMeeting : meetings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            CalendarMeeting meeting \u003d jsonAdaptedMeeting.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (meetingBook.hasMeetings(meeting)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 3,
      "munharsha": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/calendar/MeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.storage.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " * Represents a storage for {@link seedu.address.model.BidBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "public interface MeetingBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Returns ReadOnlyMeetingManager data as a {@link ReadOnlyMeetingManager}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    Optional\u003cReadOnlyMeetingManager\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @see #getMeetingBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    Optional\u003cReadOnlyMeetingManager\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * Saves the given {@link ReadOnlyMeetingManager} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param meetingManager cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingManager meetingManager) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param meetingManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingManager meetingManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 47,
      "munharsha": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/sellerstorage/JsonAdaptedSeller.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.sellerstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Jackson-friendly version of {@link Seller}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class JsonAdaptedSeller {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonAdaptedSeller(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"id\") String id) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonAdaptedSeller(Seller source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Seller} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Seller toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        final Id modelId \u003d new Id(id);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Seller(modelName, modelPhone, modelTags, modelId);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/sellerstorage/JsonSellerAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.sellerstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class JsonSellerAddressBookStorage implements SellerAddressBookStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSellerAddressBookStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonSellerAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Path getSellerAddressBookFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlySellerAddressBook\u003e readSellerAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return readSellerAddressBook(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Similar to {@link #readSellerAddressBook()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Optional\u003cReadOnlySellerAddressBook\u003e readSellerAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Optional\u003cJsonSerializableSellerAddressBook\u003e jsonSellerAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                filePath, JsonSerializableSellerAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!jsonSellerAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return Optional.of(jsonSellerAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        saveSellerAddressBook(sellerAddressBook, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Similar to {@link #saveSellerAddressBook(ReadOnlySellerAddressBook)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void saveSellerAddressBook(ReadOnlySellerAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSellerAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/sellerstorage/JsonSerializableSellerAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.sellerstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "@JsonRootName(value \u003d \"selleraddressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "class JsonSerializableSellerAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Sellers list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final List\u003cJsonAdaptedSeller\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonSerializableSellerAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedSeller\u003e persons) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public JsonSerializableSellerAddressBook(ReadOnlySellerAddressBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        persons.addAll(source.getSellerList().stream().map(JsonAdaptedSeller::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerAddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        SellerAddressBook sellerAddressBook \u003d new SellerAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (JsonAdaptedSeller jsonAdaptedSeller : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            Seller seller \u003d jsonAdaptedSeller.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            if (sellerAddressBook.hasSeller(seller)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            sellerAddressBook.addSeller(seller);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return sellerAddressBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/sellerstorage/SellerAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.storage.sellerstorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * Represents a storage for {@link seedu.address.model.selleraddressbook.SellerAddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public interface SellerAddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Path getSellerAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlySellerAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Optional\u003cReadOnlySellerAddressBook\u003e readSellerAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see #getSellerAddressBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    Optional\u003cReadOnlySellerAddressBook\u003e readSellerAddressBook(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Saves the given {@link ReadOnlySellerAddressBook} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @param sellerAddressBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void saveSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see #saveSellerAddressBook(ReadOnlySellerAddressBook)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    void saveSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BidCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * An UI component that displays information of a {@code Bid}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class BidCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final String FXML \u003d \"BidListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public final Bid bid;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Label propertyId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Label bidderId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Label bidAmount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public BidCard(Bid bid, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.bid \u003d bid;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        propertyId.setText(\"Property Id: \" + bid.getPropertyId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidderId.setText(\"Bidder Id: \" + bid.getBidderId());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidAmount.setText(\"Bid Amount: $\" + bid.getBidAmount());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        if (!(other instanceof BidCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        BidCard card \u003d (BidCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u0026\u0026 bid.equals(card.bid);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BidListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " * Panel containing the list of bids."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class BidListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final String FXML \u003d \"BidListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BidListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private ListView\u003cBid\u003e bidListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public BidListPanel(ObservableList\u003cBid\u003e bidList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidListView.setItems(bidList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidListView.setCellFactory(listView -\u003e new BidListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    class BidListViewCell extends ListCell\u003cBid\u003e { // person to bid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        protected void updateItem(Bid bid, boolean empty) { //changed Person to Bid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            super.updateItem(bid, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            if (empty || bid \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                setGraphic(new BidCard(bid, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String FXML \u003d \"CalendarListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public final CalendarMeeting meeting;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label typeOfMeeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label calenderBidderId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label calenderPropertyId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarCard(CalendarMeeting meeting, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        typeOfMeeting.setText(\"Meeting Type: \" + getMeetingType(meeting));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        calenderBidderId.setText(\"Bidder ID: \" + meeting.getCalendarBidderId().bidderId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        calenderPropertyId.setText(\"Property ID: \" + meeting.getCalendarPropertyId().propertyId);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        time.setText(\"Time: \" + meeting.getCalendarTime().time);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        venue.setText(\"Venue: \" + meeting.getCalendarVenue().venue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public String getMeetingType(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "        if (meeting.isAdmin()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return \"Admin Meeting:\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else if (meeting.isPaperWork()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return \"PaperWork Meeting:\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else if (meeting.isViewing()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return \"Viewing Meeting:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return \"ERROR: Meeting:\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        if (!(other instanceof CalendarCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        CalendarCard card \u003d (CalendarCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 9,
      "munharsha": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "public class CalendarListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String FXML \u003d \"CalendarListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private ListView\u003cCalendarMeeting\u003e calendarMeetingListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    public CalendarListPanel(ObservableList\u003cCalendarMeeting\u003e calendarMeetingList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        calendarMeetingListView.setItems(calendarMeetingList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        calendarMeetingListView.setCellFactory(listView -\u003e new CalendarMeetingListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    class CalendarMeetingListViewCell extends ListCell\u003cCalendarMeeting\u003e { // person to bid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        protected void updateItem(CalendarMeeting meeting, boolean empty) { //changed Person to Bid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            super.updateItem(meeting, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            if (empty || meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                setGraphic(new CalendarCard(meeting, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Christopher-LM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Christopher-LM": 3,
      "munharsha": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "         * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "         * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 2,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private BidListPanel bidListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private StackPane personAndBidTabPanePlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        TabBar personAndJobTabPane \u003d new TabBar(this.logic);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        personAndBidTabPanePlaceholder.getChildren().add(personAndJobTabPane.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 11,
      "-": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.ui.bidder.BidderListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.ui.property.PropertyListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.ui.seller.SellerListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "public class TabBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final String FXML \u003d \"TabBar.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final String FXML2 \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static final String FXML3 \u003d \"BidListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final String FXML4 \u003d \"BidderListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final String FXML5 \u003d \"SellerListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final String FXML6 \u003d \"property/PropertyListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static final String FXML7 \u003d \"CalendarListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private TabPane tabBar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Tab personTab;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Tab sellerTab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Tab bidderTab;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private Tab bidTab;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private Tab calenderTab;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Tab propertyTab;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private StackPane sellerListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private StackPane bidderListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private StackPane bidListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private StackPane meetingListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private StackPane propertyListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Creates a {@code TabBar} with the given {@code Logic}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    public TabBar(Logic logic) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        setTabBar();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        populateTab();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Initialises all tabs on the tabpane."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private void setTabBar() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        personTab.setText(\"AddressBooks\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidTab.setText(\"Bids\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderTab.setText(\"Bidders\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerTab.setText(\"Sellers\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyTab.setText(\"Properties\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        calenderTab.setText(\"Calendar\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        tabBar.setTabMinWidth(335);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        tabBar.setTabMaxWidth(335);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     * Fills the tabs with a list of applicants or jobs."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private void populateTab() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        BidListPanel bidListPanel \u003d new BidListPanel(logic.getFilteredBidList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        CalendarListPanel calendarListPanel \u003d new CalendarListPanel(logic.getFilteredMeetingList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        PropertyListPanel propertyListPanel \u003d new PropertyListPanel(logic.getFilteredPropertyList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        BidderListPanel bidderListPanel \u003d new BidderListPanel(logic.getFilteredBidderList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        SellerListPanel sellerListPanel \u003d new SellerListPanel(logic.getFilteredSellerList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        bidListPanelPlaceholder.getChildren().add(bidListPanel.getRoot());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        meetingListPanelPlaceholder.getChildren().add(calendarListPanel.getRoot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderListPanelPlaceholder.getChildren().add(bidderListPanel.getRoot());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerListPanelPlaceholder.getChildren().add(sellerListPanel.getRoot());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyListPanelPlaceholder.getChildren().add(propertyListPanel.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 62,
      "kormingsoon": 17,
      "dianneloh9": 17,
      "munharsha": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/bidder/BidderCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.ui.bidder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class BidderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final String FXML \u003d \"BidderListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public final Bidder bidder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label bidderId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates a {@code BidderCode} with the given {@code Bidder} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderCard(Bidder bidder, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.bidder \u003d bidder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name.setText(bidder.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone.setText(bidder.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name.setText(\"Name: \" + bidder.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone.setText(\"Phone: \" + bidder.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderId.setText(\"Bidder Id: \" + bidder.getId());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidder.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!(other instanceof BidderCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        BidderCard card \u003d (BidderCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 bidder.equals(card.bidder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/bidder/BidderListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.ui.bidder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class BidderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final String FXML \u003d \"BidderListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BidderListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private ListView\u003cBidder\u003e bidderListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates a {@code BidderListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderListPanel(ObservableList\u003cBidder\u003e bidderList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderListView.setItems(bidderList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        bidderListView.setCellFactory(listView -\u003e new BidderListPanel.BidderListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Bidder} using a {@code BidderCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    class BidderListViewCell extends ListCell\u003cBidder\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        protected void updateItem(Bidder bidder, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            super.updateItem(bidder, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            if (empty || bidder \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                setGraphic(new BidderCard(bidder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/property/PropertyCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.ui.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * An UI component that displays information of a {@code Property}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final String FXML \u003d \"property/PropertyListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public final Property property;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Label propertyName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Label sellerId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Label askingPrice;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Label propertyType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Label isRental;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Creates a {@code PropertyCard} with the given {@code Property} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyCard(Property property, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.property \u003d property;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyName.setText(property.getPropertyName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        address.setText(\"Address: \" + property.getAddress().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        sellerId.setText(\"Seller Id: \" + property.getSellerId().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        askingPrice.setText(\"Asking price: \" + property.getAskingPrice().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyType.setText(\"Property type: \" + property.getPropertyType().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        isRental.setText(\"Is rental: \" + property.getIsRental().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!(other instanceof PropertyCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        PropertyCard card \u003d (PropertyCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 property.equals(card.property);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/property/PropertyListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.ui.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * Panel containing the list of properties."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final String FXML \u003d \"property/PropertyListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PropertyListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private ListView\u003cProperty\u003e propertyListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Creates a {@code PropertyListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyListPanel(ObservableList\u003cProperty\u003e propertyList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyListView.setItems(propertyList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyListView.setCellFactory(listView -\u003e new PropertyListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Property} using a {@code PropertyCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    class PropertyListViewCell extends ListCell\u003cProperty\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        protected void updateItem(Property property, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            super.updateItem(property, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (empty || property \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                setGraphic(new PropertyCard(property, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/seller/SellerCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.ui.seller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class SellerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final String FXML \u003d \"SellerListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public final Seller seller;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Label sellerId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates a {@code SellerCode} with the given {@code Seller} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerCard(Seller seller, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.seller \u003d seller;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name.setText(\"Name: \" + seller.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone.setText(\"Phone: \" + seller.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerId.setText(\"Seller Id: \" + seller.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        seller.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        if (!(other instanceof SellerCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        SellerCard card \u003d (SellerCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u0026\u0026 seller.equals(card.seller);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/seller/SellerListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.ui.seller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class SellerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static final String FXML \u003d \"SellerListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SellerListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private ListView\u003cSeller\u003e sellerListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates a {@code SellerListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerListPanel(ObservableList\u003cSeller\u003e sellerList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerListView.setItems(sellerList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        sellerListView.setCellFactory(listView -\u003e new SellerListPanel.SellerListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Seller} using a {@code SellerCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    class SellerListViewCell extends ListCell\u003cSeller\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        protected void updateItem(Seller seller, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            super.updateItem(seller, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            if (empty || seller \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                setGraphic(new SellerCard(seller, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 51
    }
  },
  {
    "path": "src/main/resources/view/BidListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003cLabel fx:id\u003d\"propertyId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003cLabel fx:id\u003d\"bidderId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003cLabel fx:id\u003d\"bidAmount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 34
    }
  },
  {
    "path": "src/main/resources/view/BidListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    \u003cListView fx:id\u003d\"bidListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 8
    }
  },
  {
    "path": "src/main/resources/view/BidderListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cLabel fx:id\u003d\"bidderId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 35
    }
  },
  {
    "path": "src/main/resources/view/BidderListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    \u003cListView fx:id\u003d\"bidderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 8
    }
  },
  {
    "path": "src/main/resources/view/CalendarListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003cLabel fx:id\u003d\"typeOfMeeting\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cLabel fx:id\u003d\"calenderBidderId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cLabel fx:id\u003d\"calenderPropertyId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "munharsha": 36
    }
  },
  {
    "path": "src/main/resources/view/CalendarListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    \u003cListView fx:id\u003d\"calendarMeetingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "munharsha"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "munharsha": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"personAndBidTabPanePlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                   minHeight\u003d\"400\" prefHeight\u003d\"400\" maxHeight\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 5,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/SellerListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003cLabel fx:id\u003d\"sellerId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 35
    }
  },
  {
    "path": "src/main/resources/view/SellerListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    \u003cListView fx:id\u003d\"sellerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 8
    }
  },
  {
    "path": "src/main/resources/view/TabBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabBar\" stylesheets\u003d\"@TabPane.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003cTab fx:id\u003d\"personTab\" text\u003d\"Untitled Tab 1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003cTab fx:id\u003d\"bidderTab\" text\u003d\"Untitled Tab 1\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cVBox fx:id\u003d\"bidderList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"bidderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003cTab fx:id\u003d\"sellerTab\" text\u003d\"Untitled Tab 1\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003cVBox fx:id\u003d\"sellerList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"sellerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003cTab fx:id\u003d\"bidTab\" text\u003d\"Untitled Tab 2\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003cVBox fx:id\u003d\"bidList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                \u003cStackPane fx:id\u003d\"bidListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003cTab fx:id\u003d\"calenderTab\" text\u003d\"Untitled Tab 2\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003cVBox fx:id\u003d\"calendarMeetingList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                \u003cStackPane fx:id\u003d\"meetingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        \u003cTab fx:id\u003d\"propertyTab\" text\u003d\"Property Tab\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cVBox fx:id\u003d\"propertyList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u003cStackPane fx:id\u003d\"propertyListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 30,
      "kormingsoon": 21,
      "dianneloh9": 9,
      "munharsha": 8
    }
  },
  {
    "path": "src/main/resources/view/property/PropertyListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u003cLabel fx:id\u003d\"propertyName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cLabel fx:id\u003d\"sellerId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$sellerId\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cLabel fx:id\u003d\"askingPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$askingPrice\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cLabel fx:id\u003d\"propertyType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$propertyType\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \u003cLabel fx:id\u003d\"isRental\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$isRental\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 36
    }
  },
  {
    "path": "src/main/resources/view/property/PropertyListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    \u003cListView fx:id\u003d\"propertyListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.storage.JsonBidBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.bidderstorage.JsonBidderAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.storage.calendar.JsonMeetingBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.sellerstorage.JsonSellerAddressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        JsonBidBookStorage bidBookStorage \u003d new JsonBidBookStorage(temporaryFolder.resolve(\"bidBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonSellerAddressBookStorage sellerAddressBookStorage \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonSellerAddressBookStorage(temporaryFolder.resolve(\"selleraddressbook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonBidderAddressBookStorage bidderAddressBookStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonBidderAddressBookStorage(temporaryFolder.resolve(\"bidderaddressbook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        JsonMeetingBookStorage meetingBookStorage \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new JsonMeetingBookStorage(temporaryFolder.resolve(\"meetingaddressbook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, bidBookStorage,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidderAddressBookStorage, sellerAddressBookStorage, meetingBookStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        JsonBidBookStorage bidBookStorage \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "                new JsonBidBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionBidBook.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonBidderAddressBookStorage bidderAddressBookStorage \u003d new"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                JsonBidderAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonSellerAddressBookStorage sellerAddressBookStorage \u003d new"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                JsonSellerAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        JsonMeetingBookStorage meetingBookStorage \u003d new"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                JsonMeetingBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMeetingBook.json\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, bidBookStorage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidderAddressBookStorage, sellerAddressBookStorage, meetingBookStorage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                model.getSellerAddressBook(), model.getMeetingManager());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    private static class JsonBidBookIoExceptionThrowingStub extends JsonBidBookStorage {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        private JsonBidBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        public void saveBidBook(ReadOnlyBidBook bidBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static class JsonSellerAddressBookIoExceptionThrowingStub extends JsonSellerAddressBookStorage {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        private JsonSellerAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void saveSellerAddressBook(ReadOnlySellerAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private static class JsonBidderAddressBookIoExceptionThrowingStub extends JsonBidderAddressBookStorage {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        private JsonBidderAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void saveBidderAddressBook(ReadOnlyBidderAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "munharsha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    private static class JsonMeetingBookIoExceptionThrowingStub extends JsonMeetingBookStorage {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        private JsonMeetingBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public void saveMeetingBook(ReadOnlyMeetingManager meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "munharsha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 16,
      "kormingsoon": 43,
      "dianneloh9": 2,
      "munharsha": 24,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.getTypicalBidderAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.getTypicalSellerAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new BidBook(), new PropertyBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                getTypicalBidderAddressBook(), getTypicalSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                model.getAddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                model.getBidBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new PropertyBook(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                model.getBidderAddressBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                model.getSellerAddressBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                model.getMeetingManager()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 10,
      "munharsha": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyBidBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyMeetingManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.ReadOnlyPropertyBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "import seedu.address.model.bid.Bid;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.ReadOnlyBidderAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.calendar.CalendarMeeting;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.ReadOnlySellerAddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        public void addBid(Bid bid) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public void setMeetingManager(ReadOnlyMeetingManager meetingManager) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public ReadOnlyMeetingManager getMeetingManager() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public boolean hasMeeting(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public void deleteMeeting(CalendarMeeting target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public void addMeeting(CalendarMeeting meeting) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public void setMeeting(CalendarMeeting target, CalendarMeeting editedMeeting) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public ObservableList\u003cCalendarMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        public void updateFilteredMeetingList(Predicate\u003cCalendarMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        public ReadOnlyBidBook getBidBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        public ObservableList\u003cBid\u003e getFilteredBidList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        public void updateFilteredBidList(Predicate\u003cBid\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PROPERTY \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public void setPropertyBook(ReadOnlyPropertyBook propertyBook) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public ReadOnlyPropertyBook getPropertyBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public boolean hasProperty(Property property) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public void deleteProperty(Property target) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public void addProperty(Property property) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public void setProperty(Property target, Property editedProperty) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public ObservableList\u003cProperty\u003e getFilteredPropertyList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        public void updateFilteredPropertyList(Predicate\u003cProperty\u003e predicate) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BIDDER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public Path getBidderAddressBookFilePath() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void setBidderAddressBookFilePath(Path bidderAddressBookFilePath) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void setBidderAddressBook(ReadOnlyBidderAddressBook bidderAddressBook) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public ReadOnlyBidderAddressBook getBidderAddressBook() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public boolean hasBidder(Bidder bidder) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void deleteBidder(Bidder target) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void addBidder(Bidder bidder) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void setBidder(Bidder target, Bidder editedBidder) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public ObservableList\u003cBidder\u003e getFilteredBidderList() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void updateFilteredBidderList(Predicate\u003cBidder\u003e predicate) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SELLER \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public Path getSellerAddressBookFilePath() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void setSellerAddressBookFilePath(Path sellerAddressBookFilePath) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void setSellerAddressBook(ReadOnlySellerAddressBook sellerAddressBook) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public ReadOnlySellerAddressBook getSellerAddressBook() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public boolean hasSeller(Seller seller) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void deleteSeller(Seller target) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void addSeller(Seller seller) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void setSeller(Seller target, Seller editedSeller) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public ObservableList\u003cSeller\u003e getFilteredSellerList() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        public void updateFilteredSellerList(Predicate\u003cSeller\u003e predicate) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MEETING \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        public ReadOnlyBidBook getBidBook() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "            return new BidBook();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 28,
      "kormingsoon": 111,
      "dianneloh9": 42,
      "munharsha": 45,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.getTypicalBidderAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.getTypicalSellerAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new BidBook(), new PropertyBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                getTypicalBidderAddressBook(), getTypicalSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new BidBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new PropertyBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                getTypicalBidderAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                getTypicalSellerAddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new MeetingBook());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedModel.setSellerAddressBook(new SellerAddressBook());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedModel.setBidderAddressBook(new BidderAddressBook());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 9,
      "dianneloh9": 1,
      "munharsha": 7,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 3,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.getTypicalBidderAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.getTypicalSellerAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new BidBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new PropertyBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            getTypicalBidderAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            getTypicalSellerAddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            new MeetingBook());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(), model.getSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                model.getSellerAddressBook(), model.getMeetingManager());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 8,
      "dianneloh9": 1,
      "munharsha": 9,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.getTypicalBidderAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.getTypicalSellerAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new BidBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            new PropertyBook(), getTypicalBidderAddressBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            getTypicalSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(), model.getSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(), model.getSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(), model.getSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(), model.getSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 8,
      "dianneloh9": 1,
      "munharsha": 10,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.getTypicalBidderAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.getTypicalSellerAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new BidBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            new PropertyBook(), new BidderAddressBook(), new SellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new BidBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "            new PropertyBook(), getTypicalBidderAddressBook(), getTypicalSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 5,
      "dianneloh9": 2,
      "munharsha": 5,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.getTypicalBidderAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.getTypicalSellerAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.BidBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.MeetingBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.model.PropertyBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new BidBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), getTypicalBidderAddressBook(), getTypicalSellerAddressBook(), new MeetingBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), model.getBidBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new PropertyBook(), model.getBidderAddressBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                model.getSellerAddressBook(), model.getMeetingManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 2,
      "dianneloh9": 2,
      "munharsha": 6,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                        + PHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 21,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "               .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 11,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        BidderAddressBook bidderAddressBook \u003d new BidderAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        SellerAddressBook sellerAddressBook \u003d new SellerAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        BidBook bidBook \u003d new BidBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        MeetingBook meetingBook \u003d new MeetingBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        PropertyBook propertyBook \u003d new PropertyBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                bidBook,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                propertyBook,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                bidderAddressBook,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                sellerAddressBook,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                meetingBook);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                bidBook,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                propertyBook,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                bidderAddressBook,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                sellerAddressBook,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                meetingBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidBook, propertyBook, bidderAddressBook, sellerAddressBook, meetingBook)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidBook, propertyBook, bidderAddressBook, sellerAddressBook, meetingBook)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "munharsha"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, bidBook,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                propertyBook, bidderAddressBook, sellerAddressBook, meetingBook)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 1,
      "kormingsoon": 14,
      "dianneloh9": 1,
      "munharsha": 13,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/id/IdManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.id;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class IdManagerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void getNextId() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // using constructor with an initial id"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String prefix \u003d \"P\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        int previousIdNumber \u003d 1024;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Id previousId \u003d new Id(prefix, previousIdNumber);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        IdManager idManager \u003d new IdManager(previousId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        IntStream nextIds \u003d IntStream.iterate(previousIdNumber + 1, idNumber -\u003e idNumber + 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        nextIds.limit(5).forEach(idNumber -\u003e assertEquals(new Id(prefix, idNumber), idManager.getNextId()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // using factory method initialize"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        IdManager idManager2 \u003d IdManager.initialize(prefix);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        IntStream nextIds2 \u003d IntStream.iterate(1, idNumber -\u003e idNumber + 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        nextIds2.limit(5).forEach(idNumber -\u003e assertEquals(new Id(prefix, idNumber), idManager2.getNextId()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/id/IdTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.id;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class IdTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void increment() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String prefix \u003d \"P\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        int[] idNumbers \u003d {0, 1, 2, 3, 4, 5};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Stream\u003cId\u003e idStream \u003d Stream.iterate(new Id(prefix, 0), Id::increment);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        List\u003cId\u003e idList \u003d idStream.limit(6).collect(Collectors.toList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (int i \u003d 0; i \u003c idNumbers.length; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(new Id(prefix, idNumbers[i]), idList.get(i));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BidderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.testutil.BidderBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class BidderTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder bidder \u003d new BidderBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e bidder.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder editedAlice \u003d new BidderBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new BidderBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new BidderBuilder(ALICE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new BidderBuilder(ALICE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder aliceCopy \u003d new BidderBuilder(ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder editedAlice \u003d new BidderBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new BidderBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new BidderBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 1,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 4,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SellerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.testutil.SellerBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class SellerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller person \u003d new SellerBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller editedAlice \u003d new SellerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new SellerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new SellerBuilder(ALICE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new SellerBuilder(ALICE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller aliceCopy \u003d new SellerBuilder(ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller editedAlice \u003d new SellerBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new SellerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        editedAlice \u003d new SellerBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueBidderListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalBidder.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.UniqueBidderList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.testutil.BidderBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class UniqueBidderListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final UniqueBidderList uniqueBidderList \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBidderList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_bidderNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(uniqueBidderList.contains(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_bidderInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(uniqueBidderList.contains(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_bidderWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder editedAlice \u003d new BidderBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(uniqueBidderList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBidderList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void add_duplicateBidder_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueBidderList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBidderList.setBidder(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBidderList.setBidder(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueBidderList.setBidder(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.setBidder(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueBidderList expectedUniqueBidderList \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueBidderList, uniqueBidderList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Bidder editedAlice \u003d new BidderBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.setBidder(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueBidderList expectedUniqueBidderList \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueBidderList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueBidderList, uniqueBidderList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder_editedBidderHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.setBidder(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueBidderList expectedUniqueBidderList \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueBidderList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueBidderList, uniqueBidderList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidder_editedBidderHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueBidderList.setBidder(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove_nullBidder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBidderList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove_bidderDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueBidderList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove_existingPerson_removesBidder() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueBidderList expectedUniqueBidderList \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueBidderList, uniqueBidderList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setPersons_nullUniqueBidderList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBidderList.setBidders((UniqueBidderList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidders_uniqueBidderList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueBidderList expectedUniqueBidderList \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueBidderList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.setBidders(expectedUniqueBidderList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueBidderList, uniqueBidderList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidders_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBidderList.setBidders((List\u003cBidder\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidders_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        List\u003cBidder\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueBidderList.setBidders(personList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueBidderList expectedUniqueBidderList \u003d new UniqueBidderList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueBidderList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueBidderList, uniqueBidderList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setBidders_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        List\u003cBidder\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueBidderList.setBidders(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e uniqueBidderList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniqueSellerListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.testutil.TypicalSeller.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.UniqueSellerList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.testutil.SellerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class UniqueSellerListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private final UniqueSellerList uniqueSellerList \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSellerList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_bidderNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertFalse(uniqueSellerList.contains(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_bidderInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(uniqueSellerList.contains(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void contains_bidderWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller editedAlice \u003d new SellerBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertTrue(uniqueSellerList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSellerList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void add_duplicateSeller_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueSellerList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSellerList.setSeller(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSellerList.setSeller(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueSellerList.setSeller(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.setSeller(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueSellerList expectedUniqueSellerList \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueSellerList, uniqueSellerList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        Seller editedAlice \u003d new SellerBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.setSeller(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueSellerList expectedUniqueSellerList \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueSellerList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueSellerList, uniqueSellerList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller_editedSellerHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.setSeller(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueSellerList expectedUniqueSellerList \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueSellerList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueSellerList, uniqueSellerList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSeller_editedSellerHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueSellerList.setSeller(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove_nullSeller_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSellerList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove_bidderDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniqueSellerList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void remove_existingPerson_removesSeller() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueSellerList expectedUniqueSellerList \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueSellerList, uniqueSellerList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setPersons_nullUniqueSellerList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSellerList.setSellers((UniqueSellerList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellers_uniqueSellerList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueSellerList expectedUniqueSellerList \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueSellerList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.setSellers(expectedUniqueSellerList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueSellerList, uniqueSellerList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSellerList.setSellers((List\u003cSeller\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        List\u003cSeller\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        uniqueSellerList.setSellers(personList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        UniqueSellerList expectedUniqueSellerList \u003d new UniqueSellerList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        expectedUniqueSellerList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertEquals(expectedUniqueSellerList, uniqueSellerList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void setSellers_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        List\u003cSeller\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniqueSellerList.setSellers(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e uniqueSellerList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/model/price/PriceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.price;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(-5));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(-0.99));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // valid prices"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(Price.isValidPrice(100));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(Price.isValidPrice(10.2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(Price.isValidPrice(10.333333));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // invalid prices"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(Price.isValidPrice(-100));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(Price.isValidPrice(-10.2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(Price.isValidPrice(-10.333333));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void priceToString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Price price1 \u003d new Price(10);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Price price2 \u003d new Price(10.2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Price price3 \u003d new Price(10.22222);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(\"$10.00\", price1.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(\"$10.20\", price2.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(\"$10.22\", price3.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/property/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/property/PropertyNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PropertyName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void constructor_invalidPropertyName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String invalidPropertyName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PropertyName(invalidPropertyName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void isValidPropertyName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PropertyName.isValidPropertyName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyName.isValidPropertyName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyName.isValidPropertyName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyName.isValidPropertyName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyName.isValidPropertyName(\"sunrise*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyName.isValidPropertyName(\"sunrise heights\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyName.isValidPropertyName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyName.isValidPropertyName(\"sunrise the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyName.isValidPropertyName(\"Capital Rise\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyName.isValidPropertyName(\"Sunrise Heights Block With Balconies 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/property/PropertyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void isSameProperty() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/property/PropertyTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.model.property;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PropertyType(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void constructor_invalidPropertyType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String invalidPropertyType \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PropertyType(invalidPropertyType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void isValidPropertyType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // null type"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PropertyType.isValidPropertyType(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // invalid types"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyType.isValidPropertyType(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyType.isValidPropertyType(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyType.isValidPropertyType(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertFalse(PropertyType.isValidPropertyType(\"HDB*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // valid types"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyType.isValidPropertyType(\"condo condo\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyType.isValidPropertyType(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyType.isValidPropertyType(\"bungalow 5 rooms\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyType.isValidPropertyType(\"Capital Rise\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(PropertyType.isValidPropertyType(\"Sunrise Heights Block With Balconies 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, invalidTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 5,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableSellerAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class JsonSerializableSellerAddressBookTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        //assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.bidderstorage.JsonBidderAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "munharsha"
        },
        "content": "import seedu.address.storage.calendar.JsonMeetingBookStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.storage.sellerstorage.JsonSellerAddressBookStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Marcon2509"
        },
        "content": "        JsonBidBookStorage bidBookStorage \u003d new JsonBidBookStorage(getTempFilePath(\"bb\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonBidderAddressBookStorage bidderAddressBookStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonBidderAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        JsonSellerAddressBookStorage sellerAddressBookStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "                new JsonSellerAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "munharsha"
        },
        "content": "        JsonMeetingBookStorage meetingBookStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                new JsonMeetingBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, bidBookStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "munharsha"
        },
        "content": "                bidderAddressBookStorage, sellerAddressBookStorage, meetingBookStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Marcon2509": 1,
      "kormingsoon": 7,
      "munharsha": 4,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BidderBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class BidderBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String DEFAULT_ID_PREFIX \u003d \"B\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final int DEFAULT_ID_NUMBER \u003d 12;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id \u003d new Id(DEFAULT_ID_PREFIX, DEFAULT_ID_NUMBER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderBuilder(Bidder bidderToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name \u003d bidderToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone \u003d bidderToCopy.getPhone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bidderToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id \u003d bidderToCopy.getId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the {@code Name} of the {@code Bidder} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Bidder} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the {@code Phone} of the {@code Bidder} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the {@code Id} of the {@code Bidder} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public BidderBuilder withId(String prefix, int number) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.id \u003d new Id(prefix, number);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Bidder build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Bidder(name, phone, tags, id);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Person(name, phone, tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 1,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SellerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class SellerBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final String DEFAULT_ID_PREFIX \u003d \"S\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final int DEFAULT_ID_NUMBER \u003d 12;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id \u003d new Id(DEFAULT_ID_PREFIX, DEFAULT_ID_NUMBER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerBuilder(Seller bidderToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        name \u003d bidderToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        phone \u003d bidderToCopy.getPhone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bidderToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        id \u003d bidderToCopy.getId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the {@code Name} of the {@code Seller} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Seller} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the {@code Phone} of the {@code Seller} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Sets the {@code Id} of the {@code Seller} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public SellerBuilder withId(String prefix, int number) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        this.id \u003d new Id(prefix, number);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public Seller build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new Seller(name, phone, tags, id);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBidder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.bidderaddressbook.BidderAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.bidder.Bidder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A utility class containing a list of {@code Bidder} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class TypicalBidder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder ALICE \u003d new BidderBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"94351253\").withId(\"B\", 1)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder BENSON \u003d new BidderBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withId(\"B\", 2).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder CARL \u003d new BidderBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"95352563\").withPhone(\"9482442\").withId(\"B\", 3).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder DANIEL \u003d new BidderBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"87652533\").withTags(\"friends\").withId(\"B\", 4).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder ELLE \u003d new BidderBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"9482224\").withId(\"B\", 5)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder FIONA \u003d new BidderBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"9482427\").withId(\"B\", 6)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder GEORGE \u003d new BidderBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withId(\"B\", 7)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // Manually added - Bidder\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder AMY \u003d new BidderBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withId(\"B\", 12)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Bidder BOB \u003d new BidderBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withId(\"B\", 13)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns an {@code BidderAddressBook} with all the typical persons."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static BidderAddressBook getTypicalBidderAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        BidderAddressBook ab \u003d new BidderAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (Bidder bidder : getTypicalBidders()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            ab.addBidder(bidder);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static List\u003cBidder\u003e getTypicalBidders() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"95352563\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"87652533\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 13,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSeller.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.person.seller.Seller;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "import seedu.address.model.selleraddressbook.SellerAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " * A utility class containing a list of {@code Seller} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "public class TypicalSeller {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller ALICE \u003d new SellerBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"94351253\").withId(\"S\", 1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller BENSON \u003d new SellerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withId(\"S\", 2).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller CARL \u003d new SellerBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"95352563\").withPhone(\"9482442\").withId(\"S\", 3).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller DANIEL \u003d new SellerBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"87652533\").withTags(\"friends\").withId(\"S\", 4).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller ELLE \u003d new SellerBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"9482224\").withId(\"S\", 5)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller FIONA \u003d new SellerBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withPhone(\"9482427\").withId(\"S\", 6)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller GEORGE \u003d new SellerBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withId(\"S\", 7)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    // Manually added - Seller\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller AMY \u003d new SellerBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).withId(\"S\", 12)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static final Seller BOB \u003d new SellerBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withId(\"S\", 13)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     * Returns an {@code SellerAddressBook} with all the typical persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static SellerAddressBook getTypicalSellerAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        SellerAddressBook ab \u003d new SellerAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        for (Seller bidder : getTypicalSellers()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "            ab.addSeller(bidder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    public static List\u003cSeller\u003e getTypicalSellers() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kormingsoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kormingsoon": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/properties/PropertyBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.testutil.properties;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.id.Id;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.price.Price;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.IsRental;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.PropertyName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.PropertyType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * A utility class to help with building Property objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class PropertyBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String PREFIX \u003d \"P\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String SELLER_ID_PREFIX \u003d \"S\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final int DEFAULT_PROPERTY_ID \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Ang Mo Kio Drive, #01-23\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String DEFAULT_PROPERTY_NAME \u003d \"Ang Mo Kio Residence\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final int DEFAULT_SELLER_ID \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final double DEFAULT_ASKING_PRICE \u003d 123.45;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String DEFAULT_PROPERTY_TYPE \u003d \"HDB 5 room\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String DEFAULT_IS_RENTAL \u003d \"No\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final boolean DEFAULT_IS_CLOSED_DEAL \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private PropertyName propertyName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Id sellerId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Price askingPrice;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private PropertyType propertyType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private IsRental isRental;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private boolean isClosedDeal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Creates a {@code PropertyBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyName \u003d new PropertyName(DEFAULT_PROPERTY_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        sellerId \u003d new Id(SELLER_ID_PREFIX, DEFAULT_SELLER_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        askingPrice \u003d new Price(DEFAULT_ASKING_PRICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyType \u003d new PropertyType(DEFAULT_PROPERTY_TYPE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        isRental \u003d new IsRental(DEFAULT_IS_RENTAL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        isClosedDeal \u003d DEFAULT_IS_CLOSED_DEAL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Initializes the PropertyBuilder with the data of {@code propertyToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder(Property propertyToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        address \u003d propertyToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyName \u003d propertyToCopy.getPropertyName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        sellerId \u003d propertyToCopy.getSellerId();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        askingPrice \u003d propertyToCopy.getAskingPrice();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        propertyType \u003d propertyToCopy.getPropertyType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        isRental \u003d propertyToCopy.getIsRental();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        isClosedDeal \u003d propertyToCopy.isClosedDeal();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Sets the {@code address} of the {@code Property} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Sets the {@code propertyName} of the {@code Property} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder withPropertyName(String propertyName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.propertyName \u003d new PropertyName(propertyName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Sets the {@code sellerId} of the {@code Property} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder withSellerId(int sellerId) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.sellerId \u003d new Id(SELLER_ID_PREFIX, sellerId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Sets the {@code askingPrice} of the {@code Property} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder withAskingPrice(double askingPrice) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.askingPrice \u003d new Price(askingPrice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Sets the {@code propertyType} of the {@code Property} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder withPropertyType(String propertyType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.propertyType \u003d new PropertyType(propertyType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Sets the {@code isRental} of the {@code Property} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder withIsRental(IsRental isRental) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.isRental \u003d isRental;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Sets the {@code isClosedDeal} of the {@code Property} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public PropertyBuilder withIsClosedDeal(boolean isClosedDeal) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.isClosedDeal \u003d isClosedDeal;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * Builds the property."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The property."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Property build() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new Property(propertyName, sellerId, address,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                askingPrice, propertyType, isRental, isClosedDeal);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/properties/TypicalProperties.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package seedu.address.testutil.properties;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import seedu.address.model.property.Property;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TypicalProperties {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Property PROPERTY_A \u003d new PropertyBuilder().build();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final Property PROPERTY_B \u003d new PropertyBuilder()"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            .withPropertyType(\"Condo\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            .withPropertyName(\"Bayfront Condominium\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            .withAddress(\"101 Bayfront Drive\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            .withAskingPrice(100000)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            .withSellerId(2)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private TypicalProperties() {} // prevent instantiation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 18
    }
  }
]
