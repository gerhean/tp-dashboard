[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![inventoryinator](docs/images/inventoryinator.jpg)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "Inventoryinator is built for dedicated and experienced gamers of MMORPGs who want"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "fast inventory management with CLI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "Most games lack robust inventory management. This project simplifies management"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "and tracking of inventories for hardcore gamers. It allows users to keep track"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "of their inventory through quick commands that support many types of shortcuts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "Users can also save recipes and check if they have sufficient materials in"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "their inventory to utilise a recipe."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "* Java 11"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "**Getting Started**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "* Load the application from the .jar file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "java -jar InvInator.jar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "```"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Use the `help` command to access the user guide, or go there [_directly_](docs/UserGuide.md)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Want to help develop Inventoryinator?**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Go [_here_](docs/DeveloperGuide.md) to access the Developer Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "This project is based on the AddressBook-Level3 project created by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 5,
      "aqcd": 20,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    archiveName \u003d \u0027inventoryinator.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "aqcd": 2,
      "-": 73
    }
  },
  {
    "path": "build/resources/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "justacasul": 9
    }
  },
  {
    "path": "build/resources/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 38,
      "blackonyyx": 2
    }
  },
  {
    "path": "build/resources/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 9
    }
  },
  {
    "path": "build/resources/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 12
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "You can reach us via the issues tracker of this [repository](https://github.com/AY2021S1-CS2103T-F13-1/tp/issues)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Shi Jing Lin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![shijinglin](images/aqcd.png)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[homepage](https://aqcd.github.io/)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[github](https://github.com/aqcd)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[team portfolio](https://github.com/AY2021S1-CS2103T-F13-1)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Role: Project Manager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Workflow Assignment"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Team Lead"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Git Expert"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Stephen Tan"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![stephentan](images/blackonyyx.png)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[github](http://github.com/blackonyyx)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[portfolio](team/stephentan.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Documentation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Javadoc Standards"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Liu Zhengdao"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![liuzhengdao](images/justacasul.png)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[github](https://github.com/justacasul)] "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[portfolio](team/liuzhengdao.md)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * GUI Expert"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Code Quality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Kheng Hun"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![siewkhenghun](images/khenghun.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[github](https://github.com/khenghun)]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[portfolio](team/siewkhenghun.md)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Scheduling and Tracking"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Deliverables and deadlines"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Testing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Rahul"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![rahul](images/rahul0506.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[github](https://github.com/Rahul0506)]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[[portfolio](team/rahul.md)]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Responsibilities: "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * Continuous Integration"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    * DevOps"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 47,
      "-": 33
    }
  },
  {
    "path": "docs/CommandSequenceDiagram.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: CommandSequenceDiagrams"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#Command Implementation Details"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "This will detail the planned sequence flow for commands, and help the developer"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "understand what is going on under the hood."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Add Item Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![AddItemSequence](images/commandseqdiagrams/AddItemSequenceDiagram.png)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Add Quantity Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![AddQuantitySequence](images/commandseqdiagrams/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Delete Item Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![DeleteItemSequence](images/commandseqdiagrams/DeleteItemSequenceDiagram.png)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Delete Recipe Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![DeleteRecipe](images/commandseqdiagrams/DeleteRecipeSequenceDiagram.png)"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 24
    }
  },
  {
    "path": "docs/Configuration.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Configuration guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Certain properties of the application can be controlled (e.g user preferences file location, logging level)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " through the configuration file (default: `config.json`)."
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# DevOps"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 1,
      "-": 79
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#Developer Guide"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "This is the developer guide for `Inventoryinator` a brownfield project evolved from [AddressBook3](https://github.com/nus-cs2103-AY2021S1/tp)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![inventoryinator](images/inventoryinator.jpg)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Inventoryinator is a **desktop app for game inventories, optimized for use via a Command Line Interface** (CLI) "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Inventoryinator can"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "get your inventory management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [EndUserPersona](EndUserPersona.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [Usecases](Usecases.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* [Implementation Details and Sequence Flow](CommandSequenceDiagram.md)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Refer to the guide [UserGuide](UserGuide.md)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![Archietecture Diagram](images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-F13-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " for the scenario where the user issues the command `delr bob\u0027s toenail -r 1`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![architecture](images/commandseqdiagrams/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-F13-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-F13-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. `Logic` uses the `InventoryinatorParser` class to parse the user command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delr bob\u0027s toenail -r 1\")` API call."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![Interactions Inside the Logic Component for the `delr bob\u0027s toenail -r 1` Command](images/commandseqdiagrams/DeleteRecipeSequenceDiagram.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F13-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* stores the Inventoryinator data"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cItem\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-F13-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* can save the inventory data in json format and read it back."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* can save recipes data in json format and read it back. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* can save location data in json format and read it back."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Classes used by multiple components are stored in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedInventoryinator`. It extends `Inventoryinator`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " with an undo/redo history, stored internally as an `inventoryinatorStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* `VersionedInventoryinator#commit()` — Saves the current inventory state in its history."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* `VersionedInventoryinator#undo()` — Restores the previous inventory state from its history."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* `VersionedInventoryinator#redo()` — Restores a previously undone inventory state from its history."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitInventoryinator()`, `Model#undoInventoryinator()` and `Model#redoInventoryinator()` respectively."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedInventoryinator` will be initialized with"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " the initial inventory state, and the `currentStatePointer` pointing to that single inventory state."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Step 2. The user executes `deli Bob’s 28th finger` command to delete the matching item in the inventory. The `deli`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "command calls `Model#commitInventoryinator()`, causing"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " the modified state of the inventory after the `deli Bob’s 28th finger` command executes to be"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " saved in the `inventoryinatorStateList`, and the `currentStatePointer` is shifted to the newly inserted inventory state."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Step 3. The user executes `addi Bob’s 6th regret -q 8` to add a new item."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " The `addi` command also calls `Model#commitInventoryinator()`, causing another modified inventory state to be"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  saved into the `inventoryinatorStateList`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Note:** If a command fails its execution, it will not call `Model#commitInventoryinator()`, so the inventory"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " state will not be saved into the `inventoryinatorStateList`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Step 4. The user now decides that adding the item was a mistake, and decides to undo that action by executing the `undo` command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " The `undo` command will call `Model#undoInventoryinator()`, which will shift the `currentStatePointer` once to the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " left, pointing it to the previous inventory state, and restores the inventory to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Note:** If the `currentStatePointer` is at index 0, pointing to the initial Inventoryinator state, then there are "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "no previous Inventoryinator states to restore. The `undo` command uses `Model#canUndoinventoryinator()` to check if this"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoInventoryinator()`, which shifts the `currentStatePointer`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " once to the right, pointing to the previously undone state, and restores the inventory to that state."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Note:** If the `currentStatePointer` is at index `inventoryinatorStateList.size() - 1`, pointing to the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " latest inventory state, then there are no undone Inventoryinator states to restore. The `redo` command uses"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  `Model#canRedoInventoryinator()` to check if this is the case. If so, it will return an error to the user"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the inventory, such as `list`,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " will usually not call `Model#commitInventoryinator()`, `Model#undoInventoryinator()` or `Model#redoInventoryinator()`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " Thus, the `inventoryinatorStateList` remains unchanged."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitInventoryinator()`. Since the `currentStatePointer`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " is not pointing at the end of the `inventoryinatorStateList`, all inventory states after the `currentStatePointer`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire inventory."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  * Pros: Will use less memory (e.g. for `deli/delr`, just save the item/recipe being deleted)."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* **Alternative 3:** Store a LinkedList of Negations of non-viewing commands."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  * Pros: Similar to **Alternative 2** but instead of an explicit undo for each command, store a"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   size k LeakyStack of commands. This is easier to implement, but may be impacted by complex symantics of"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementing macro commands. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  * Cons: Harder to implement."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* has a need to manage a significant number of items in a game."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* is very comfortable with using CLI apps"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Value proposition**: manage inventory faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### User stories for V1.1"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                             |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "| `* * *`  | user                                       | add a new item                 |                                                                        |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "| `* * *`  | user                                       | add a recipe                   |                                                                        |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "| `* * *`  | user                                       | delete a item                  | remove item that I no longer need to track                             |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "| `* * *`  | user                                       | delete a recipe                | remove recepies that I no longer need to use                           |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "| `* * *`  | user                                       | find a item by name            | locate details of items without having to go through the entire list   |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "| `* * `   | user                                       | tag a item by location         | locate items by where they are located                                 |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "| `* * `   | user                                       | use del command to delete both recipes and items         | improve user experience in the application   |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "*{More to be added in later iterations}*"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "4.  A user should be able to view visually the output from the Application"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* **Item**: An item represents an object you obtain in a game. Eg a \u003cu\u003eRock\u003c/u\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* **Recipe**: An recipe is associated with multiple items, and represents the consumption of items in the input,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " to produce an item of the output. Eg: a 3 \u003cu\u003eSticks\u003c/u\u003e -\u003e \u003cu\u003eStaff\u003c/u\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* **Location**: The place where a Item can be found in game. Eg: \u003cu\u003eSleepywood\u003c/u\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* **Inventory**: The entire state of the inventoryinator, including recipes, items and item quantities."
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 105,
      "-": 190
    }
  },
  {
    "path": "docs/Documentation.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Documentation guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#Documentation Style and Methods:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "**Setting up and maintaining the project website:**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* We used [**Jekyll**](https://jekyllrb.com/) to manage the documentation via Github Pages."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* The `docs/` folder is used for documentation about the project, the userguide, developer guide, usecases, userprofiles and more."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Style guidance:**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Our project follows the [**_Google developer documentation style guide_**](https://developers.google.com/style)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "**Diagrams:**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Our UML diagrams are done via [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 8,
      "-": 16
    }
  },
  {
    "path": "docs/EndUserPersona.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: EndUserPersona"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# EndUserPersona"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "This page documents the Persona of our target audiences, and how we would like to bring value to them through "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "`Inventoryinator`. These personas are structured in such that we capture the target group\u0027s needs in their day-to-day lives in the before scenario"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "and how `Inventoryinator` can transition their lives to the after scenario."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Through this, we come up with a set of UserStories we would like to implement as features in `Inventoryinator` "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## Persona"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Persona #1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Stephen the Hardcore Gamer (Age 21)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![progamermoves](images/persona/hardcoregamer.jpg)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Bio: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Stephen is a hardcore gamer who plays games 10 hours a day. He is a guild leader in the game"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "World of Warfare, and spends a large portion of that time book keeping and managing his accounts for his guild."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "He also has to juggle helping out the new members as well as distributing resources out of his accounts. Doing "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "this everyday has caused some book-keeping errors in his distributions and ledgers. He wants a more intuitive "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "way to manage and track his resources, through the use of a command line interface to perform “macros” on these "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "repetitive tasks. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Goals: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Manage inventories of guild members"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Achieving success in battling other guilds and defeating raid bosses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Frustrations:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "He finds it difficult to keep track of each member’s inventory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "He struggles to plan the distribution of resources in his guild accurately."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "He finds it tedious to do a manual update on all these repetitive tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 1 (Before):  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Stephen wants to accurately manage his guild’s inventory and ensure accurate distribution of resources. He "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "spends more than 4 hours a day in Microsoft Word trying to figure out a consolidated ledger of materials in "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "his different accounts. He manually updates each item in his Excel sheet one by one each day taking up precious"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " time away from leading raids. and tearing shit up  He also has to manually select each item to update and check "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " how much crafted material he can craft using the current materials stored in the guild inventories. Doing so "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " is very tedious and time consuming, and also causes him to make mistakes in his tabulation."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 2 (After): "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Using `Inventoryinator`, he can find the accurate quantities of resources inside the inventory management, "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "as well as the number distributed in his guild account inventories. Then he needs to update his ledger to "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "consolidate the total amount of resources. He is also able to check the price of crafting goods on his game, "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "and simulate the number of crafted goods to make using his combined ledger to calculate potential profits. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Based on the profit shown, he can then decide if he wants to perform the crafts, and indicate to the "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "application to perform the craft of a certain quantity. The application will update automatically to reflect "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "and display his latest inventory."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Persona #2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### James the Casual Gamer (Age 16)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![xqcow](images/persona/casulgamer.jpg)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Bio: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "James just started getting into games but feels very behind because many of his friends and guildmates are"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " experienced in the game he plays as well as gaming in general. He is unfamiliar with the conventional game "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " mechanic of crafting and often has to spend a lot of time researching online to figure out what to do. He "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " spends more time reading guides, and crafting by trial and error, slowing down his progress in the game."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Goals:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Manage his inventory easily."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Have quick ways to access crafting information and recipes on the game."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Increase his familiarity with the game’s crafting system."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Frustrations:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "He finds it difficult to keep track of all his inventory in the game."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "He has to spend a lot of time researching what items he is able to craft or should craft to progress in the game."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 1 (Before): "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "James wants to craft a weapon with enough attack damage in order to kill a boss for a quest. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "In order to craft this weapon, he needs to craft many intermediate items. He has crafted similar weapons "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "before in the past but has forgotten where he needs to collect the raw materials for these intermediate items,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " and how much raw materials he will ultimately need in order to craft the weapon. He spends an hour looking up"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  the game’s wiki and collating the data before he finally compiles a list of locations he should go to acquire"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   the materials and calculates how much materials he will need."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 2 (After): "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "James wants to craft a weapon with enough attack damage in order to kill a boss for a quest. He "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "uses `Inventoryinator` to search for weapons with at least the minimum damage required and selects "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "one of the weapons. `Inventoryinator` shows James the total raw materials needed for the weapon based "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "on the recipes he had input the previous time he crafted it and places he had recorded to acquire these materials. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "James goes back into his game and begins his collection."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Persona #3"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Serene the Hardcore Completionist (Age 25)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![catchemall](images/persona/completionist.jpg)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Bio:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Serene is an office lady who likes to play Build Wars 2 whenever she is off work."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " She is one of the top players in BW2 with 97.2% of the game achievements, limited only by her game time. She"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  spends a long time capturing endemic life and taming pets for her last few achievements, but tends to forget those "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "  that she has already completed. She just wants something to keep track of what she has already done at a quick glance."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Goals:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Get all the achievements."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Easily track achievements and progress."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Frustrations:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Forgets her progress on some achievements."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Scenario 1 (Before):"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Serene has caught a new goblin and wants to move on to her next capture. However, she has to travel back to town to open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " her familiar storage to check one-by-one what she has already caught, and cross-check with the game wiki what she is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " missing. By the time she is done, an hour has passed, and she has to go to sleep or she’ll be late for work tomorrow. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Scenario 2 (After):"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Serene opens the `Inventoryinator` and marks goblin as captured. She then filters by uncaptured, and sees kappa "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "next on her list. After a quick check of kappa spawns, she immediately travels to the stream and begins "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "looking for kappas."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Persona #4"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Aila the Hardcore Merchant (Age 20)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![belle](images/persona/merchant.jpg)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Bio:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Aila is a college student who plays Penultimate Fiction XIV. She likes to keep track of hot commodities on the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " player market, which decides her next action on which materials to bulk import from the guilds that she works with."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Goals:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Make lots of money in game"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Frustrations:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Too many materials to keep track of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Unable to keep track of all her transactions"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 1 (Before):"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "After finishing her lectures, Aila visits the in-game market to see which items are currently selling like "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "hot cakes. She then runs to her warehouse to check whether she has the materials needed to craft them, and"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " tallying them one-by-one takes quite a toll on her. By the time she sent out the ingredient list to her "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " suppliers, it is already time for her next lecture."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 2 (After):"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "After checking the in-game market, Aila opens the `Inventoryinator`, opens up the recipe for the hot item, and "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "realizes she is missing 250k bear asses, 129k rat whiskers, and 2k phoenix beaks. She quickly contacts her "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "suppliers, then proceeds to crafting."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Persona #5"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Rahul the Bot Farmer (Age 35)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![hackerboi](images/persona/botfarmer.jpg)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Bio:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Rahul is a bot farmer, who sets up automated game accounts to farm profitable materials in the game World of Wowcraft to sell on the free market. He has over 10 accounts farming currently, and he makes a living off managing these bot accounts. He also runs similar accounts for other games like Diablow III."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Goals:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Make lots of money"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "####Frustrations:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Too many materials to keep track of in over 10 accounts in a single game."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 1 (Before):"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "As a professional bot farmer, Rahul has to log into each account daily to tabulate the amount of farmed resources and "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "consolidate it with his main storage. He also has to check the market price of each good"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Scenario 2 (After):"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Using `Inventoryinator`, he can find the accurate quantities of resources inside the inventory management, "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "as well as the number distributed in his many account inventories. Then he needs to update his ledger to "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "consolidate the total amount of resources. He is also able to check the quantity of farmed materials on his game. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Based on the quantity shown, he can then decide if he wants to sell, and update the stock in the application. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "and display his new inventory."
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 160
    }
  },
  {
    "path": "docs/Logging.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Logging guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#Logging Guide"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* We are using `java.util.logging` package for logging."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "*  The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "*  Log messages are output through the console and to a `.log` file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "*  The output logging level can be controlled using the `logLevel` setting in the configuration file (See the [Configuration guide](Configuration.md) section)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **When choosing a level for a log message**, follow the conventions given in [_[se-edu/guides] Java: Logging conventions_](https://se-education.org/guides/conventions/java/logging.html)."
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "-": 11
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#Setting Up and Getting Started"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [Inventoryinator architecture](DeveloperGuide.md)."
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "-": 42
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: Testing Documentation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Testing Documentation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "This page will document our testing for classes in Inventoryinator. Segmented into:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Unittesting"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Integration Testing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Hybrid Testing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Acceptance Testing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    java -jar InvInator.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample items and recipes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    The window size may not be optimum."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   1. Resize the window to an pre-set size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. TODO"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## UnitTesting"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## Integration Testing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## Hybrid Testing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## Acceptance testing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 42,
      "-": 33
    }
  },
  {
    "path": "docs/Usecases.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: UseCases"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Usecase Documentation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "This document will store the **feature usecases** and **workflow usecases** in our designed product `Inventoryinator`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "For more information on how we come up with our Workflow Usecases, please check [Personas](EndUserPersona.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Feature Usecases"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![usecases](images/usecases/UsecaseDiagram1.png)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Usecase 1 Create Item"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Software System: Inventoryinator (`inv`)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Use Case UC1 - Create Item"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Precondition: Inventoryinator is running"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Actor: User"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. User enters in input to create an item"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2. `inv` validates a correct input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3. `inv` registers the parsed input as a new item"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "4. `inv` displays successful message of creation of an item"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Extension:** \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a. `inv` detects a error in given input\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a1. `inv` returns a `CommandUnsuccessful` message to user\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a2. User inputs new data\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Steps 2a1-2a2 repeat until data is correct, or user enters a different command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3b. `inv` detects item already exists\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3b1. `inv` adds quantity of item from command into registered item.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3b2. `inv` displays that item quantity is updated.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Usecase ends"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Usecase 2 View Item"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Software System: Inventoryinator (`inv`)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Use Case UC2 - View Item"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Precondition: Inventoryinator is running"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Actor: User"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. User enters in input to view an item"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2. `inv` validates that given input conforms to command format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3. `inv` displays the Successful command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a. `inv` detects a error in given input\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a1. `inv` returns a `CommandUnsuccessful` message to user\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a2. User inputs new data\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Steps 2a1-2a2 repeat until data is correct, or user enters a different command\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Usecase ends."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Usecase 3 Create Recipe"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Software System: Inventoryinator (`inv`)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Use Case UC3 - Create Recipe"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Precondition: Inventoryinator is running"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Actor: User"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. User enters in input to create an recipe for an item"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2. `inv` validates the user inputs and parses the fields given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3. `inv` creates and registers the recipe for an item"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "4. `inv` displays the successful message of creation of an recipe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Extension:** "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a. `inv` detects a error in given input\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a1. `inv` returns a `CommandUnsuccessful` message to user\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2a2. User inputs new data\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Steps 2a1-2a2 repeat until data is correct, or user enters a different command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2b. `inv` detects that the item being crafted does not exist as of yet\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2b1. `inv` creates a new item with the appropriate fields, or if not, the default fields\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Usecase resumes from step 3 normally"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Usecase 4 List items"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Software System: Inventoryinator (`inv`)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Use Case UC4 - List items"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Precondition: Inventoryinator is running"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Actor: User\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. User enters command to list all items"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2. `inv` parses command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3. `inv` returns the contents registered"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Extension:**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3a. `inv` does not contain any items\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3a1. Returns a empty List of items\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Usecase end"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Workflow Usecases"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#### Workflow Usecase 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Software System: Inventoryinator (`inv`)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Use Case WU1 - Querying and validating uniqueness of items"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Precondition: Inventoryinator is running, a and b are registered in system already "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Actor: Hardcore Gamer"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. User adds 10 of item a and 20 of item b (UC1)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "2. User lists items (UC4)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "3. `inv` returns item a and item b with quantity increased 10 and 20 respectively"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 108
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![inventoryinator](images/inventoryinator.jpg)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Inventoryinator is a **desktop app for game inventories, optimized for use via a Command Line Interface** (CLI) "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Inventoryinator can"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "get your inventory management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. Download the latest `inventoryinator.jar` from [here](https://github.com/AY2021S1-CS2103T-F13-1/tp/releases)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your Inventoryinator."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. Double-click the file to start the app. The GUI like below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   * **`list`** : Lists all items stored in Inventoryinator."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   * **`addi`**`banana -q 44 -d edible banana -l Bob\u0027s Banana Farm` : Adds a item named `banana` to the Inventoryinator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   * **`add`** `banana -q 10` Add a quantity of 10 to the Bananas"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   * **`deli`**`-n banana` : Deletes the banana item from the Inventoryinator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "   * **`delr`**`-n banana` **`-r`** `1` : Deletes the first recipe from the item `bananas` "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "___________________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## Convention:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- term:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Command/variable term\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **term**:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Compulsory to be included in the command\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- \\\u003cterm\\\u003e:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;User Input Variable like recipe name or item name\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- \\[term1/ term2\\]:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Optional terms to specify parameters, only 1 of term1 or term2 _ should be input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- -term: Option field to add to or a argument parameter"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- default:\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;If no parameter is given as input, this will be the input parameter."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "___________________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Add Item** | `addi` \u003c**item name**\u003e \\[-q \\\u003cqty\\\u003e\\] \\[-d \\\u003cdesc\\\u003e\\] \\[-l \\\u003clocation1, location2…\\\u003e\\] "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Add Recipe** | `addr` \\\u003c**product name**\\\u003e **-items** **\\\u003citem name\\[quantity\\]**, … \u003e \\[-pc \\\u003cnum\u003e\\] \\[-d \\\u003cdesc\\\u003e\\]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Add quantity to item** | `add` \u003c**item name**\u003e -q \u003c**qty**\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**List** | `list` \\[-i (default) / -r\\]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Delete item** | `deli` \\\u003citem name\\\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Delete Recipe** | `delr` \\\u003citem name\\\u003e \\[-r index\\]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Find** | `find` \\\u003csearch string\\\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**View** | `view` \u003citem name\u003e \\[-r / -c / -d (default)/ -all\\]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Help** | `help` \\[command\\]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**Bye** | `bye`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:** "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `help` - lists all commands and how to use them (Current implementation)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `help` \\[command\\]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Displays a help sheet with brief descriptions of each command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Will eventually be extended to get help about specific commands."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Adding a item: `addi`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `addi` - adds a new item  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\t "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `addi` **-n** \\\u003c**item name**\\\u003e \\[-q \\\u003cqty\\\u003e\\] \\[-d \\\u003cdesc\\\u003e\\] \\[-l \\\u003clocation1, location2…\\\u003e\\] "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **q:**\tqty indicates quantity to add (default: 1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **d:**\tdesc indicates description of item (default: “No description given.”)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **l:**\tlocations indicate where item is found "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `addi` \u003cu\u003ebanana\u003c/u\u003e -q 44 -d edible banana -l Bob’s banana farm"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Adds new entry of 44 \u003cu\u003ebanana\u003c/u\u003e, with description edible \u003cu\u003ebanana\u003c/u\u003e, found at **location** \u003cu\u003eBob’s banana farm\u003c/u\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Adding a new Recipe: `addr`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `addr` - adds a new recipe"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `addr` **-n**  \\\u003c**product name**\\\u003e **-items** **\\\u003citem name\\[quantity\\]**, … \u003e \\[-pc \\\u003cnum\u003e\\]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\\[-d \\\u003cdesc\\\u003e\\]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **product name:**\tname of the item created by the recipe"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-items:** specify the list of material items used"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-pc:** quantity of product produced in a craft (default: 1)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-d:** description of recipe (default: “No description given”)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `addr` \u003cu\u003eBob’s anvil\u003c/u\u003e **-items** \u003cu\u003eblock of iron\u003c/u\u003e \\[3\\], \u003cu\u003eiron ingot\u003c/u\u003e\\[4\\]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Adds a **recipe** to craft \u003cu\u003eBob’s anvil\u003c/u\u003e, which takes 3 \u003cu\u003eblocks of iron\u003c/u\u003e and 4 \u003cu\u003eiron ingots\u003c/u\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Adding a item: `add`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "NOT Supported as of v1.2 yet"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `add` - add a quantity to a single specified item"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `add` \u003c**item name**\u003e -q \u003c**qty**\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **item name:** given name of the item in the system"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-q:** amount of that item to add to the accumulated value"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `add` \u003cu\u003eBob’s 6th regret\u003c/u\u003e -q \u003cu\u003e8\u003c/u\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Adds \u003cu\u003e8\u003c/u\u003e more \u003cu\u003eBob’s 6th regrets\u003c/u\u003e to the `Inventoryinator`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Listing all items or recipes : `list`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "NOT Supported as of v1.2 yet"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `list` - lists all items or recipes the user has entered"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `list` \\[-i (default) / -r\\]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **i:** Displays list of items"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "(showing item name and quantity)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **r:** Displays list of recipes"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "(showing item, required items and their quantities, and the product items and their quantities)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `list` -i"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Lists all items and their quantities"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Listing all items : `listi`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\t"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `listi` - lists all items"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `listi`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `list` -i"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Lists all items and their quantities"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Listing all items : `listr`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\t"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `listi` - lists all recipes"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `listr`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `listr` "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Lists all recipes, outputs, descriptions and their ingredients"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Deleting a item : `deli`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `deli` - delete an item"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `deli` \\\u003citem name\\\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **deletes** the item in the inventory with the corresponding item name,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " and all recipes associated with the item"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `deli` \u003cu\u003eBob’s 28th finger\u003c/u\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Deletes the **item** with the name of \u003cu\u003eBob’s 28th finger\u003c/u\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Deleting a Recipe : `delr`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `delr` - delete an recipe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `delr` \\\u003citem name\\\u003e \\[-r index\\]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **deletes** the recipe in the inventory with the corresponding recipe index"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **index:** deletes the \u003cu\u003erecipe\u003c/u\u003e numbered \u003cu\u003eindex\u003c/u\u003e, "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `delr` \u003cu\u003eBob’s 28th finger -r 1\u003c/u\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Deletes the **first recipe** of the item \u003cu\u003eBob’s 28th finger\u003c/u\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Delete item : `del`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "NOT Supported as of v1.2 yet"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `del` - delete an item"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `del` \\\u003citem name\\\u003e \\[-r index\\]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **deletes** the item in the inventory with the corresponding item name"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **index:** \tif provided, deletes the \u003cu\u003erecipe\u003c/u\u003e numbered \u003cu\u003eindex\u003c/u\u003e, "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `del` \u003cu\u003eBob’s 28th finger\u003c/u\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Deletes the **item** with the name of \u003cu\u003eBob’s 28th finger\u003c/u\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Finding an Entry: `find`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `find` - find an item"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `find` \\\u003csearch string\\\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Displays items that match the search string, via the **description**."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `find` -i \u003cu\u003eBob’s 9000th crush\u003c/u\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NOT Supported as of v1.2**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Returns the item that match the item description: "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003cu\u003eBob’s 9000th crush\u003c/u\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\t(supports regex, eg. find -i \u003cu\u003eBob’s ([1-9][0-9])(st\\*nd\\*rd\\*th) crush\u003c/u\u003e)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### View item `view`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**WIP as of v1.2**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `view` - view more details on an item"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `view` \u003citem name\u003e \\[-r / -c / -d (default)/ -all\\]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-d:** \treturns item details"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-c:** \treturns all recipes that create the item"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-r:** \treturns all recipes that use the item"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- **-all:**\treturns everything above"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**EXAMPLE:**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `view` \u003cu\u003eBob’s bitten fingernail clipping\u003c/u\u003e -r "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Returns all recipes that use \u003cu\u003eBob’s bitten fingernail clipping\u003c/u\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**NAME:**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `exit` - closes the application"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**SYNOPSIS:**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- `exit`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**DESCRIPTION:**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "- Closes the application. "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "Inventoryinator data is saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " There is no need to save manually. The format of save data is via `json file format`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data files"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " it creates with the files that contain the data of your previous Inventoryinator home folder."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 202,
      "-": 105
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-1/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F13-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F13-1/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "**Inventoryinator is a desktop application for managing your game inventory and crafting.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* If you are interested in using Inventoryinator, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "* If you are interested about developing Inventoryinator, the [**Developer Guide**](DeveloperGuide.md) is a good place to start."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "aqcd": 4,
      "-": 12
    }
  },
  {
    "path": "docs/team/liuzhengdao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: Liu Zheng Dao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![profileimage](../images/justacasul.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "-": 45
    }
  },
  {
    "path": "docs/team/rahul.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: Gidijala Sai Rahul\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![profileimage](../images/rahul0506.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "-": 45
    }
  },
  {
    "path": "docs/team/shijinglin.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: Shi Jing Lin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![profileimage](../images/aqcd.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "-": 45
    }
  },
  {
    "path": "docs/team/siewkhenghun.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: Siew Kheng Hun\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![profileimage](../images/khenghun.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "-": 45
    }
  },
  {
    "path": "docs/team/stephentan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "title: Stephen Tan Hin Khai\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "![profileimage](../images/blackonyyx.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "TODO"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/InventoryMainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.ItemListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.JsonItemListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.JsonLocationListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.JsonRecipeListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.LocationListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.storage.RecipeListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.ui.InventoryUiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryMainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InventoryMainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Inventory ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemListStorage itemListStorage \u003d new JsonItemListStorage(userPrefs.getItemListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        LocationListStorage locationListStorage \u003d new JsonLocationListStorage(userPrefs.getLocationListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipeListStorage recipeListStorage \u003d new JsonRecipeListStorage(userPrefs.getRecipeListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        storage \u003d new StorageManager(itemListStorage, locationListStorage, recipeListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ui \u003d new InventoryUiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s item list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The data from the sample item list will be used instead if {@code storage}\u0027s item list is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * or an empty item list will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyItemList initialItemList \u003d initItemList(storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyLocationList initialLocationList \u003d initLocationList(storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyRecipeList initialRecipeList \u003d initRecipeList(storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new ModelManager(initialItemList, initialLocationList, initialRecipeList, userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ReadOnlyItemList initItemList(Storage storage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cReadOnlyItemList\u003e itemListOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyItemList initialItemList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            itemListOptional \u003d storage.readItemList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (itemListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ItemList\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialItemList \u003d itemListOptional.orElseGet(SampleDataUtil::getSampleItemList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ItemList\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialItemList \u003d new ItemList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ItemList\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialItemList \u003d new ItemList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return initialItemList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ReadOnlyLocationList initLocationList(Storage storage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cReadOnlyLocationList\u003e locationListOptional;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyLocationList initialLocationList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationListOptional \u003d storage.readLocationList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (locationListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.info(\"Data file not found. Will be starting with a sample LocationList\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        initialLocationList \u003d locationListOptional.orElseGet(SampleDataUtil::getSampleLocationList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return initialLocationList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private ReadOnlyRecipeList initRecipeList(Storage storage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Optional\u003cReadOnlyRecipeList\u003e recipeListOptional;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ReadOnlyRecipeList initialRecipeList;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            recipeListOptional \u003d storage.readRecipeList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (recipeListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample RecipeList\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialRecipeList \u003d recipeListOptional.orElseGet(SampleDataUtil::getSampleRecipeList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RecipeList\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialRecipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RecipeList\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            initialRecipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return initialRecipeList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with empty user prefs\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.info(\"Starting ItemList \" + InventoryMainApp.VERSION);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Inventoryinator ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 20,
      "Rahul0506": 55,
      "-": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Application.launch(InventoryMainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 4,
      "Rahul0506": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_ITEMS_LISTED_OVERVIEW \u003d \"%1$d items listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_NO_ITEM_FOUND \u003d \"No such item \u0027%1$s\u0027 found, did you type the name correctly?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_NO_ITEM_MATCH \u003d \"No items match the search string. \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "Rahul0506": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.InventoryMainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new Image(InventoryMainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String preppedSentence \u003d sentence.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code pattern}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *   Ignores case, includes checking for partial matches."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param pattern cannot be null, matches case-sensitively"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static boolean matchesPatternIgnoreCase(String sentence, Pattern pattern) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(pattern);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return pattern.matcher(sentence).find();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if the {@code sentence} contains {@code words}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   Ignores case, but a exact match is required."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *       exactlyMultipleWordsIgnoreCase(\"ABc def\", \"abc def\") \u003d\u003d true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *       exactlyMultipleWordsIgnoreCase(\"ABc def\", \"abc DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *       exactlyMultipleWordsIgnoreCase(\"ABc def\", \"ABc d\") \u003d\u003d false //not an exact match"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param words cannot be null, cannot be empty, can be multiple words"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static boolean exactlyMultipleWordsIgnoreCase(String sentence, String words) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(words);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String preppedWord \u003d words.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return sentence.equalsIgnoreCase(preppedWord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 14,
      "Rahul0506": 17,
      "-": 67,
      "khenghun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.InventoryComponent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the ItemList */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyItemList getItemList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of items */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the user prefs\u0027 item list file path. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the LocationList */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyLocationList getLocationList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of locations */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cLocation\u003e getFilteredLocationList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the user prefs\u0027 location list file path. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the RecipeList */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ReadOnlyRecipeList getRecipeList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recipes */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /** Returns the user prefs\u0027 recipe list file path. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns the relevant inventory list to be displayed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    ArrayList\u003cInventoryComponent\u003e getInventoryList(DisplayedInventoryType inventoryType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 14,
      "Rahul0506": 14,
      "-": 35,
      "khenghun": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.InventoryParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.InventoryComponent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final InventoryParser inventoryParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        inventoryParser \u003d new InventoryParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Command command \u003d inventoryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            // TODO: different saves"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            storage.saveModel(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Item"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return model.getItemList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return model.getFilteredItemList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return model.getItemListFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Location"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyLocationList getLocationList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getLocationList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getFilteredLocationList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getLocationListFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Recipe"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getRecipeList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return model.getRecipeListFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // GUI"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns the relevant inventory list containing inventory of {@code inventoryType} to be displayed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public ArrayList\u003cInventoryComponent\u003e getInventoryList(DisplayedInventoryType inventoryType) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cInventoryComponent\u003e inventoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        switch(inventoryType) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case ITEMS:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            inventoryList.addAll(model.getFilteredItemList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case RECIPES:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            model.getFilteredRecipeList()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    .forEach(recipe -\u003e inventoryList.add(recipe.print(model.getFilteredItemList())));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case DETAILED_ITEM:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            model.getFilteredItemList().forEach(item -\u003e inventoryList.add(item.detailedItem()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case UNCHANGED:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new IllegalStateException(\"This inventoryType is not valid\" + inventoryType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return inventoryList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 23,
      "Rahul0506": 30,
      "-": 67,
      "khenghun": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.ItemParserUtil.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.ItemParserUtil.DEFAULT_QUANTITY_TYPED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Adds a item to the item list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class AddItemCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addi\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a item to the item list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + \"LOCATION\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + \"banana \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + \"44 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + \"edible banana \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + \"Bob’s banana farm \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New item added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the item list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String MESSAGE_WARNING \u003d \"New item added: %1$s \\nDo note that 1 or more fields\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \" have been filled with default values,\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"\\n please use edit to edit fields you wish to alter\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ItemPrecursor itemPre;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Creates an AddItemCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public AddItemCommand(ItemPrecursor itemPrecursor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(itemPrecursor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemPre \u003d itemPrecursor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Item itemToAdd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemToAdd \u003d model.processPrecursor(itemPre);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (model.hasItem(itemToAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        model.addItem(itemToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (hasNonDefaultParams(itemToAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_WARNING, itemToAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, itemToAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Checks if the item has any default parameters set"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * TODO expand this criteria"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param itemToAdd item to check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return boolean to check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static boolean hasNonDefaultParams(Item itemToAdd) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return itemToAdd.getQuantity().equals(DEFAULT_QUANTITY_TYPED)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \u0026\u0026 (itemToAdd.getDescription().equals(DEFAULT_DESCRIPTION));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof AddItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 itemPre.equals(((AddItemCommand) other).itemPre));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 57,
      "blackonyyx": 19,
      "Rahul0506": 9,
      "aqcd": 1,
      "khenghun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddQuantityToItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.EditItemCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * Adds a user-input quantity to an existing item."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddQuantityToItemCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addq\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a quantity to an item \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"at the index number used in the displayed item list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"Existing quantity value will be modified by adding the input value.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"[\" + PREFIX_ITEM_NAME + \"NAME] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"[\" + PREFIX_ITEM_QUANTITY + \"QUANTITY_TO_MODIFY_BY] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + PREFIX_ITEM_NAME + \"Iron \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + \"20 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_FOUND \u003d \"Item is not found in the item list.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_PROVIDED \u003d \"Item name must be provided.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_QUANTITY_NOT_PROVIDED \u003d \"Quantity must be provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_QUANTITY \u003d \"Quantity will become negative.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddQuantityToItemCommand.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private final int quantity; // store as int to support negative"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param quantity quantity to add to the item, can be negative"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public AddQuantityToItemCommand(String itemName, int quantity) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        List\u003cItem\u003e itemList \u003d new ArrayList\u003c\u003e(model.getFilteredItemList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // filter to only get matching and not deleted items"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemList.removeIf(x -\u003e !x.getName().equals(itemName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (itemList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_FOUND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item itemToEdit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemToEdit \u003d itemList.stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .findFirst() // Get the first (and only) item matching or else throw Error"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .orElseThrow(()-\u003e new CommandException(MESSAGE_ITEM_NOT_FOUND));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assert(itemToEdit !\u003d null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assert(itemToEdit.getQuantity() !\u003d null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if ((Integer.parseInt(itemToEdit.getQuantity().value) + quantity) \u003c 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new CommandException(MESSAGE_NEGATIVE_QUANTITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Quantity updatedQuantity \u003d new Quantity(Integer.toString(Integer.parseInt(itemToEdit.getQuantity().value)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                + quantity));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assert(Integer.parseInt(updatedQuantity.value) \u003e\u003d 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemDescriptor editItemDescriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editItemDescriptor.setName(itemToEdit.getName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editItemDescriptor.setDescription(itemToEdit.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editItemDescriptor.setQuantity(updatedQuantity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editItemDescriptor.setTags(itemToEdit.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand editItemCommand \u003d new EditItemCommand(itemName, editItemDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        logger.info(itemToEdit.getName() + \"\u0027s quantity changed to \" + updatedQuantity + \".\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return editItemCommand.execute(model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (!(other instanceof AddQuantityToItemCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // check if itemName and quantity are the same"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand a \u003d (AddQuantityToItemCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return itemName.equals(a.itemName)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 quantity \u003d\u003d a.quantity;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_INGREDIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Adds a item to the item list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addr\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the recipe list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + \"PRODUCT NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_INGREDIENTS + \"ITEM NAME[QUANTITY] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_QUANTITY + \"PRODUCT QUANTITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + \"banana cake \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_INGREDIENTS + \"banana[2], flour[2], water[1] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_QUANTITY + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"Banana cake \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_FOUND \u003d \"Item specified in recipe not found in item list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final RecipePrecursor recipePre;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public AddRecipeCommand(RecipePrecursor recipePre) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipePre);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipePre \u003d recipePre;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Recipe recipeToAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            recipeToAdd \u003d model.processPrecursor(recipePre);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } catch (ItemNotFoundException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_FOUND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (model.hasRecipe(recipeToAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        model.addRecipe(recipeToAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof AddRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 recipePre.equals(((AddRecipeCommand) other).recipePre));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 73,
      "khenghun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Clears the item list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ClearItemCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cleari\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        model.setItemList(new ItemList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /** Toggles the current display. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final DisplayedInventoryType inventoryType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, DisplayedInventoryType inventoryType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.inventoryType \u003d inventoryType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields, and {@code inventoryType} of UNCHANGED."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.inventoryType \u003d DisplayedInventoryType.UNCHANGED;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this(feedbackToUser, false, false, DisplayedInventoryType.UNCHANGED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DisplayedInventoryType getInventoryType() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return this.inventoryType;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u0026\u0026 inventoryType \u003d\u003d otherCommandResult.inventoryType;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, inventoryType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "-": 71,
      "khenghun": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * DeleteItemCommand represents a delete item command with hidden"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * internal logic and the ability to be executed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DeleteItemCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deli\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a item in the item list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + PREFIX_ITEM_NAME + \"ITEM NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + PREFIX_ITEM_NAME + \"Iron \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item and Recipes of the item Deleted: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_FOUND \u003d \"Item is not found in the item list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Creates an DeleteItemCommand to delete the specified {@code Item} and connecting recipes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param itemName The item name to be deleted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DeleteItemCommand(String itemName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.productName \u003d itemName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cItem\u003e itemList \u003d new ArrayList\u003c\u003e(model.getFilteredItemList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // filter to only get matching and not deleted items"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemList.removeIf(x -\u003e !x.getName().equals(productName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (itemList.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_FOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Item itemToDelete;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        itemToDelete \u003d itemList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .findFirst()// Get the first (and only) item matching or else throw Error"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .orElseThrow(()-\u003e new CommandException(MESSAGE_ITEM_NOT_FOUND));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        model.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e(model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // remove recipes from consideration that are not soft deleted,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // nor contain deleted item as product or ingredient"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        recipeList.removeIf(y -\u003e !y.getProductName().equals(productName)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u0026\u0026 y.getIngredients()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .noneMatch(z -\u003e z.isItem(itemToDelete.getId())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // delete recipes connected to this identified item as a product, or an ingredient"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        recipeList.forEach(model::deleteRecipe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, itemToDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getProductName() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                || (other instanceof DeleteItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \u0026\u0026 productName.equals(((DeleteItemCommand) other).productName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 79,
      "justacasul": 2,
      "aqcd": 1,
      "khenghun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DeleteRecipeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delr\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a recipe in the recipe list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + \"PRODUCT NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + PREFIX_RECIPE_ID + \"RECIPE ID\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + \"Iron \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + PREFIX_RECIPE_ID + \"2\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Recipe has been deleted: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_RECIPE_NOT_FOUND \u003d \"Recipe is not found in the recipe list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_INDEX_NOT_FOUND \u003d \"Recipe ID is out of range\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a DeleteRecipeCommand to delete the specified {@code Recipe}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DeleteRecipeCommand(String productName, Index index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        requireNonNull(productName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        List\u003cRecipe\u003e recipelist \u003d new ArrayList\u003c\u003e(model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // filter to only get matching and not deleted recipes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        recipelist.removeIf(x -\u003e !x.getProductName().equals(productName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (recipelist.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new CommandException(MESSAGE_RECIPE_NOT_FOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Recipe recipeToDelete;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            recipeToDelete \u003d recipelist.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_NOT_FOUND); //index out of range"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        int recipeId \u003d recipeToDelete.getId();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        for (Item i : model.getFilteredItemList()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            if (i.getRecipeIds().contains(recipeId)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                i.removeRecipeId(recipeId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                || (other instanceof DeleteRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u0026\u0026 productName.equals(((DeleteRecipeCommand) other).productName))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteRecipeCommand) other).index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 4,
      "justacasul": 1,
      "aqcd": 8,
      "khenghun": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIGINAL_ITEM_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Edits the details of an existing item in the inventory."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EditItemCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"given the item name. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + \"[\" + PREFIX_ORIGINAL_ITEM_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"[\" + PREFIX_ITEM_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"[\" + PREFIX_ITEM_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"[\" + PREFIX_ITEM_DESCRIPTION + \"DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + \"20 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Item: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the item list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_ITEM_NOT_FOUND \u003d \"Item is not found in the item list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_NO_ORIGINAL_ITEM \u003d \"Original item name must be present!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private final String itemName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final EditItemDescriptor editItemDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param itemName of the item in the filtered item list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param editItemDescriptor details to edit the item with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public EditItemCommand(String itemName, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        requireNonNull(editItemDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        List\u003cItem\u003e itemList \u003d new ArrayList\u003c\u003e(model.getFilteredItemList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // filter to only get matching and not deleted items"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemList.removeIf(x -\u003e !x.getName().equals(itemName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (itemList.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new CommandException(MESSAGE_ITEM_NOT_FOUND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item itemToEdit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemToEdit \u003d itemList.stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .findFirst()// Get the first (and only) item matching or else throw Error"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .orElseThrow(()-\u003e new CommandException(MESSAGE_ITEM_NOT_FOUND));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Item editedItem \u003d createEditedItem(itemToEdit, editItemDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!editItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!itemToEdit.isSameItem(editedItem) \u0026\u0026 model.hasItem(editedItem)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // update affected recipes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (editItemDescriptor.getName().isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            model.updateRecipeNames(itemToEdit.getName(), editItemDescriptor.getName().get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.setItem(itemToEdit, editedItem);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates and returns a {@code Item} with the details of {@code itemToEdit}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * edited with {@code editItemDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private static Item createEditedItem(Item itemToEdit, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String updatedName \u003d editItemDescriptor.getName().orElse(itemToEdit.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Quantity updatedQuantity \u003d editItemDescriptor.getQuantity().orElse(itemToEdit.getQuantity());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String updatedDescription \u003d editItemDescriptor.getDescription().orElse(itemToEdit.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // ID, locations, recipe ids, and tags cannot be changed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        int id \u003d itemToEdit.getId();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Set\u003cInteger\u003e locations \u003d Set.copyOf(itemToEdit.getLocationIds());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Set\u003cInteger\u003e recipes \u003d Set.copyOf(itemToEdit.getRecipeIds());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Set\u003cTag\u003e tags \u003d itemToEdit.getTags();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Item(id, updatedName, updatedQuantity, updatedDescription, locations, recipes, tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!(other instanceof EditItemCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand e \u003d (EditItemCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return itemName.equals(e.itemName)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u0026\u0026 editItemDescriptor.equals(e.editItemDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Stores the details to edit the item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * corresponding field value of the item."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static class EditItemDescriptor {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private String updatedName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private Quantity updatedQuantity;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private String updatedDescription;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public EditItemDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            setName(toCopy.updatedName);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            setQuantity(toCopy.updatedQuantity);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            setDescription(toCopy.updatedDescription);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return CollectionUtil.isAnyNonNull(updatedName, updatedQuantity, updatedDescription, tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public void setName(String updatedName) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.updatedName \u003d updatedName;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public Optional\u003cString\u003e getName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return Optional.ofNullable(updatedName);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public void setQuantity(Quantity updatedQuantity) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.updatedQuantity \u003d updatedQuantity;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return Optional.ofNullable(updatedQuantity);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public void setDescription(String updatedDescription) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.updatedDescription \u003d updatedDescription;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return Optional.ofNullable(updatedDescription);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khenghun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (!(other instanceof EditItemDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            EditItemDescriptor e \u003d (EditItemDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "aqcd": 29,
      "khenghun": 198
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.NameMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Finds and lists all items in item list whose name contains any of the keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class FindItemCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all items whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final NameMatchesKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public FindItemCommand(NameMatchesKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        int filteredItemListSize \u003d model.getFilteredItemList().size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        boolean filteredItemListNotEmpty \u003d filteredItemListSize \u003e 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (filteredItemListNotEmpty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    String.format(Messages.MESSAGE_ITEMS_LISTED_OVERVIEW, filteredItemListSize));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_NO_ITEM_MATCH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof FindItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindItemCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListItemCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Lists all items in the inventory to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ListItemCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listi\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :lists all items\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all items\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_NO_ITEMS \u003d \"You have no items in your inventory now.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (model.getFilteredItemList().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new CommandResult(MESSAGE_NO_ITEMS, false, false, DisplayedInventoryType.ITEMS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, false, false, DisplayedInventoryType.ITEMS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 19,
      "khenghun": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Lists all recipes in the inventory to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListRecipeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listr\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :lists all recipes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final String MESSAGE_NO_RECIPES \u003d \"You have no recipes in your inventory now.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (model.getFilteredRecipeList().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new CommandResult(MESSAGE_NO_RECIPES, false, false, DisplayedInventoryType.RECIPES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, false, false, DisplayedInventoryType.RECIPES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewDetailsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.NameIsExactlyPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Finds the first item that matches what is searched for, and displays its details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ViewDetailsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the first item that matches \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            + \"what is searched for, and displays its details.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + \"Parameters: KEYWORD \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Bob\u0027s bone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final NameIsExactlyPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ViewDetailsCommand(NameIsExactlyPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // show only items which are not deleted and match the predicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        model.updateFilteredItemList(item -\u003e predicate.test(item));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!model.getFilteredItemList().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new CommandResult(\"Displaying searched item\", false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    DisplayedInventoryType.DETAILED_ITEM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_NO_ITEM_FOUND, predicate.getKeyword()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    false, false, DisplayedInventoryType.UNCHANGED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof ViewDetailsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 predicate.equals(((ViewDetailsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 41,
      "khenghun": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.ItemParserUtil.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.ItemParserUtil.DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Parses input arguments and creates a new AddItemCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class AddItemCommandParser implements Parser\u003cAddItemCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItemCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * and returns an AddItemCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public AddItemCommand parse(String args) throws ParseException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM_NAME, PREFIX_ITEM_QUANTITY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        PREFIX_ITEM_DESCRIPTION, PREFIX_ITEM_LOCATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ITEM_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            // Only if Item Name is missing throws parse exception error"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // Missing Field Name would have been detected."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String name \u003d ItemParserUtil.parseName(argMultimap.getValue(PREFIX_ITEM_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Quantity quantity \u003d ItemParserUtil.parseQuantity(argMultimap.getValue(PREFIX_ITEM_QUANTITY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .orElse(DEFAULT_QUANTITY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String description \u003d ItemParserUtil.parseDescription(argMultimap.getValue(PREFIX_ITEM_DESCRIPTION)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .orElse(DEFAULT_DESCRIPTION));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // TODO Item only allows registering one item location"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Set\u003cString\u003e locationList \u003d ItemParserUtil.parseLocations(argMultimap.getAllValues(PREFIX_ITEM_LOCATION));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ItemPrecursor itemPrecursor \u003d new ItemPrecursor(Item.getIdCounter() + 1, name, quantity, description,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                locationList, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new AddItemCommand(itemPrecursor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 50,
      "blackonyyx": 10,
      "Rahul0506": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddQuantityToItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.AddQuantityToItemCommand.MESSAGE_ITEM_NOT_PROVIDED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.AddQuantityToItemCommand.MESSAGE_QUANTITY_NOT_PROVIDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.AddQuantityToItemCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * Parses input arguments and creates a new AddQuantityToItemCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddQuantityToItemCommandParser implements Parser\u003cAddQuantityToItemCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddQuantityToItemCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * and returns an AddQuantityToItem object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public AddQuantityToItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM_NAME, PREFIX_ITEM_QUANTITY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String itemName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        int quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_NAME).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            itemName \u003d ItemParserUtil.parseName(argMultimap.getValue(PREFIX_ITEM_NAME).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new ParseException(MESSAGE_ITEM_NOT_PROVIDED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            quantity \u003d ItemParserUtil.parseInt(argMultimap.getValue(PREFIX_ITEM_QUANTITY).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new ParseException(MESSAGE_QUANTITY_NOT_PROVIDED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new AddQuantityToItemCommand(itemName, quantity);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_INGREDIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Parses input arguments and creates a new AddRecipeCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class AddRecipeCommandParser implements Parser\u003cAddRecipeCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRecipeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * and returns an AddRecipeCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public AddRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECIPE_PRODUCT_NAME, PREFIX_RECIPE_INGREDIENTS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        PREFIX_RECIPE_PRODUCT_QUANTITY, PREFIX_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RECIPE_PRODUCT_NAME, PREFIX_RECIPE_INGREDIENTS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                PREFIX_RECIPE_PRODUCT_QUANTITY, PREFIX_RECIPE_DESCRIPTION)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String productName \u003d RecipeParserUtil.parseProductName(argMultimap.getValue(PREFIX_RECIPE_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ingredientPrecursors \u003d RecipeParserUtil"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .parseIngredients(argMultimap.getValue(PREFIX_RECIPE_INGREDIENTS).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ProductQuantity productQuantity \u003d RecipeParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .parseProductQuantity(argMultimap.getValue(PREFIX_RECIPE_PRODUCT_QUANTITY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String description \u003d RecipeParserUtil.parseDescription(argMultimap.getValue(PREFIX_RECIPE_DESCRIPTION).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipePrecursor recipePre \u003d new RecipePrecursor(Recipe.getIdCounter() + 1, ingredientPrecursors,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                productName, productQuantity, description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new AddRecipeCommand(recipePre);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"ArgumentMultimap {\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \"argMultimap\u003d\" + argMultimap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // items start here"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Prefix PREFIX_ORIGINAL_ITEM_NAME \u003d new Prefix(\"-o \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_NAME \u003d new Prefix(\"-n \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_QUANTITY \u003d new Prefix(\"-q \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_DESCRIPTION \u003d new Prefix(\"-d \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final Prefix PREFIX_ITEM_LOCATION \u003d new Prefix(\"-l \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // recipes start here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_PRODUCT_NAME \u003d new Prefix(\"-n \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_INGREDIENTS \u003d new Prefix(\"-items \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_PRODUCT_QUANTITY \u003d new Prefix(\"-pc \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_DESCRIPTION \u003d new Prefix(\"-d \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    // for deletion of recipe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_ID \u003d new Prefix(\"-i \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6,
      "Rahul0506": 5,
      "aqcd": 1,
      "-": 11,
      "khenghun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DeleteItemCommandParser implements Parser\u003cDeleteItemCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteItemCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * and returns a DeleteItemCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DeleteItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String productName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_ITEM_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_ITEM_NAME)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        DeleteItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            productName \u003d ItemParserUtil.parseName(argMultimap.getValue(PREFIX_ITEM_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return new DeleteItemCommand(productName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Parses input arguments and creates a new DeleteRecipeCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DeleteRecipeCommandParser implements Parser\u003cDeleteRecipeCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteRecipeCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * and returns a DeleteRecipeCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DeleteRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String productName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_RECIPE_PRODUCT_NAME, PREFIX_RECIPE_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_RECIPE_PRODUCT_NAME, PREFIX_RECIPE_ID)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                        DeleteRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            productName \u003d ItemParserUtil.parseName(argMultimap.getValue(PREFIX_RECIPE_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            index \u003d ItemParserUtil.parseIndex(argMultimap.getValue(PREFIX_RECIPE_ID).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new DeleteRecipeCommand(productName, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecipeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.EditItemCommand.MESSAGE_NO_ORIGINAL_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIGINAL_ITEM_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.EditItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EditItemCommandParser implements Parser\u003cEditItemCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditItemCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * and returns an EditItemCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public EditItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ORIGINAL_ITEM_NAME, PREFIX_ITEM_NAME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        PREFIX_ITEM_QUANTITY, PREFIX_ITEM_DESCRIPTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String itemName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor editItemDescriptor \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORIGINAL_ITEM_NAME).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            itemName \u003d ItemParserUtil.parseName(argMultimap.getValue(PREFIX_ORIGINAL_ITEM_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new ParseException(MESSAGE_NO_ORIGINAL_ITEM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            editItemDescriptor.setName(ItemParserUtil.parseName(argMultimap.getValue(PREFIX_ITEM_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            editItemDescriptor.setQuantity(ItemParserUtil.parseQuantity("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    argMultimap.getValue(PREFIX_ITEM_QUANTITY).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            editItemDescriptor.setDescription(ItemParserUtil.parseDescription("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    argMultimap.getValue(PREFIX_ITEM_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new EditItemCommand(itemName, editItemDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 11,
      "khenghun": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.FindItemCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.NameMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Parses input arguments and creates a new FindItemCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class FindItemCommandParser implements Parser\u003cFindItemCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindItemCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * and returns a FindItemCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public FindItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new FindItemCommand(new NameMatchesKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 9,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InventoryParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.AddQuantityToItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ClearItemCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.EditItemCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.FindItemCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ListItemCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ListRecipeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ViewDetailsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Items commands start here"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case AddItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new AddItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case EditItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new EditItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        case AddQuantityToItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return new AddQuantityToItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        case FindItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return new FindItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case ClearItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new ClearItemCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case ListItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new ListItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        case DeleteItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return new DeleteItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        case ViewDetailsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new ViewDetailsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Recipe commands start here"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        case AddRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return new AddRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case DeleteRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new DeleteRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        case ListRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new ListRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "justacasul": 2,
      "Rahul0506": 54,
      "aqcd": 5,
      "khenghun": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ItemParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ItemParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"None\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"None\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"None\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final Quantity DEFAULT_QUANTITY_TYPED \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses a {@code String name} into a {@code String}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static String parseName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Parses a {@code String number} into a {@code int}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static int parseInt(String number) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return Integer.parseInt(number.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses a {@code String description} into a {@code String}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static String parseDescription(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Could be extended to parse multiple locations here."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e locations} into a {@code Set\u003cString\u003e}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static Set\u003cString\u003e parseLocations(Collection\u003cString\u003e locations) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(locations);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new HashSet\u003c\u003e(locations);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "justacasul": 72,
      "blackonyyx": 6,
      "Rahul0506": 3,
      "aqcd": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListItemCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ListItemCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListItemCommandParser implements Parser\u003cListItemCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListItemCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * and returns an ListItemCommand object for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public ListItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new ListItemCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ListRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListRecipeCommandParser implements Parser\u003cListRecipeCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListRecipeCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * and returns an ListRecipeCommand object for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public ListRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (args.isBlank()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return new ListRecipeCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    T parse(String userInput) throws ParseException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecipeParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipeParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Pattern SPLIT_INGREDIENT_FORMAT \u003d Pattern.compile(\"[^\\\\[]+\\\\[\\\\d+\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String MESSAGE_INGREDIENT_FORMAT \u003d \"Ingredients should be listed as itemName[qty], ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Parses a {@code String name} into a {@code String}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static String parseProductName(String productName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(productName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productName.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Converts user-input string of ingredients into list of {@code IngredientPrecursor}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param ingredients User-input string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @return Parsed list of IngredientPrecursors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @throws ParseException If the input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static List\u003cIngredientPrecursor\u003e parseIngredients(String ingredients) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] splitIngredients \u003d ingredients.split(\"],|]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (splitIngredients.length \u003c 1 || !RecipeParserUtil.checkIngredients(splitIngredients)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(MESSAGE_INGREDIENT_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ingredientPrecursors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String[] splitParts;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String ingredient : splitIngredients) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            splitParts \u003d ingredient.trim().split(\"\\\\[\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ingredientPrecursors.add(new IngredientPrecursor(splitParts[0], Integer.parseInt(splitParts[1])));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientPrecursors;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static boolean checkIngredients(String[] splitIngredients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String ingredient : splitIngredients) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Matcher matcher \u003d SPLIT_INGREDIENT_FORMAT.matcher(ingredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Parses a {@code String productQuantity} into a {@code String}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static ProductQuantity parseProductQuantity(String productQuantity) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(productQuantity);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String trimmedQuantity \u003d productQuantity.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!ProductQuantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ParseException(ProductQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new ProductQuantity(trimmedQuantity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Parses a {@code String description} into a {@code String}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static String parseDescription(String description) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 62,
      "aqcd": 19,
      "khenghun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewDetailsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.ViewDetailsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.NameIsExactlyPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Parses input arguments and creates a new ViewDetailsCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ViewDetailsCommandParser implements Parser\u003cViewDetailsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewDetailsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * and returns a ViewDetailsCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ViewDetailsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDetailsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new ViewDetailsCommand(new NameIsExactlyPredicate(Collections.singletonList(trimmedArgs)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InventoryComponent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Encapsulates a possible Inventory entry, either an Item or a Recipe."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public abstract class InventoryComponent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public abstract DisplayedInventoryType getType();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Wraps all data at the item-list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Duplicates are not allowed (by .isSameItem comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemList implements ReadOnlyItemList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final UniqueItemList items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Creates an ItemList using the Items in the {@code toBeCopied}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemList(ReadOnlyItemList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.items.setItems(items);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Resets the existing data of this {@code ItemList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void resetData(ReadOnlyItemList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        setItems(newData.getItemList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// item-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if a item with the same identity as {@code item} exists in the item list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a item to the item list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item must not already exist in the item list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addItem(Item p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the given item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the item list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(editedItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.setItem(target, editedItem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Deletes {@code item} from this {@code ItemList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * {@code item} must exist in the item list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void deleteItem(Item recipe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.remove(recipe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes {@code key} from this {@code ItemList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code key} must exist in the item list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void removeItem(Item key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int findItemIdByName(String itemName) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return items.findItemId(itemName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipeIdToItem(int itemId, int recipeId) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        items.addRecipeIdToItem(itemId, recipeId);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.asUnmodifiableObservableList().size() + \" items\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof ItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 items.equals(((ItemList) other).items));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return items.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 119,
      "blackonyyx": 8,
      "Rahul0506": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.UniqueLocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Wraps all data at the location-list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Duplicates are not allowed (by .isSameLocation comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class LocationList implements ReadOnlyLocationList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final UniqueLocationList locations;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public LocationList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates an LocationList using the Locations in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public LocationList(ReadOnlyLocationList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of the location list with {@code locations}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.locations.setLocations(locations);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Resets the existing data of this {@code LocationList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void resetData(ReadOnlyLocationList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        setLocations(newData.getLocationList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// location-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the location list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.contains(location);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns location ID of location to be found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int findLocationID(Location location) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.findLocationID(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a location to the location list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location must not already exist in the location list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addLocation(Location p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the given location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the location list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * same as another existing location in the location list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(editedLocation);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.setLocation(target, editedLocation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes {@code key} from this {@code LocationList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code key} must exist in the location list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void removeLocation(Location key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.asUnmodifiableObservableList().size() + \" locations\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof LocationList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 locations.equals(((LocationList) other).locations));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locations.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    Predicate\u003cLocation\u003e PREDICATE_SHOW_ALL_LOCATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the user prefs\u0027 item list file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the user prefs\u0027 location list file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the user prefs\u0027 recipe list file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Sets the user prefs\u0027 item list file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void setItemListFilePath(Path itemListFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the user prefs\u0027 location list file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    void setLocationListFilePath(Path locationListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Sets the user prefs\u0027 recipe list file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void setRecipeListFilePath(Path recipeListFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces item list data with the data in {@code itemList}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void setItemList(ReadOnlyItemList itemList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces recipe list data with the data in {@code recipeList}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void setRecipeList(ReadOnlyRecipeList recipeList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the ItemList"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyItemList getItemList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the LocationList"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ReadOnlyLocationList getLocationList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the RecipeList"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ReadOnlyRecipeList getRecipeList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if an item with the same identity as {@code item} exists in the item list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    boolean hasItem(Item item);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the location list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    boolean hasLocation(Location location);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Deletes the given item."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The item must exist in the item list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void deleteItem(Item target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must exist in the recipe list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds the given item."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code item} must not already exist in the item list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void addItem(Item item);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds the given location."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code location} must not already exist in the location list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void addLocation(Location location);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code recipe} must not already exist in the recipe list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the given item {@code target} with {@code editedItem}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the item list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the item list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void setItem(Item target, Item editedItem);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the recipe list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the filtered item list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the filtered location list"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cLocation\u003e getFilteredLocationList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the filtered recipe list"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Updates the filter of the filtered item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void updateFilteredItemList(Predicate\u003cItem\u003e predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Updates the filter of the filtered location list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the ID of the given location to find."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    int findLocationID(Location toFind);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Processes a RecipePrecursor into a Recipe."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Recipe processPrecursor(RecipePrecursor recipePrecursor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Processes an ItemPrecursor into an Item."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Item processPrecursor(ItemPrecursor itemPrecursor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Updates recipe product names."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    void updateRecipeNames(String originalName, String updatedName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 33,
      "Rahul0506": 104,
      "aqcd": 12,
      "-": 60,
      "khenghun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ItemList itemList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final LocationList locationList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final FilteredList\u003cLocation\u003e filteredLocations;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final RecipeList recipeList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Initializes a ModelManager with the given itemList, locationList, recipeList and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ModelManager(ReadOnlyItemList itemList, ReadOnlyLocationList locationList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        ReadOnlyRecipeList recipeList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(userPrefs, itemList, locationList, recipeList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.fine(\"Initializing with item list: \" + itemList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                + \" location list: \" + locationList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                + \" recipe list: \" + recipeList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemList \u003d new ItemList(itemList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationList \u003d new LocationList(locationList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredLocations \u003d new FilteredList\u003c\u003e(this.locationList.getLocationList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeList \u003d new RecipeList(recipeList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeList.getRecipeList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this(new ItemList(), new LocationList(), new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return userPrefs.getItemListFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return userPrefs.getLocationListFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return userPrefs.getRecipeListFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItemListFilePath(Path itemListFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(itemListFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        userPrefs.setItemListFilePath(itemListFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocationListFilePath(Path locationListFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        requireNonNull(locationListFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        userPrefs.setLocationListFilePath(locationListFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipeListFilePath(Path recipeListFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipeListFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        userPrefs.setRecipeListFilePath(recipeListFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item and Location List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItemList(ReadOnlyItemList itemList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.itemList.resetData(itemList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipeList(ReadOnlyRecipeList recipeList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeList.resetData(recipeList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ReadOnlyLocationList getLocationList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemList.hasItem(item);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList.hasLocation(location);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeList.hasRecipe(recipe);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        itemList.deleteItem(target);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        recipeList.deleteRecipe(target);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemList.addItem(item);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void addLocation(Location location) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationList.addLocation(location);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeList.addRecipe(recipe);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemList.addRecipeIdToItem(recipe.getProductId(), recipe.getId());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemList.setItem(target, editedItem);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeList.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item and Location List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return filteredItems;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return filteredLocations;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        filteredLocations.setPredicate(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int findLocationID(Location toFind) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList.findLocationID(toFind);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private int findItemIdByName(String itemName) throws ItemNotFoundException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(itemName);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        int id \u003d itemList.findItemIdByName(itemName);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (id \u003d\u003d -1) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe processPrecursor(RecipePrecursor recipePrecursor) throws ItemNotFoundException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        int productId \u003d findItemIdByName(recipePrecursor.getProductName());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ingredientPrecursors \u003d recipePrecursor.getIngredientPrecursors();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        IngredientList ingredients \u003d new IngredientList();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (IngredientPrecursor precursor : ingredientPrecursors) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            int ingredientId \u003d findItemIdByName(precursor.getKey());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ingredients.add(precursor.toIngredient(ingredientId));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipePrecursor.toRecipe(productId, ingredients);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Item processPrecursor(ItemPrecursor itemPrecursor) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Set\u003cInteger\u003e locationIds \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (String locationName : itemPrecursor.getLocationNames()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            locationIds.add(findLocationIdByName(locationName));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return itemPrecursor.toItem(locationIds, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void updateRecipeNames(String originalName, String updatedName) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        filteredRecipes.stream()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .filter(recipe -\u003e recipe.getProductName().equals(originalName))"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .forEach(recipe -\u003e setRecipe(recipe, recipe.setProductName(updatedName)));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private int findLocationIdByName(String location) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Location toAdd \u003d new Location(trimmedLocation);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (hasLocation(toAdd)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Location.decrementIdCounter();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return findLocationID(toAdd);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        addLocation(toAdd);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return toAdd.getId();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 itemList.equals(other.itemList)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 filteredItems.equals(other.filteredItems)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 locationList.equals(other.locationList)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 filteredLocations.equals(other.filteredLocations)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 recipeList.equals(other.recipeList)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 filteredRecipes.equals(other.filteredRecipes);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"ModelManager{\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \"userPrefs\u003d\" + userPrefs"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \", itemList\u003d\" + itemList"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \", filteredItems\u003d\" + filteredItems"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \", locationList\u003d\" + locationList"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \", filteredLocations\u003d\" + filteredLocations"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \", recipeList\u003d\" + recipeList"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \", filteredRecipes\u003d\" + filteredRecipes"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 81,
      "blackonyyx": 13,
      "Rahul0506": 115,
      "aqcd": 11,
      "-": 110,
      "khenghun": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Unmodifiable view of an item list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface ReadOnlyItemList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an unmodifiable view of the items list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cItem\u003e getItemList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 16,
      "Rahul0506": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Unmodifiable view of a location list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface ReadOnlyLocationList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an unmodifiable view of the locations list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This list will not contain any duplicate locations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    ObservableList\u003cLocation\u003e getLocationList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 16,
      "Rahul0506": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Unmodifiable view of a recipe list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public interface ReadOnlyRecipeList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an unmodifiable view of the recipe list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "Rahul0506": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Wraps all data at the recipe-list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipeList implements ReadOnlyRecipeList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipeList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates an RecipeList using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipeList(ReadOnlyRecipeList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Resets the existing data of this {@code RecipeList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void resetData(ReadOnlyRecipeList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds a recipe to the recipe list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must not already exist in the recipe list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipe(Recipe p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the recipe list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Removes {@code key} from this {@code RecipeList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code key} must exist in the recipe list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Deletes {@code recipe} from this {@code RecipeList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * {@code recipe} must exist in the recipe list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void deleteRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        recipes.remove(recipe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof RecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 recipes.equals(((RecipeList) other).recipes));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "Rahul0506": 120,
      "khenghun": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path itemListFilePath \u003d Paths.get(\"data\", \"itemlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path locationListFilePath \u003d Paths.get(\"data\", \"locationlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Path recipeListFilePath \u003d Paths.get(\"data\", \"recipelist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        setItemListFilePath(newUserPrefs.getItemListFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        setRecipeListFilePath(newUserPrefs.getRecipeListFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return itemListFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationListFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItemListFilePath(Path itemListFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(itemListFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.itemListFilePath \u003d itemListFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocationListFilePath(Path locationListFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        requireNonNull(locationListFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.locationListFilePath \u003d locationListFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipeListFilePath(Path recipeListFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipeListFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeListFilePath \u003d recipeListFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 itemListFilePath.equals(o.itemListFilePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 locationListFilePath.equals(o.locationListFilePath)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 recipeListFilePath.equals(o.recipeListFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return Objects.hash(guiSettings, itemListFilePath,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                locationListFilePath, recipeListFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        sb.append(\"Gui Settings : \").append(guiSettings)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(\"\\nLocal item data file location : \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(itemListFilePath).append(\"\\nLocal location data file location : \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(locationListFilePath).append(\"\\nLocal recipe data file location : \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(recipeListFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 16,
      "blackonyyx": 6,
      "Rahul0506": 18,
      "aqcd": 3,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/DetailedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Represents a Detailed Item which may be displayed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DetailedItem extends Item {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Constructs a detailed item based on the given fields."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DetailedItem(int id, String name, Quantity quantity, String description, Set\u003cInteger\u003e locationIds,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                Set\u003cInteger\u003e recipeIds, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(id, name, quantity, description, locationIds, recipeIds, tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DisplayedInventoryType getType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return DisplayedInventoryType.DETAILED_ITEM;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "khenghun": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.InventoryComponent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents an Item in the Inventoryinator."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Item extends InventoryComponent {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static int idCounter \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e locationIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e recipeIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Item(int id, String name, Quantity quantity, String description, Set\u003cInteger\u003e locationIds,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                Set\u003cInteger\u003e recipeIds, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(id, name, quantity, description, locationIds, recipeIds, tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationIds.addAll(locationIds);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeIds.addAll(recipeIds);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!this.getType().equals(DisplayedInventoryType.DETAILED_ITEM)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            idCounter++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static int getIdCounter() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return idCounter;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public List\u003cInteger\u003e getLocationIds() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationIds;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public List\u003cInteger\u003e getRecipeIds() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return recipeIds;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Adds Recipe Id to item\u0027s recipe ids."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param recipeId recipe id connected to this item."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipeId(int recipeId) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (!recipeIds.contains(recipeId)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            recipeIds.add(recipeId);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Remove Recipe Id from item\u0027s recipe ids."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param recipeId recipe id connected to this item."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void removeRecipeId(int recipeId) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (recipeIds.contains(recipeId)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            recipeIds.remove((Object) recipeId);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if both items have the same name."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getName().equals(getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns true if both items have the same name and data fields."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getQuantity().equals((getQuantity()))"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getLocationIds().equals(getLocationIds())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getRecipeIds().equals(getRecipeIds())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Objects.hash(id, name, quantity, description, locationIds, recipeIds, tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a DetailedItem with the same fields."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DetailedItem detailedItem() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return new DetailedItem(id, name, quantity, description, Set.copyOf(locationIds),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                Set.copyOf(recipeIds), tags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DisplayedInventoryType getType() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return DisplayedInventoryType.ITEMS;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 125,
      "blackonyyx": 1,
      "Rahul0506": 7,
      "aqcd": 17,
      "khenghun": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ItemPrecursor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ItemPrecursor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cString\u003e locationNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Constructs a {@code ItemPrecursor}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param id ID of ItemPrecursor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param name Name of item."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param quantity Quantity of item."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param description Description of item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param locationNames Names of locations where item can be found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param tags Tags associated with item."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ItemPrecursor(int id, String name, Quantity quantity, String description,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                         Set\u003cString\u003e locationNames, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationNames.addAll(locationNames);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public List\u003cString\u003e getLocationNames() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return locationNames;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Item toItem(Set\u003cInteger\u003e locationIds, Set\u003cInteger\u003e recipeIds) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Item(id, name, quantity, description, locationIds, recipeIds, tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Returns true if both item precursors have the same name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * This defines a weaker notion of equality between two item precursors."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public boolean isSameItem(ItemPrecursor otherItem) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                \u0026\u0026 otherItem.getName().equals(getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof ItemPrecursor)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ItemPrecursor otherItem \u003d (ItemPrecursor) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getQuantity().equals(getQuantity())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getLocationNames().equals(getLocationNames())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "blackonyyx": 1,
      "Rahul0506": 73,
      "aqcd": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getName(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/NameIsExactlyPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class NameIsExactlyPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public NameIsExactlyPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assert(keywords.size() \u003e 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return keywords.get(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.exactlyMultipleWordsIgnoreCase(item.getName(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof NameIsExactlyPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameIsExactlyPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 35,
      "khenghun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/NameMatchesKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Tests that a {@code Item}\u0027s {@code Name} contains any of the keywords given, case-insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class NameMatchesKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public NameMatchesKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.matchesPatternIgnoreCase(item.getName(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        Pattern.compile(keyword, Pattern.CASE_INSENSITIVE)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof NameMatchesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameMatchesKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents a Item\u0027s quantity number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \"Quantity should only contain numbers, and it should be at least 1 digit long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param quantity A valid quantity number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        value \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if a given string is a valid quantity number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 value.equals(((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A item is considered unique by comparing using {@code Item#isSameItem(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * items uses Item#isSameItem(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of a item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * @see Item#isSameItem(Item)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class UniqueItemList implements Iterable\u003cItem\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param toCheck The item to check against."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean contains(Item toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameItem);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a item to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void add(Item toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!target.isSameItem(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param toRemove Item to remove from the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void remove(Item toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItems(UniqueItemList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Gets item ID given item name."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int findItemId(String itemName) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (Item item : internalList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (item.getName().equals(itemName)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                return item.getId();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Adds a recipe to an item."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param itemId ID of item the recipe is to be added to."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param recipeId ID of recipe to be added to item."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void addRecipeIdToItem(int itemId, int recipeId) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (Item item : internalList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (item.getId() \u003d\u003d itemId) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                item.addRecipeId(recipeId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Iterator\u003cItem\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private boolean itemsAreUnique(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                if (items.get(i).isSameItem(items.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 136,
      "blackonyyx": 3,
      "Rahul0506": 18,
      "aqcd": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/DuplicateItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(\"Operation would result in duplicate item\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents an Location in the Inventoryinator."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static int idCounter \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Location(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        checkArgument(isValidLocation(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d getIdCounter() + 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        idCounter++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void decrementIdCounter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        idCounter--;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static int getIdCounter() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return idCounter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns true if both locations have the same name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean isSameLocation(Location otherLocation) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (otherLocation \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherLocation !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherLocation.getName().equals(getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Returns true if both locations have the same identity fields."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * This defines a stronger notion of equality between two locations."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!(other instanceof Location)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Location otherLocation \u003d (Location) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return otherLocation.getName().equals(getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Objects.hash(id, name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return id + \": \" + name;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 82,
      "aqcd": 18,
      "khenghun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/UniqueLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A list of locations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A location is considered unique by comparing using {@code Location#isSameLocation(Location)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * locations uses Location#isSameLocation(Location) for equality so as to ensure that the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * location being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * unique in terms of identity in the UniqueLocationList. However, the removal of a location uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Location#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * as to ensure that the location with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * @see Location#isSameLocation(Location)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class UniqueLocationList implements Iterable\u003cLocation\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if the list contains an equivalent location as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean contains(Location toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLocation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns location ID of given location"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int findLocationID(Location toFind) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.stream().filter(toFind::isSameLocation).findFirst().get().getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a location to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void add(Location toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the same as another existing location in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(target, editedLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!target.isSameLocation(editedLocation) \u0026\u0026 contains(editedLocation)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.set(index, editedLocation);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Removes the equivalent location from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * The location must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void remove(Location toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocations(UniqueLocationList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Replaces the contents of this list with {@code locations}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(locations);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!locationsAreUnique(locations)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        internalList.setAll(locations);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ObservableList\u003cLocation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Iterator\u003cLocation\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                || (other instanceof UniqueLocationList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLocationList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns true if {@code locations} contains only unique locations."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private boolean locationsAreUnique(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (int i \u003d 0; i \u003c locations.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            for (int j \u003d i + 1; j \u003c locations.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                if (locations.get(i).isSameLocation(locations.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/DuplicateLocationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class DuplicateLocationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public DuplicateLocationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(\"Operation would result in duplicate item\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/LocationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Signals that the operation is unable to find the specified item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class LocationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Convenience class to define a {@code Pair\u003cInteger, Integer\u003e}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class Ingredient extends Pair\u003cInteger, Integer\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Creates a new ingredient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param key   The key for this pair"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param value The value to use for this pair"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Ingredient(Integer key, Integer value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(key, value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert value \u003e 0 : \"Value should never be 0 or negative\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Utilty function to check if itemId is equivalent to contained key of Ingredient."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param itemId identity key of item"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return boolean check whether the key stored in this ingredient is the queried item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean isItem(int itemId) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return getKey().equals(itemId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return String.valueOf(this.getKey());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Displays the name of the ingredient and the quantity, based on the item list given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param filteredItemList The current item list in the model."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return String representation of the ingredient ready for display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String toString(ObservableList\u003cItem\u003e filteredItemList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        HashMap\u003cInteger, String\u003e ingredientsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Store each item id and name as a pair into the hashmap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        filteredItemList.forEach(item -\u003e ingredientsMap.put(item.getId(), item.getName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!ingredientsMap.containsKey(this.getKey())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // ingredient must be found in item list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return ingredientsMap.get(this.getKey()) + \" [\" + this.getValue() + \"]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 15,
      "Rahul0506": 18,
      "khenghun": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/IngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A list of ingredients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class IngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e ingredientList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e ingredientUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FXCollections.unmodifiableObservableList(ingredientList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if the list contains an equivalent ingredient as the given ingredient."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds an ingredient to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The ingredient must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (contains((toAdd))) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Removes the equivalent ingredient from the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The ingredient must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!ingredientList.remove(toRemove)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setItems(IngredientList replacement) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.setAll(replacement.ingredientList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the contents of this list with {@code ingredients}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setItems(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!itemsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.setAll(ingredients);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientUnmodifiableList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientList.iterator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof IngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 ingredientList.equals(((IngredientList) other).ingredientList));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientList.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if {@code ingredients} contains only unique ingredients."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private boolean itemsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (ingredients.get(i).equals(ingredients.get(j))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 112,
      "khenghun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/IngredientPrecursor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class IngredientPrecursor extends Pair\u003cString, Integer\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public IngredientPrecursor(String key, Integer value) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(key, value);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Ingredient toIngredient(int ingredientId) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Ingredient(ingredientId, getValue());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/PrintableRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Represents a recipe ready for display in the Inventoryinator."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class PrintableRecipe extends Recipe {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private String printableIngredientList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public PrintableRecipe(int id, IngredientList ingredients, int productId, String productName,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           ProductQuantity productQuantity, String description,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                           ObservableList\u003cItem\u003e filteredItemList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(id, ingredients, productId, productName, productQuantity, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ingredients.forEach(ingredient -\u003e sb.append(ingredient.toString(filteredItemList)).append(\" \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.printableIngredientList \u003d sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public String getPrintableIngredients() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return this.printableIngredientList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "khenghun": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/ProductQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Represents a Recipe\u0027s product\u0027s quantity number in the inventory."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class ProductQuantity extends Quantity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param quantity A valid quantity number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ProductQuantity(String quantity) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(quantity);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.InventoryComponent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Represents an Recipe in the Inventoryinator."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class Recipe extends InventoryComponent {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static int idCounter \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final IngredientList ingredients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int productId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ProductQuantity productQuantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe(int id, IngredientList ingredients, int productId, String productName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                  ProductQuantity productQuantity, String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireAllNonNull(id, ingredients, productId, productQuantity, description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        idCounter++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static int getIdCounter() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return idCounter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns an {@code IngredientList}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public IngredientList getIngredients() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getProductId() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getProductName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ProductQuantity getProductQuantity() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productQuantity;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Generates a printable recipe for display."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @param filteredItemList The current item list which ingredients reference to."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @return Printable Recipe with the same fields as this recipe."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public PrintableRecipe print(ObservableList\u003cItem\u003e filteredItemList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return new PrintableRecipe(this.id, this.ingredients, this.productId, this.productName,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                this.productQuantity, this.description, filteredItemList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a new recipe with same fields and updated product name. Used for editing items."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public Recipe setProductName(String updatedProductName) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Recipe(id, ingredients, productId, updatedProductName, productQuantity, description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if both recipes have the same id."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getId() \u003d\u003d getId();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return otherRecipe.getId() \u003d\u003d getId()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductId() \u003d\u003d getProductId()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductName().equals(getProductName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductQuantity().equals(getProductQuantity())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u0026\u0026 otherRecipe.description.equals(getDescription());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Objects.hash(id, ingredients, productId, productQuantity, description);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return String.format(\"Recipe for: %s. %s\", productName, description);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DisplayedInventoryType getType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return DisplayedInventoryType.RECIPES;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 6,
      "blackonyyx": 1,
      "Rahul0506": 106,
      "khenghun": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipePrecursor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipePrecursor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cIngredientPrecursor\u003e ingredientPrecursors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ProductQuantity productQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Constructor for {@code RecipePrecursor}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param id ID of RecipePrecursor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param ingredientPrecursors ingredientPrecursors used in recipe."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param productName Name of product produced by the recipe."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param productQuantity Quantity of product produced by the recipe."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @param description Description of recipe."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipePrecursor(int id, List\u003cIngredientPrecursor\u003e ingredientPrecursors, String productName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                           ProductQuantity productQuantity, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(id, ingredientPrecursors, productName, productQuantity, description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.ingredientPrecursors \u003d ingredientPrecursors;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public List\u003cIngredientPrecursor\u003e getIngredientPrecursors() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return ingredientPrecursors;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getProductName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ProductQuantity getProductQuantity() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return productQuantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe toRecipe(int productId, IngredientList ingredients) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Recipe(id, ingredients, productId, productName, productQuantity, description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof RecipePrecursor)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipePrecursor otherRecipe \u003d (RecipePrecursor) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return otherRecipe.getIngredientPrecursors().equals(getIngredientPrecursors())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductName().equals(getProductName())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getProductQuantity().equals(getProductQuantity())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 otherRecipe.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "Rahul0506": 64,
      "aqcd": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if the list contains an equivalent recipe as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Removes the equivalent recipe from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DuplicateIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DuplicateIngredientException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(\"Operation would result in duplicate ingredient\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        super(\"Operation would result in duplicate recipe\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Item[] getSampleItems() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Item[] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new Item(0, \"Apple\", new Quantity(\"99\"), \"Delicious\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(0)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        new HashSet\u003c\u003e(), getTagSet(\"Consummable\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            new Item(1, \"Banana\", new Quantity(\"99\"), \"Delicious\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(0)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        new HashSet\u003c\u003e(), getTagSet(\"Consummable\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            new Item(2, \"Fruit basket\", new Quantity(\"99\"), \"Delicious\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(0)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(0)), getTagSet(\"Consummable\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static ReadOnlyItemList getSampleItemList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList sampleIl \u003d new ItemList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (Item sampleItem : getSampleItems()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            sampleIl.addItem(sampleItem);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return sampleIl;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static Location[] getSampleLocations() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Location[] {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new Location(\"Town\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static ReadOnlyLocationList getSampleLocationList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        LocationList sampleLl \u003d new LocationList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (Location sampleLocation : getSampleLocations()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            sampleLl.addLocation(sampleLocation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return sampleLl;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.add(new Ingredient(0, 2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredientList.add(new Ingredient(1, 3));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        IngredientList ingredients \u003d new IngredientList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredients.setItems(ingredientList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Recipe[] {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new Recipe(0, ingredients, 2, \"Fruit basket\", new ProductQuantity(\"1\"), \"Recipe 1\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static ReadOnlyRecipeList getSampleRecipeList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipeList sampleRl \u003d new RecipeList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            sampleRl.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return sampleRl;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 34,
      "Rahul0506": 37,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ItemListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ItemList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface ItemListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns ItemList data as a {@link ReadOnlyItemList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #getItemListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003e readItemList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Saves the given {@link ReadOnlyItemList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveItemList(ReadOnlyItemList addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #saveItemList(ReadOnlyItemList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveItemList(ReadOnlyItemList addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Saves the given {@link ReadOnlyLocationList} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList addressBook) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #saveLocationList(ReadOnlyLocationList)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Integer itemId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Integer itemQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * given {@code itemId} and {@code itemQuantity}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"itemId\") int itemId,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                                 @JsonProperty(\"itemQuantity\") int itemQuantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemId \u003d itemId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemQuantity \u003d itemQuantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemId \u003d source.getKey();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemQuantity \u003d source.getValue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Ingredient toModelType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        //TODO: check if exception needed here"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new Ingredient(itemId, itemQuantity);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Jackson-friendly version of {@link Item}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonAdaptedItem {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e locationIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cInteger\u003e recipeIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonAdaptedItem} with the given item details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedItem(@JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"locationIds\") List\u003cInteger\u003e locationIds,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"recipeIds\") List\u003cInteger\u003e recipeIds,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                           @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (locationIds !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.locationIds.addAll(locationIds);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (recipeIds !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.recipeIds.addAll(recipeIds);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code Item} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedItem(Item source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        quantity \u003d source.getQuantity().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationIds.addAll(new ArrayList\u003c\u003e(source.getLocationIds()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        recipeIds.addAll(new ArrayList\u003c\u003e(source.getRecipeIds()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted item."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Item toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final List\u003cTag\u003e itemTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            itemTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(itemTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Set\u003cInteger\u003e modelLocationIds \u003d new HashSet\u003c\u003e(locationIds);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        final Set\u003cInteger\u003e modelRecipeIds \u003d new HashSet\u003c\u003e(recipeIds);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Item(id, name, modelQuantity, description, modelLocationIds,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                modelRecipeIds, modelTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLocation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Jackson-friendly version of {@link Location}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonAdaptedLocation {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Location\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonAdaptedLocation} with the given item details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedLocation(@JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                               @JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code Location} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonAdaptedLocation(Location source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Location} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Location toModelType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Location(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final int productId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String productQuantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"productId\") int productId,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"productName\") String productName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                             @JsonProperty(\"productQuantity\") String productQuantity,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                             @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.productQuantity \u003d productQuantity;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        id \u003d source.getId();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        productId \u003d source.getProductId();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        productName \u003d source.getProductName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        productQuantity \u003d source.getProductQuantity().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d source.getIngredients().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        ingredients.addAll(ingredientList.stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final List\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (JsonAdaptedIngredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            ingredientList.add(ingredient.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        IngredientList modelIngredients \u003d new IngredientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        modelIngredients.setItems(ingredientList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (productQuantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!ProductQuantity.isValidQuantity(productQuantity)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            throw new IllegalValueException(ProductQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        final ProductQuantity modelQuantity \u003d new ProductQuantity(productQuantity);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new Recipe(id, modelIngredients, productId, productName, modelQuantity, description);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "Rahul0506": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonItemListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A class to access ItemList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class JsonItemListStorage implements ItemListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItemListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonItemListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return readItemList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #readItemList()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cJsonSerializableItemList\u003e jsonItemList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                filePath, JsonSerializableItemList.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (jsonItemList.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.of(jsonItemList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #saveItemList(ReadOnlyItemList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(itemList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableItemList(itemList), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList, Path filePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 83,
      "Rahul0506": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonLocationListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A class to access Location data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class JsonLocationListStorage implements LocationListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLocationListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonLocationListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyLocationList\u003e readLocationList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return readLocationList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #readLocationList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyLocationList\u003e readLocationList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Optional\u003cJsonSerializableLocationList\u003e jsonLocation \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                filePath, JsonSerializableLocationList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (jsonLocation.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return Optional.of(jsonLocation.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        } catch (IllegalValueException | NullPointerException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        saveLocationList(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Similar to {@link #saveLocationList(ReadOnlyLocationList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLocationList(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 79,
      "aqcd": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRecipeListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * A class to access RecipeList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class JsonRecipeListStorage implements RecipeListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonRecipeListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return readRecipeList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Similar to {@link #readRecipeList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        Optional\u003cJsonSerializableRecipeList\u003e jsonRecipeList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                filePath, JsonSerializableRecipeList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (jsonRecipeList.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            return Optional.of(jsonRecipeList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveRecipeList(recipeList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Similar to {@link #saveRecipeList(ReadOnlyRecipeList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        requireNonNull(recipeList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeList(recipeList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * An Immutable ItemList that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "@JsonRootName(value \u003d \"itemlist\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonSerializableItemList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Items list contains duplicate item(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cJsonAdaptedItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonSerializableItemList} with the given items."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableItemList(@JsonProperty(\"items\") List\u003cJsonAdaptedItem\u003e items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.items.addAll(items);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code ReadOnlyItemList} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableItemList}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableItemList(ReadOnlyItemList source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        items.addAll(source.getItemList().stream().map(JsonAdaptedItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this item list into the model\u0027s {@code ItemList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList itemList \u003d new ItemList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (JsonAdaptedItem jsonAdaptedItem : items) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Item item \u003d jsonAdaptedItem.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (itemList.hasItem(item)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            itemList.addItem(item);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 60,
      "Rahul0506": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * An Immutable LocationList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "@JsonRootName(value \u003d \"locationlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "class JsonSerializableLocationList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOCATION \u003d \"Locations list contains duplicate location(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private final List\u003cJsonAdaptedLocation\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Constructs a {@code JsonSerializableLocationList} with the given locations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableLocationList(@JsonProperty(\"locations\") List\u003cJsonAdaptedLocation\u003e locations) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.locations.addAll(locations);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts a given {@code ReadOnlyLocationList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLocationList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public JsonSerializableLocationList(ReadOnlyLocationList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locations.addAll(source.getLocationList().stream().map(JsonAdaptedLocation::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Converts this location list into the model\u0027s {@code LocationList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public LocationList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        LocationList locationList \u003d new LocationList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (JsonAdaptedLocation jsonAdaptedLocation : locations) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Location location \u003d jsonAdaptedLocation.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (locationList.hasLocation(location)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            locationList.addLocation(location);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return locationList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 58,
      "aqcd": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * An Immutable RecipeList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "@JsonRootName(value \u003d \"recipelist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "class JsonSerializableRecipeList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipes list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeList} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonSerializableRecipeList(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public JsonSerializableRecipeList(ReadOnlyRecipeList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Converts this recipe list into the model\u0027s {@code RecipeList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public RecipeList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        RecipeList recipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            if (recipeList.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            recipeList.addRecipe(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LocationListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Represents a storage for {@link seedu.address.model.LocationList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public interface LocationListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Path getLocationListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns LocationList data as a {@link ReadOnlyLocationList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyLocationList\u003e readLocationList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #getLocationListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyLocationList\u003e readLocationList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Saves the given {@link ReadOnlyLocationList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param locationList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList locationList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see #saveLocationList(ReadOnlyLocationList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void saveLocationList(ReadOnlyLocationList locationList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RecipeListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Represents a storage for {@link seedu.address.model.RecipeList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public interface RecipeListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Path getRecipeListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Returns RecipeList data as a {@link ReadOnlyRecipeList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @see #getRecipeListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Optional\u003cReadOnlyRecipeList\u003e readRecipeList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Saves the given {@link ReadOnlyRecipeList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @param recipeList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * @see #saveRecipeList(ReadOnlyRecipeList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveRecipeList(ReadOnlyRecipeList recipeList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public interface Storage extends UserPrefsStorage, ItemListStorage, LocationListStorage, RecipeListStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveItemList(ReadOnlyItemList itemList) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    Optional\u003cReadOnlyLocationList\u003e readLocationList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    void saveModel(Model model) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "Rahul0506": 12,
      "aqcd": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private ItemListStorage itemListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private LocationListStorage locationListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private RecipeListStorage recipeListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ItemListStorage}, {@code LocationListStorage},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * {@code RecipeListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public StorageManager(ItemListStorage itemListStorage, LocationListStorage locationListStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                          RecipeListStorage recipeListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.itemListStorage \u003d itemListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.locationListStorage \u003d locationListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        this.recipeListStorage \u003d recipeListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItemList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return readItemList(itemListStorage.getItemListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyItemList\u003e readItemList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return itemListStorage.readItemList(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        saveItemList(itemList, itemListStorage.getItemListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList(ReadOnlyItemList itemList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemListStorage.saveItemList(itemList, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LocationList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return locationListStorage.getLocationListFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Optional\u003cReadOnlyLocationList\u003e readLocationList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Optional\u003cReadOnlyLocationList\u003e readLocationList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return locationListStorage.readLocationList(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        saveLocationList(locationList, locationListStorage.getLocationListFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveLocationList(ReadOnlyLocationList locationList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        locationListStorage.saveLocationList(locationList, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RecipeList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeListStorage.getRecipeListFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return readRecipeList(recipeListStorage.getRecipeListFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public Optional\u003cReadOnlyRecipeList\u003e readRecipeList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return recipeListStorage.readRecipeList(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveRecipeList(recipeList, recipeListStorage.getRecipeListFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveRecipeList(ReadOnlyRecipeList recipeList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        recipeListStorage.saveRecipeList(recipeList, filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void saveModel(Model model) throws IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveItemList(model.getItemList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveRecipeList(model.getRecipeList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        saveLocationList(model.getLocationList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 30,
      "Rahul0506": 50,
      "aqcd": 8,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 4,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DetailedItemCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.DetailedItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * An UI component that displays information of a {@code Item}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DetailedItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final String FXML \u003d \"InventoryListDetailedCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public final DetailedItem detailedItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates a {@code ItemCode} with the given {@code Item} and index to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DetailedItemCard(DetailedItem detailedItem, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.detailedItem \u003d detailedItem;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        name.setText(detailedItem.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        quantity.setText(\"Quantity: \" + detailedItem.getQuantity());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        description.setText(detailedItem.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!(other instanceof DetailedItemCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DetailedItemCard card \u003d (DetailedItemCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return detailedItem.equals(card.detailedItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 51,
      "khenghun": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayedInventoryType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Contains the different possible view settings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public enum DisplayedInventoryType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    // UNCHANGED is used only for commands, to show the current view is UNCHANGED"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    UNCHANGED, ITEMS, RECIPES, DETAILED_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khenghun": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \"https://github.com/AY2021S1-CS2103T-F13-1/tp/blob/master/docs/UserGuide.md\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * An UI component that displays information of a {@code Item}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String FXML \u003d \"InventoryListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates a {@code ItemCode} with the given {@code Item} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name.setText(item.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        quantity.setText(\"Quantity: \" + item.getQuantity());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        description.setText(\"Description: \" + item.getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        if (!(other instanceof InventoryCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        InventoryCard card \u003d (InventoryCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return item.equals(card.item);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 58,
      "Rahul0506": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.InventoryComponent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.DetailedItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.PrintableRecipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * Panel containing the list of inventory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String FXML \u003d \"InventoryListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InventoryListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private DisplayedInventoryType inventoryType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ListView\u003cInventoryComponent\u003e itemListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a {@code InventoryListPanel} with the given {@code ObservableList} and {@code View.InventoryType}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public InventoryListPanel(List\u003cInventoryComponent\u003e inventoryList, DisplayedInventoryType inventoryType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.inventoryType \u003d inventoryType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ObservableList\u003cInventoryComponent\u003e observableInventoryList \u003d FXCollections.observableList(inventoryList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemListView.setItems(observableInventoryList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Updates the InventoryListPanel to display inventory of the given {@code View.InventoryType}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * in the given {@code ObservableList}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void refresh(List\u003cInventoryComponent\u003e inventoryList, DisplayedInventoryType inventoryType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.inventoryType \u003d inventoryType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ObservableList\u003cInventoryComponent\u003e observableInventoryList \u003d FXCollections.observableList(inventoryList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemListView.setItems(observableInventoryList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public DisplayedInventoryType getInventoryType() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return this.inventoryType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setInventoryType(DisplayedInventoryType inventoryType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.inventoryType \u003d inventoryType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of the current inventory, either {@code Item} using an"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * {@code InventoryCard} or {@code PrintableRecipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cInventoryComponent\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        protected void updateItem(InventoryComponent inventoryComponent, boolean empty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            super.updateItem(inventoryComponent, empty);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            if (empty || inventoryComponent \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                switch (inventoryComponent.getType()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                case ITEMS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    setGraphic(new InventoryCard((Item) inventoryComponent, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                case RECIPES:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    setGraphic(new RecipeCard((PrintableRecipe) inventoryComponent, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                case DETAILED_ITEM:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    setGraphic(new DetailedItemCard((DetailedItem) inventoryComponent, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                    throw new IllegalStateException(\"This inventoryType is not valid\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 32,
      "Rahul0506": 3,
      "khenghun": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryMainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryMainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final String FXML \u003d \"InventoryMainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private InventoryListPanel inventoryListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private StackPane itemListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private DisplayedInventoryType inventoryType;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryMainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        inventoryType \u003d DisplayedInventoryType.ITEMS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         * TO DO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        inventoryListPanel \u003d new InventoryListPanel(logic.getInventoryList(inventoryType), inventoryType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        itemListPanelPlaceholder.getChildren().add(inventoryListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getItemListFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            // update the type of inventory to be displayed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            switch (commandResult.getInventoryType()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            case ITEMS:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                inventoryType \u003d DisplayedInventoryType.ITEMS;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            case RECIPES:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                inventoryType \u003d DisplayedInventoryType.RECIPES;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            case DETAILED_ITEM:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                inventoryType \u003d DisplayedInventoryType.DETAILED_ITEM;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            case UNCHANGED:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                // inventoryType stays the same"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                throw new IllegalStateException(\"This inventoryType is not valid\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            // updates the panel"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            inventoryListPanel.refresh(logic.getInventoryList(inventoryType), inventoryType);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 8,
      "Rahul0506": 5,
      "-": 180,
      "khenghun": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryUiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.InventoryMainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class InventoryUiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InventoryUiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/inventoryinator.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private InventoryMainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public InventoryUiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            mainWindow \u003d new InventoryMainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new Image(InventoryMainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 2,
      "Rahul0506": 5,
      "aqcd": 3,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.PrintableRecipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private static final String FXML \u003d \"RecipeCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public final PrintableRecipe printableRecipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Label productName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Label ingredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Label productQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Creates a {@code RecipeCode} with the given {@code Recipe} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public RecipeCard(PrintableRecipe printableRecipe, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        this.printableRecipe \u003d printableRecipe;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        productName.setText(printableRecipe.getProductName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ingredients.setText(\"Ingredients: \" + printableRecipe.getPrintableIngredients());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        productQuantity.setText(\"Produces: \" + printableRecipe.getProductQuantity().toString() + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                + printableRecipe.getProductName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        description.setText(printableRecipe.getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        return printableRecipe.equals(card.printableRecipe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.InventoryMainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        URL fxmlFileUrl \u003d InventoryMainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/InventoryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 28
    }
  },
  {
    "path": "src/main/resources/view/InventoryListDetailedCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 28
    }
  },
  {
    "path": "src/main/resources/view/InventoryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/InventoryMainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "         title\u003d\"Inventoryinator\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        \u003cImage url\u003d\"@/images/inventoryinator.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cVBox fx:id\u003d\"itemList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"itemListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "Rahul0506": 57,
      "aqcd": 1
    }
  },
  {
    "path": "src/main/resources/view/RecipeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003cLabel fx:id\u003d\"productName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$productName\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003cLabel fx:id\u003d\"ingredients\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ingredients\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003cLabel fx:id\u003d\"productQuantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$productQuantity\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khenghun": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/inventoryinator.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    //---------------- Tests for matchesPatternIgnoreCase ------------------------"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void matchesPatternIgnoreCase() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String toMatch \u003d \"Example String\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String start \u003d \"Exa\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String end \u003d \"ing\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String mid \u003d \"e Str\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Full match"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(StringUtil.matchesPatternIgnoreCase(toMatch, Pattern.compile(toMatch)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Start match"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(StringUtil.matchesPatternIgnoreCase(toMatch, Pattern.compile(start)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // End match"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(StringUtil.matchesPatternIgnoreCase(toMatch, Pattern.compile(end)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Mid match"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(StringUtil.matchesPatternIgnoreCase(toMatch, Pattern.compile(mid)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Case sensitive"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertFalse(StringUtil.matchesPatternIgnoreCase(toMatch, Pattern.compile(toMatch.toLowerCase())));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Empty Pattern matches all"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(StringUtil.matchesPatternIgnoreCase(toMatch, Pattern.compile(\"\")));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // String null"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                StringUtil.matchesPatternIgnoreCase(null, Pattern.compile(toMatch)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Pattern null"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.matchesPatternIgnoreCase(toMatch, null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 35,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddItemCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertInventoryCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationsList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemPrecursorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddItemCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        model \u003d new ModelManager(new ItemList(), getTypicalLocationsList(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_newItem_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor validItemPrecursor \u003d new ItemPrecursorBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item validItem \u003d model.processPrecursor(validItemPrecursor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getItemList(), model.getLocationList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                model.getRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedModel.addItem(validItem);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertCommandSuccess(new AddItemCommand(validItemPrecursor), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                String.format(AddItemCommand.MESSAGE_SUCCESS, validItem), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_duplicateItem_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor validItemPrecursor \u003d new ItemPrecursorBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item validItem \u003d model.processPrecursor(validItemPrecursor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Model modelWithItem \u003d new ModelManager(model.getItemList(), model.getLocationList(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                model.getRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelWithItem.addItem(validItem);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertInventoryCommandFailure(new AddItemCommand(validItemPrecursor), modelWithItem,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                AddItemCommand.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 51,
      "khenghun": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemPrecursorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddItemCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItemCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for successful adding of item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_itemAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ModelStubAcceptingItemAdded modelStub \u003d new ModelStubAcceptingItemAdded();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor validItemPrecursor \u003d new ItemPrecursorBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item validItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        CommandResult commandResult \u003d new AddItemCommand(validItemPrecursor).execute(modelStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(String.format(AddItemCommand.MESSAGE_SUCCESS, validItem), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(Collections.singletonList(validItem).size(), modelStub.itemsAdded.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(validItem.isSameItem(modelStub.itemsAdded.get(0)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for detecting duplicate items."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_duplicateItem_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor validItemPrecursor \u003d new ItemPrecursorBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item validItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddItemCommand addItemCommand \u003d new AddItemCommand(validItemPrecursor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithItem(validItem);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                AddItemCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addItemCommand.execute(modelStub));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for equivalency."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor apple \u003d new ItemPrecursorBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor banana \u003d new ItemPrecursorBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddItemCommand addAppleCommand \u003d new AddItemCommand(apple);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddItemCommand addBananaCommand \u003d new AddItemCommand(banana);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddItemCommand addAppleCommandCopy \u003d new AddItemCommand(apple);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * A Model stub that contains a single item."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private class ModelStubWithItem extends ModelStub {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        private final Item item;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ModelStubWithItem(Item item) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return this.item.isSameItem(item);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * A Model stub that always accepts the item being added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private class ModelStubAcceptingItemAdded extends ModelStub {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        final ArrayList\u003cItem\u003e itemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return itemsAdded.stream().anyMatch(item::isSameItem);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        public void addItem(Item item) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            itemsAdded.add(item);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            return new ItemList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddQuantityToItemCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DECREMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECREASED_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INCREASED_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_ORIGINAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DECREMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_INCREMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertInventoryCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddQuantityToItemCommandIntegrationTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Item apple;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets up model to contain an item list with only the item apple in it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        model \u003d new ModelManager(new ItemList(), new LocationList(), new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedModel \u003d new ModelManager(new ItemList(), new LocationList(), new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        apple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_ORIGINAL).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        model.addItem(apple);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_throwsNullException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQuantityToItemCommand(null, 0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for successful edit of an item\u0027s quantity found in the item list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_addQuantity_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, VALID_QUANTITY_INCREMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, apple);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // expected model should contain the edited apple"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_INCREASED_QUANTITY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedModel.addItem(editedApple);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertCommandSuccess(aic, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for successful decrease of an item\u0027s quantity found in the item list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_decreaseQuantity_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, VALID_QUANTITY_DECREMENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, apple);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // expected model should contain the edited apple"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_DECREASED_QUANTITY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedModel.addItem(editedApple);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertCommandSuccess(aic, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for failed decrease of an item\u0027s quantity beyond 0."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_decreaseQuantityToNegative_throwsException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, INVALID_QUANTITY_DECREMENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String expectedMessage \u003d AddQuantityToItemCommand.MESSAGE_NEGATIVE_QUANTITY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertInventoryCommandFailure(aic, model, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddQuantityToItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DECREASED_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INCREASED_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_ORIGINAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_DECREMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_INCREMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_INT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_INT_ALT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.EditItemCommandTest.ModelStubWithItemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddQuantityToItemCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private ModelStubWithItemList modelStub;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private ModelStubWithItemList expectedModelStub;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Item apple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_ORIGINAL).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private ItemList itemList \u003d new ItemList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private ItemList expectedItemList \u003d new ItemList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_throwsNullException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQuantityToItemCommand(null, 0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for successful increase of an item\u0027s quantity found in the item list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_increaseQuantity_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemList.addItem(apple);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelStub \u003d new ModelStubWithItemList(itemList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, VALID_QUANTITY_INCREMENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, apple);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // expected model should contain the edited apple"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_INCREASED_QUANTITY).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedItemList.addItem(editedApple);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithItemList(expectedItemList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertCommandSuccess(aic, modelStub, expectedMessage, expectedModelStub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for successful decrease of an item\u0027s quantity found in the item list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_decreaseQuantity_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemList.addItem(apple);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelStub \u003d new ModelStubWithItemList(itemList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, VALID_QUANTITY_DECREMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, apple);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // expected model should contain the edited apple"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_DECREASED_QUANTITY).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedItemList.addItem(editedApple);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithItemList(expectedItemList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertCommandSuccess(aic, modelStub, expectedMessage, expectedModelStub);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic1 \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, VALID_QUANTITY_INT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic2 \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, VALID_QUANTITY_INT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(aic1, aic2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(aic1, aic1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotEquals(null, aic1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotEquals(aic1, new ListItemCommand());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic3 \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE, VALID_QUANTITY_INT_ALT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotEquals(aic1, aic3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand aic4 \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_BANANA, VALID_QUANTITY_INT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotEquals(aic1, aic4);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRecipeCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertInventoryCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.RecipePrecursorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddRecipeCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        model \u003d new ModelManager(getTypicalItemList(), getTypicalLocationsList(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_newRecipe_success() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor validRecipePrecursor \u003d new RecipePrecursorBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Recipe validRecipe \u003d model.processPrecursor(validRecipePrecursor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getItemList(), model.getLocationList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                model.getRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        expectedModel.addRecipe(validRecipe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertCommandSuccess(new AddRecipeCommand(validRecipePrecursor), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                String.format(AddRecipeCommand.MESSAGE_SUCCESS, validRecipe), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // Reset model."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        DeleteRecipeCommand deleteCommand \u003d new DeleteRecipeCommand(\"Apple\", Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor validRecipePrecursor \u003d new RecipePrecursorBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Recipe validRecipe \u003d model.processPrecursor(validRecipePrecursor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Model modelWithRecipe \u003d new ModelManager(model.getItemList(), model.getLocationList(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                model.getRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelWithRecipe.addRecipe(validRecipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertInventoryCommandFailure(new AddRecipeCommand(validRecipePrecursor), modelWithRecipe,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                AddRecipeCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 58,
      "khenghun": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.RecipePrecursorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddRecipeCommand(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for detecting item not found in recipe."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void execute_itemNotFoundRecipe_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor validRecipePrecursor \u003d new RecipePrecursorBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(validRecipePrecursor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                AddRecipeCommand.MESSAGE_ITEM_NOT_FOUND, () -\u003e addRecipeCommand.execute(modelStub));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for equivalency."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor applePie \u003d new RecipePrecursorBuilder().withDescription(\"Apple Pie\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor bananaPie \u003d new RecipePrecursorBuilder().withDescription(\"Banana Pie\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddRecipeCommand addApplePieCommand \u003d new AddRecipeCommand(applePie);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddRecipeCommand addBananaPieCommand \u003d new AddRecipeCommand(bananaPie);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(addApplePieCommand.equals(addApplePieCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddRecipeCommand addAppleCommandCopy \u003d new AddRecipeCommand(applePie);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(addApplePieCommand.equals(addAppleCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(addApplePieCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(addApplePieCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(addApplePieCommand.equals(addBananaPieCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    // TODO update tests after command implementation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 3,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different displayed inventory type -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                DisplayedInventoryType.ITEMS)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different displayed inventory type -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                DisplayedInventoryType.ITEMS).hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "khenghun": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_INGREDIENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_PRODUCT_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // items"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_NAME_APPLE \u003d \"Apple\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_QUANTITY_APPLE \u003d \"9\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_QUANTITY_BANANA \u003d \"99\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_DESCRIPTION_APPLE \u003d \"Recovers 10 hp\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_DESCRIPTION_BANANA \u003d \"Used as bait\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_LOCATION_PEACH_ORCHARD \u003d \"Bob\u0027s peach orchard\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String VALID_ITEM_LOCATION_SPINACH_GARDEN \u003d \"Bob\u0027s spinach garden\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_ITEM_QUANTITY_ORIGINAL \u003d \"50\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int VALID_QUANTITY_INT \u003d 100;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int VALID_QUANTITY_INT_ALT \u003d 200;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int VALID_QUANTITY_INCREMENT \u003d 10;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_INCREASED_QUANTITY \u003d \"60\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int VALID_QUANTITY_DECREMENT \u003d -50;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_DECREASED_QUANTITY \u003d \"0\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int INVALID_QUANTITY_DECREMENT \u003d -51;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    // recipe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_PRODUCT_NAME_APPLE_PIE \u003d \"Apple Pie\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_PRODUCT_NAME_BANANA_PIE \u003d \"Banana Pie\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int VALID_RECIPE_ID_TWO \u003d 2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_QUANTITY_APPLE_PIE \u003d \"1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_QUANTITY_APPLE_PIE_ALTERNATE \u003d \"2\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_QUANTITY_BANANA_PIE \u003d \"3\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_DESC_APPLE_PIE \u003d \"Apple-y!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_DESC_APPLE_PIE_ALTERNATE \u003d \"Not Apple-y!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_DESC_BANANA_PIE \u003d \"Banana-y!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_INGREDIENTS_APPLE_PIE \u003d \"Apple[1] Banana[2]\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String VALID_RECIPE_INGREDIENTS_BANANA_PIE \u003d \"Apple[2] Banana[1]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String INVALID_RECIPE_QUANTITY_APPLE_PIE \u003d \"-1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    //prefix"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String INVALID_NAME_PREFIX \u003d \" --n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    // Command parts"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_NAME_DESC_APPLE \u003d \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_NAME_DESC_BANANA \u003d \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_NAME + VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_QUANTITY_DESC_APPLE \u003d \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + VALID_ITEM_QUANTITY_APPLE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_QUANTITY_DESC_BANANA \u003d \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_QUANTITY + VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_DESCRIPTION_DESC_APPLE \u003d \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + VALID_ITEM_DESCRIPTION_APPLE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_DESCRIPTION_DESC_BANANA \u003d \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_DESCRIPTION + VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_LOCATION_DESC_PEACH_ORCHARD \u003d \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + VALID_ITEM_LOCATION_PEACH_ORCHARD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String ITEM_LOCATION_DESC_SPINACH_GARDEN \u003d \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            + PREFIX_ITEM_LOCATION + VALID_ITEM_LOCATION_SPINACH_GARDEN;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_PRODUCT_NAME_APPLE_PIE \u003d \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + VALID_RECIPE_PRODUCT_NAME_APPLE_PIE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_PRODUCT_NAME_BANANA_PIE \u003d \" \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_NAME + VALID_RECIPE_PRODUCT_NAME_BANANA_PIE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_QUANTITY_APPLE_PIE \u003d \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_QUANTITY + VALID_RECIPE_QUANTITY_APPLE_PIE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_QUANTITY_BANANA_PIE \u003d \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_QUANTITY + VALID_RECIPE_QUANTITY_BANANA_PIE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_DESCRIPTION_APPLE_PIE \u003d \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + VALID_RECIPE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_DESCRIPTION_BANANA_PIE \u003d \" \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + VALID_RECIPE_DESC_BANANA_PIE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_INGREDIENTS_APPLE_PIE \u003d \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_INGREDIENTS + VALID_RECIPE_INGREDIENTS_APPLE_PIE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String RECIPE_INGREDIENTS_BANANA_PIE \u003d \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_INGREDIENTS + VALID_RECIPE_INGREDIENTS_BANANA_PIE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String INVALID_RECIPE_QUANTITY \u003d \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            + PREFIX_RECIPE_PRODUCT_QUANTITY + INVALID_RECIPE_QUANTITY_APPLE_PIE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_ITEM_QUANTITY + \"9a\"; // \u0027a\u0027 not allowed in quantity"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Version for InventoryListCommands"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * - the item list, filtered item list, recipe list, filtered recipe list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *   location list, filtered location list {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param command Command to execute"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param actualModel the actual model"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param expectedMessage expected error message from execution"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public static void assertInventoryCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemList expectedItemList \u003d new ItemList(actualModel.getItemList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        List\u003cItem\u003e expectedFilteredItemList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredItemList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        RecipeList expectedRecipeList \u003d new RecipeList(actualModel.getRecipeList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredRecipeList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        LocationList expectedLocationList \u003d new LocationList(actualModel.getLocationList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cLocation\u003e expectedFilteredLocationList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredLocationList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(expectedItemList, actualModel.getItemList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(expectedFilteredItemList, actualModel.getFilteredItemList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(expectedRecipeList, actualModel.getRecipeList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(expectedFilteredRecipeList, actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(expectedLocationList, actualModel.getLocationList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(expectedFilteredLocationList, actualModel.getFilteredLocationList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 32,
      "blackonyyx": 22,
      "aqcd": 51,
      "-": 54,
      "khenghun": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteItemCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertInventoryCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationsList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DeleteItemCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        model \u003d new ModelManager(getTypicalItemList(), getTypicalLocationsList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                getTypicalRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Item itemToDelete \u003d APPLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand deleteItemCommand \u003d new DeleteItemCommand(itemToDelete.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItemCommand.MESSAGE_SUCCESS, itemToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getItemList(), model.getLocationList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                model.getRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // Perform a manual deletion of all matching recipes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        expectedModel.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e(expectedModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        recipeList.removeIf(y -\u003e !y.getProductName().equals(itemToDelete.getName())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \u0026\u0026 y.getIngredients()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .noneMatch(z -\u003e z.isItem(itemToDelete.getId())));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        recipeList.forEach(expectedModel::deleteRecipe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertCommandSuccess(deleteItemCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute_invalidNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String itemName \u003d \"Someone\u0027s Toenail\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand deleteItemCommand \u003d new DeleteItemCommand(itemName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertInventoryCommandFailure(deleteItemCommand, model, DeleteItemCommand.MESSAGE_ITEM_NOT_FOUND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute_deleteAnDeletedItem_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Item itemToDelete \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand dc \u003d new DeleteItemCommand(itemToDelete.getName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dc.execute(model); // Expected to suceed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand d2 \u003d new DeleteItemCommand(itemToDelete.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // Delete an item a second time."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                DeleteItemCommand.MESSAGE_ITEM_NOT_FOUND, () -\u003e d2.execute(model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 73,
      "justacasul": 1,
      "khenghun": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.PEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DeleteItemCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private ModelStubWithItemAndRecipeList modelStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private ModelStubWithItemAndRecipeList expectedModelStub;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        modelStub \u003d new ModelStubWithItemAndRecipeList(getTypicalItemList(), getTypicalRecipeList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithItemAndRecipeList(getTypicalItemList(), getTypicalRecipeList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void constructor_throwsNullException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteItemCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tests for successful deletion of a item found in the item list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * with no connecting recipes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute_isolatedItemDeletion_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand dic \u003d new DeleteItemCommand(PEAR.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        expectedModelStub.deleteItem(PEAR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItemCommand.MESSAGE_SUCCESS, PEAR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertCommandSuccess(dic, modelStub, expectedMessage, expectedModelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute_itemNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand dic \u003d new DeleteItemCommand(\"Bob\u0027s Toe nail\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(CommandException.class, DeleteItemCommand.MESSAGE_ITEM_NOT_FOUND, ("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            ) -\u003e dic.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(modelStub, expectedModelStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tests for successful deletion of a item found in the item list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * with recipes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute_itemDeletion_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Item itemToDelete \u003d APPLE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand deleteItemCommand \u003d new DeleteItemCommand(itemToDelete.getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItemCommand.MESSAGE_SUCCESS, itemToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // Perform a manual deletion of all matching recipes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        expectedModelStub.deleteItem(itemToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e(expectedModelStub.getFilteredRecipeList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        recipeList.removeIf(y -\u003e !y.getProductName().equals(itemToDelete.getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \u0026\u0026 y.getIngredients()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .noneMatch(z -\u003e z.isItem(itemToDelete.getId())));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        recipeList.forEach(expectedModelStub::deleteRecipe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertCommandSuccess(deleteItemCommand, modelStub, expectedMessage, expectedModelStub);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute_itemIsSoftDeleted() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand dic \u003d new DeleteItemCommand(PEAR.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dic.execute(modelStub);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        //Assert that the item not contained within the model"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(modelStub.getItemList().getItemList().contains(PEAR));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * A Model stub which contains a item and a recipe list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private class ModelStubWithItemAndRecipeList extends ModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        private final ItemList itemList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        private final RecipeList recipeList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public ModelStubWithItemAndRecipeList(ReadOnlyItemList itemList, ReadOnlyRecipeList recipeList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.recipeList \u003d new RecipeList(recipeList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeList.getRecipeList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.itemList \u003d new ItemList(itemList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return recipeList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return filteredRecipes;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            recipeList.deleteRecipe(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return itemList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return filteredItems;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public void deleteItem(Item item) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            itemList.deleteItem(item);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 138,
      "justacasul": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteRecipeCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertInventoryCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.APPLE_PIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DeleteRecipeCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalItemList(), getTypicalLocationsList(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            getTypicalRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for successful deletion of a recipe found in the recipe list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand drc \u003d new DeleteRecipeCommand(\"Apple\", Index.fromOneBased(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalItemList(), getTypicalLocationsList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                getTypicalRecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModel.deleteRecipe(APPLE_PIE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteRecipeCommand.MESSAGE_SUCCESS, APPLE_PIE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(drc, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure of deletion of recipe when the product name cannot be found in the recipe list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_recipeNotFound() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand drc \u003d new DeleteRecipeCommand(\"Cake\", Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Cake does not exist in recipe list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertInventoryCommandFailure(drc, model, DeleteRecipeCommand.MESSAGE_RECIPE_NOT_FOUND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure of deletion of recipe when product name can be found but index is out of range."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_indexOutOfRange() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand drc \u003d new DeleteRecipeCommand(\"Apple\", Index.fromOneBased(2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // index out of range since only 1 recipe for apple"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        drc.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertInventoryCommandFailure(drc, model, DeleteRecipeCommand.MESSAGE_INDEX_NOT_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.APPLE_PIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ModelStubWithRecipeList modelStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ModelStubWithRecipeList expectedModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        modelStub \u003d new ModelStubWithRecipeList(TypicalRecipes.getTypicalRecipeList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithRecipeList(TypicalRecipes.getTypicalRecipeList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void constructor_throwsNullException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteRecipeCommand(null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for successful deletion of a recipe found in the recipe list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand drc \u003d new DeleteRecipeCommand(\"Apple\", Index.fromOneBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModelStub.deleteRecipe(APPLE_PIE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteRecipeCommand.MESSAGE_SUCCESS, APPLE_PIE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult commandResult \u003d drc.execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), commandResult);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(expectedModelStub, modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure of deletion of recipe when the product name cannot be found in the recipe list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_recipeNotFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand drc \u003d new DeleteRecipeCommand(\"Cake\", Index.fromOneBased(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Cake does not exist in recipe list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(CommandException.class, DeleteRecipeCommand.MESSAGE_RECIPE_NOT_FOUND, ("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ) -\u003e drc.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(expectedModelStub, modelStub);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure of deletion of recipe when product name can be found but index is out of range."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_indexOutOfRange() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand drc \u003d new DeleteRecipeCommand(\"Apple\", Index.fromOneBased(2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // index out of range since only 1 recipe for apple"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        drc.execute(modelStub);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(CommandException.class, DeleteRecipeCommand.MESSAGE_INDEX_NOT_FOUND, ("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ) -\u003e drc.execute(modelStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(expectedModelStub, modelStub);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for equivalency."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand deleteAppleCommand \u003d new DeleteRecipeCommand(\"Apple\", Index.fromOneBased(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand deleteApple2Command \u003d new DeleteRecipeCommand(\"Apple\", Index.fromOneBased(2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand deleteBananaCommand \u003d new DeleteRecipeCommand(\"Banana\", Index.fromOneBased(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(deleteAppleCommand.equals(deleteAppleCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand deleteApple1Command \u003d new DeleteRecipeCommand(\"Apple\", Index.fromOneBased(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(deleteAppleCommand.equals(deleteApple1Command));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(deleteAppleCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(deleteAppleCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different product name -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(deleteAppleCommand.equals(deleteBananaCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(deleteAppleCommand.equals(deleteApple2Command));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * A Model stub which contains a recipe list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private class ModelStubWithRecipeList extends ModelStub {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final RecipeList recipeList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ModelStubWithRecipeList(ReadOnlyRecipeList recipeList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.recipeList \u003d new RecipeList(recipeList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeList.getRecipeList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return recipeList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return filteredRecipes;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            recipeList.deleteRecipe(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditItemCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertInventoryCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.APPLE_PIE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EditItemCommandIntegrationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Item apple;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Sets up model to contain an item list with only the item apple in it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model \u003d new ModelManager(new ItemList(), new LocationList(), new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModel \u003d new ModelManager(new ItemList(), new LocationList(), new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        apple \u003d new ItemBuilder(APPLE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.addItem(apple);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for successful edit of an item\u0027s quantity and description found in the item list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_multipleFields_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descriptor \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setQuantity(new Quantity(VALID_ITEM_QUANTITY_BANANA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setDescription(VALID_ITEM_DESCRIPTION_BANANA);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, apple);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // expected model should contain the edited apple"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .withQuantity(VALID_ITEM_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .withDescription(VALID_ITEM_DESCRIPTION_BANANA)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModel.addItem(editedApple);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(eic, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for successful edit of an item\u0027s name found in the item list and correct update in recipe."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_withRecipeList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descriptor \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setName(VALID_ITEM_NAME_BANANA);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, VALID_ITEM_NAME_BANANA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.addRecipe(APPLE_PIE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModel.addItem(editedApple);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Recipe updatedRecipe \u003d APPLE_PIE.setProductName(VALID_ITEM_NAME_BANANA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModel.addRecipe(updatedRecipe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(eic, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure when no field is specified."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_noFieldSpecified_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // edit command has empty descriptor with no fields specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, new EditItemCommand.EditItemDescriptor());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertInventoryCommandFailure(eic, model, EditItemCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure when the edited item is a duplicate of an existing item."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_duplicateItem_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item banana \u003d new ItemBuilder(APPLE).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.addItem(banana); // model now has apple and banana"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descriptor \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setName(banana.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // This command tries to modify apple to be named banana, which is already in the model"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertInventoryCommandFailure(eic, model, EditItemCommand.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 6,
      "khenghun": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EditItemCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ModelStubWithItemList modelStub;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ModelStubWithItemList expectedModelStub;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Item apple \u003d new ItemBuilder(APPLE).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ItemList itemList \u003d new ItemList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private ItemList expectedItemList \u003d new ItemList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void constructor_throwsNullException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditItemCommand(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for successful edit of an item\u0027s quantity found in the item list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_singleField_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemList.addItem(apple);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        modelStub \u003d new ModelStubWithItemList(itemList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descriptor \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setQuantity(new Quantity(VALID_ITEM_QUANTITY_BANANA));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, apple);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // expected model should contain the edited apple"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedItemList.addItem(editedApple);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithItemList(expectedItemList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(eic, modelStub, expectedMessage, expectedModelStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for successful edit of an item\u0027s quantity and description found in the item list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_multipleFields_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemList.addItem(apple);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        modelStub \u003d new ModelStubWithItemList(itemList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descriptor \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setQuantity(new Quantity(VALID_ITEM_QUANTITY_BANANA));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setDescription(VALID_ITEM_DESCRIPTION_BANANA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String expectedMessage \u003d String.format(EditItemCommand.MESSAGE_EDIT_ITEM_SUCCESS, apple);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // expected model should contain the edited apple"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .withQuantity(VALID_ITEM_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .withDescription(VALID_ITEM_DESCRIPTION_BANANA)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedItemList.addItem(editedApple);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithItemList(expectedItemList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(eic, modelStub, expectedMessage, expectedModelStub);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure when no field is specified."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_noFieldSpecified_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemList.addItem(apple);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        modelStub \u003d new ModelStubWithItemList(itemList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedItemList.addItem(apple);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithItemList(expectedItemList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // edit command has empty descriptor with no fields specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, new EditItemCommand.EditItemDescriptor());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e eic.execute(modelStub),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                EditItemCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(expectedModelStub, modelStub);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for failure when the edited item is a duplicate of an existing item."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_duplicateItem_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemList.addItem(apple);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item banana \u003d new ItemBuilder(APPLE).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemList.addItem(banana);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        modelStub \u003d new ModelStubWithItemList(itemList); // model now has apple and banana"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descriptor \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setName(banana.getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // This command tries to modify apple to be named banana, which is already in the model"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand eic \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // expected model should be the same as the model"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedItemList.addItem(apple);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedItemList.addItem(banana);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModelStub \u003d new ModelStubWithItemList(expectedItemList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e eic.execute(modelStub),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                EditItemCommand.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(expectedModelStub, modelStub);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descName \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descName.setName(\"x\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand editName \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descName2 \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descName2.setName(\"x\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand editName2 \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descName2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(editName.equals(editName2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(editName.equals(editName));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(editName.equals(null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(editName.equals(new ListItemCommand()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(editName.equals(new EditItemCommand(VALID_ITEM_NAME_BANANA, descName)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        EditItemCommand.EditItemDescriptor descQuant \u003d new EditItemCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descQuant.setQuantity(new Quantity(\"1\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(editName.equals(new EditItemCommand(VALID_ITEM_NAME_APPLE, descQuant)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * A Model stub which contains an item list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static class ModelStubWithItemList extends ModelStub {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final ItemList itemList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ModelStubWithItemList(ReadOnlyItemList itemList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.itemList \u003d new ItemList(itemList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return itemList;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return filteredItems;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            itemList.setItem(target, editedItem);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return itemList.hasItem(item);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 13,
      "khenghun": 191
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.NameMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindItemCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class FindItemCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    // TODO update tests after command implementation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalItemList(), new LocationList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalItemList(), new LocationList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "            new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                new NameMatchesKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                new NameMatchesKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FindItemCommand findFirstCommand \u003d new FindItemCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FindItemCommand findSecondCommand \u003d new FindItemCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FindItemCommand findFirstCommandCopy \u003d new FindItemCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_zeroKeywords_noItemFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_NO_ITEM_MATCH;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FindItemCommand command \u003d new FindItemCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_multipleKeywords_multipleItemsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_ITEMS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate predicate \u003d preparePredicate(\"Apple Banana Carrot\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FindItemCommand command \u003d new FindItemCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        expectedModel.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertEquals(Arrays.asList(TypicalItems.APPLE, TypicalItems.BANANA), model.getFilteredItemList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private NameMatchesKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        return new NameMatchesKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 87,
      "khenghun": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListItemCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListItemCommandIntegrationTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final ListItemCommand listItemCommand \u003d new ListItemCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with non-empty item list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Model model \u003d new ModelManager(TypicalItems.getTypicalItemList(), new LocationList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.setItemList(TypicalItems.getTypicalItemList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListItemCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.ITEMS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listItemCommand, model, expectedCommandResult, model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with empty item list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_showEmptyItemList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Model model \u003d new ModelManager(new ItemList(), new LocationList(), new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListItemCommand.MESSAGE_NO_ITEMS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.ITEMS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listItemCommand, model, expectedCommandResult, model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListItemCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListItemCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final ListItemCommand listItemCommand \u003d new ListItemCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with non-empty item list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ModelStubWithItemList modelStub \u003d new ModelStubWithItemList(TypicalItems.getTypicalItemList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListItemCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.ITEMS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listItemCommand, modelStub, expectedCommandResult, modelStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with empty item list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_showEmptyItemList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ModelStubWithItemList modelStub \u003d new ModelStubWithItemList(new ItemList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListItemCommand.MESSAGE_NO_ITEMS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.ITEMS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listItemCommand, modelStub, expectedCommandResult, modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * A Model stub which contains an item list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private class ModelStubWithItemList extends ModelStub {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final ItemList itemList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ModelStubWithItemList(ReadOnlyItemList itemList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.itemList \u003d new ItemList(itemList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            filteredItems \u003d new FilteredList\u003c\u003e(this.itemList.getItemList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return itemList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return filteredItems;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListRecipeCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationsList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListRecipeCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final ListRecipeCommand listRecipeCommand \u003d new ListRecipeCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model \u003d new ModelManager(TypicalItems.getTypicalItemList(), getTypicalLocationsList(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                new RecipeList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with non-empty recipe list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        model.setRecipeList(TypicalRecipes.getTypicalRecipeList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListRecipeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.RECIPES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listRecipeCommand, model, expectedCommandResult, model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with empty recipe list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_showEmptyRecipeList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListRecipeCommand.MESSAGE_NO_RECIPES,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.RECIPES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listRecipeCommand, model, expectedCommandResult, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListRecipeCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final ListRecipeCommand listRecipeCommand \u003d new ListRecipeCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with non-empty recipe list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ModelStubWithRecipeList modelStub \u003d new ModelStubWithRecipeList(TypicalRecipes.getTypicalRecipeList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListRecipeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.RECIPES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listRecipeCommand, modelStub, expectedCommandResult, modelStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for correct execution and displayed message with empty recipe list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void execute_showEmptyItemList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ModelStubWithRecipeList modelStub \u003d new ModelStubWithRecipeList(new RecipeList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ListRecipeCommand.MESSAGE_NO_RECIPES,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                false, false, DisplayedInventoryType.RECIPES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertCommandSuccess(listRecipeCommand, modelStub, expectedCommandResult, modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * A Model stub which contains a recipe list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private class ModelStubWithRecipeList extends ModelStub {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final RecipeList recipeList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ModelStubWithRecipeList(ReadOnlyRecipeList recipeList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            this.recipeList \u003d new RecipeList(recipeList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeList.getRecipeList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return recipeList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "            return filteredRecipes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * A default model stub that have all of the methods failing EXCEPT processPrecursors and getFilteredItemList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * This is because we minimally need the processPrecursors method to handle AddItemCommand and RecipeDeletion"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * to reset the data to its original state (when needed)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class ModelStub extends ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Path getLocationListFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Path getRecipeListFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setItemListFilePath(Path itemListFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipeListFilePath(Path recipeListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void addLocation(Location location) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setItemList(ReadOnlyItemList itemList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipeList(ReadOnlyRecipeList recipeList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ReadOnlyItemList getItemList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ReadOnlyLocationList getLocationList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ReadOnlyRecipeList getRecipeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void deleteItem(Item target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ObservableList\u003cLocation\u003e getFilteredLocationList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void updateFilteredLocationList(Predicate\u003cLocation\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public int findLocationID(Location toFind) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewDetailsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.NameIsExactlyPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.ui.DisplayedInventoryType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewDetailsCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ViewDetailsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private ModelStubWithItem modelStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private Item validItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        validItem \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        modelStub \u003d new ModelStubWithItem(validItem);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        NameIsExactlyPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                new NameIsExactlyPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        NameIsExactlyPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                new NameIsExactlyPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ViewDetailsCommand findFirstCommand \u003d new ViewDetailsCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ViewDetailsCommand findSecondCommand \u003d new ViewDetailsCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ViewDetailsCommand findFirstCommandCopy \u003d new ViewDetailsCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void execute_filterItem_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String expectedMessage \u003d \"Displaying searched item\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        NameIsExactlyPredicate predicate \u003d new NameIsExactlyPredicate("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                Collections.singletonList(\"Bob\u0027s Iridescent Grape\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ViewDetailsCommand command \u003d new ViewDetailsCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(command.execute(modelStub), new CommandResult(expectedMessage, false,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                false, DisplayedInventoryType.DETAILED_ITEM));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        List\u003cItem\u003e expectedList \u003d Collections.singletonList(validItem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ObservableList\u003cItem\u003e expectedObservableList \u003d FXCollections.observableList(expectedList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        FilteredList\u003cItem\u003e expectedFilteredList \u003d expectedObservableList.filtered(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(expectedFilteredList, modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * A Model stub that contains a single item."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private class ModelStubWithItem extends ModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        private final Item item;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ModelStubWithItem(Item item) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            List\u003cItem\u003e list \u003d Collections.singletonList(item);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return FXCollections.observableList(list);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 85,
      "blackonyyx": 11,
      "khenghun": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_DESCRIPTION_DESC_APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_DESCRIPTION_DESC_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_LOCATION_DESC_PEACH_ORCHARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_LOCATION_DESC_SPINACH_GARDEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_NAME_DESC_APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_NAME_DESC_BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_QUANTITY_DESC_APPLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_QUANTITY_DESC_BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_LOCATION_PEACH_ORCHARD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItemPrecursors.DEFAULT_DESCRIPTION_PRECURSOR;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItemPrecursors.DEFAULT_QUANTITY_PRECURSOR;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItemPrecursors.LOCATED_BANANA_PRECURSOR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemPrecursorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddItemCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private AddItemCommandParser parser \u003d new AddItemCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for if all fields present."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor expectedItem \u003d new ItemPrecursorBuilder(LOCATED_BANANA_PRECURSOR).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_NAME_DESC_BANANA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddItemCommand(expectedItem));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, ITEM_NAME_DESC_APPLE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_NAME_DESC_BANANA"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddItemCommand(expectedItem));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // multiple quantities - last quantity accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, ITEM_NAME_DESC_BANANA"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_QUANTITY_DESC_APPLE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddItemCommand(expectedItem));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, ITEM_NAME_DESC_BANANA"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_APPLE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddItemCommand(expectedItem));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parse_someFieldsMissing_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ItemPrecursor expectedDefaultDescription \u003d new ItemPrecursorBuilder(DEFAULT_DESCRIPTION_PRECURSOR)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // No Item Description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_NAME_DESC_BANANA"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                new AddItemCommand(expectedDefaultDescription));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ItemPrecursor expectedDefaultQuantity \u003d new ItemPrecursorBuilder(DEFAULT_QUANTITY_PRECURSOR)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //No quantity given"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_NAME_DESC_BANANA"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                new AddItemCommand(expectedDefaultQuantity));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for compulsory fields."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parse_compulsoryPrefixMissing_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItemCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, VALID_ITEM_NAME_BANANA"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_PREFIX + VALID_ITEM_NAME_BANANA"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_QUANTITY_DESC_BANANA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_LOCATION_DESC_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // invalid prefixes used"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertParseFailure(parser, ITEM_QUANTITY_DESC_APPLE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        + VALID_ITEM_LOCATION_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, VALID_ITEM_NAME_BANANA"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_ITEM_QUANTITY_BANANA"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_ITEM_DESCRIPTION_BANANA"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_ITEM_LOCATION_PEACH_ORCHARD,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for invalid values."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, ITEM_NAME_DESC_BANANA"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + INVALID_QUANTITY_DESC"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_DESCRIPTION_DESC_BANANA"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + ITEM_LOCATION_DESC_SPINACH_GARDEN,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 37,
      "aqcd": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddQuantityToItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_INT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.AddQuantityToItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddQuantityToItemCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private final AddQuantityToItemCommandParser parser \u003d new AddQuantityToItemCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test creation of add quantity command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_validArgs_returnsAddQuantityToItemCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String userInput \u003d \"addq -n \" + VALID_ITEM_NAME_APPLE + \" -q \" + VALID_QUANTITY_INT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        AddQuantityToItemCommand expectedCommand \u003d new AddQuantityToItemCommand(VALID_ITEM_NAME_APPLE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                VALID_QUANTITY_INT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        //expected user input constructs successful edit item command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_noItemProvided_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, \"a\", AddQuantityToItemCommand.MESSAGE_ITEM_NOT_PROVIDED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddRecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RECIPE_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_DESCRIPTION_APPLE_PIE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_DESCRIPTION_BANANA_PIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_INGREDIENTS_APPLE_PIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_INGREDIENTS_BANANA_PIE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_PRODUCT_NAME_APPLE_PIE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_PRODUCT_NAME_BANANA_PIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_QUANTITY_APPLE_PIE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_QUANTITY_BANANA_PIE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_INGREDIENTS_APPLE_PIE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_PRODUCT_NAME_APPLE_PIE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_QUANTITY_APPLE_PIE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipePrecursors.APPLE_PIE_PRECURSOR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.RecipePrecursorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class AddRecipeCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private AddRecipeCommandParser parser \u003d new AddRecipeCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for if all fields present."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor expectedItem \u003d new RecipePrecursorBuilder(APPLE_PIE_PRECURSOR).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddRecipeCommand(expectedItem));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, RECIPE_PRODUCT_NAME_BANANA_PIE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddRecipeCommand(expectedItem));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // multiple quantities - last quantity accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_BANANA_PIE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddRecipeCommand(expectedItem));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_BANANA_PIE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddRecipeCommand(expectedItem));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // multiple ingredients - last ingredients accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseSuccess(parser, RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_BANANA_PIE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                new AddRecipeCommand(expectedItem));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for compulsory fields."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, VALID_RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_RECIPE_DESC_APPLE_PIE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // missing ingredients prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // missing all prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, VALID_RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_RECIPE_QUANTITY_APPLE_PIE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_RECIPE_DESC_APPLE_PIE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + VALID_RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for invalid values."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, RECIPE_PRODUCT_NAME_APPLE_PIE"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + INVALID_RECIPE_QUANTITY"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_DESCRIPTION_APPLE_PIE"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                        + RECIPE_INGREDIENTS_APPLE_PIE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                ProductQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (ParseException | IOException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (ParseException | IOException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.logic.commands.DeleteItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DeleteItemCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final DeleteItemCommandParser parser \u003d new DeleteItemCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parse_validArgs_returnsDeleteItemCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String userInput \u003d \" -n \" + APPLE.getName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DeleteItemCommand expectedCommand \u003d new DeleteItemCommand(APPLE.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //expected user input constructs successful delete item command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                DeleteItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteRecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class DeleteRecipeCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final DeleteRecipeCommandParser parser \u003d new DeleteRecipeCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parse_validArgs_returnsDeleteRecipeCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        String userInput \u003d \" -n \" + APPLE.getName() + \" -i 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        DeleteRecipeCommand expectedCommand \u003d new DeleteRecipeCommand(APPLE.getName(), Index.fromOneBased(1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        //expected user input constructs successful delete recipe command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests for invalid input, only recipe product name without id, to show the relevant error message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertParseFailure(parser, \"-n test\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                DeleteRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_APPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.EditItemCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.commands.EditItemCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class EditItemCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final EditItemCommandParser parser \u003d new EditItemCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Test creation of edit item command which changes the name field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parse_validArgs_returnsEditItemCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String userInput \u003d \"edit -o \" + VALID_ITEM_NAME_APPLE + \" -n edited\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemDescriptor descriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        descriptor.setName(\"edited\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        EditItemCommand expectedCommand \u003d new EditItemCommand(VALID_ITEM_NAME_APPLE, descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        //expected user input constructs successful edit item command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parse_noItemProvided_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertParseFailure(parser, \"a\", EditItemCommand.MESSAGE_NO_ORIGINAL_ITEM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 7,
      "khenghun": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.logic.commands.FindItemCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.model.item.NameMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class FindItemCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    private FindItemCommandParser parser \u003d new FindItemCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                FindItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        FindItemCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "                new FindItemCommand(new NameMatchesKeywordsPredicate(Arrays.asList(\"Apple\", \"Banana\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertParseSuccess(parser, \"Apple Banana\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertParseSuccess(parser, \" \\n Apple \\n \\t Banana  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ItemParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.parser.ItemParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class ItemParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String VALID_NAME \u003d \"Apple\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String VALID_QUANTITY \u003d \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Red and cute.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Collection\u003cString\u003e VALID_LOCATIONS \u003d Set.of(\"City\", \"Town\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ItemParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            -\u003e ItemParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ItemParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ItemParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_NAME, ItemParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_NAME, ItemParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemParserUtil.parseQuantity((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ItemParserUtil.parseQuantity(INVALID_QUANTITY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_validValueWithoutWhitespace_returnsQuantity() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(expectedQuantity, ItemParserUtil.parseQuantity(VALID_QUANTITY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_validValueWithWhitespace_returnsTrimmedQuantity() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String quantityWithWhitespace \u003d WHITESPACE + VALID_QUANTITY + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(expectedQuantity, ItemParserUtil.parseQuantity(quantityWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_DESCRIPTION, ItemParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_DESCRIPTION, ItemParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseLocation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemParserUtil.parseLocations(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseLocation_validValue_returnsLocations() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_LOCATIONS, ItemParserUtil.parseLocations(VALID_LOCATIONS));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListItemCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ListItemCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListItemCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final ListItemCommandParser parser \u003d new ListItemCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests any blank input argument should give a list item command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parse_validArgs_returnsListItemCommand() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(parser.parse(\" \").getClass(), ListItemCommand.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests any non-blank input argument should display the relevant error message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                ListItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListRecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.commands.ListRecipeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class ListRecipeCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    private final ListRecipeCommandParser parser \u003d new ListRecipeCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests any blank input argument should give a list recipe command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parse_validArgs_returnsListRecipeCommand() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(parser.parse(\" \").getClass(), ListRecipeCommand.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests any non-blank input argument should display the relevant error message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                ListRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khenghun": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RecipeParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class RecipeParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String INVALID_PRODUCT_QUANTITY \u003d \"-1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String VALID_PRODUCT_NAME \u003d \"Apple Pie\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String VALID_PRODUCT_QUANTITY \u003d \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Red and cute.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeParserUtil.parseProductName((String) null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_PRODUCT_NAME, RecipeParserUtil.parseProductName(VALID_PRODUCT_NAME));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_PRODUCT_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_PRODUCT_NAME, RecipeParserUtil.parseProductName(nameWithWhitespace));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeParserUtil.parseProductQuantity((String) null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e RecipeParserUtil.parseProductQuantity(INVALID_PRODUCT_QUANTITY));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_validValueWithoutWhitespace_returnsQuantity() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_PRODUCT_QUANTITY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(expectedQuantity, RecipeParserUtil.parseProductQuantity(VALID_PRODUCT_QUANTITY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseQuantity_validValueWithWhitespace_returnsTrimmedQuantity() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String quantityWithWhitespace \u003d WHITESPACE + VALID_PRODUCT_QUANTITY + WHITESPACE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ProductQuantity expectedQuantity \u003d new ProductQuantity(VALID_PRODUCT_QUANTITY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(expectedQuantity, RecipeParserUtil.parseProductQuantity(quantityWithWhitespace));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_DESCRIPTION, RecipeParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(VALID_DESCRIPTION, RecipeParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewDetailedCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.logic.commands.ViewDetailsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.NameIsExactlyPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ViewDetailedCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private ViewDetailsCommandParser parser \u003d new ViewDetailsCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDetailsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void parse_validArgs_returnsViewDetailsCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ViewDetailsCommand expectedViewDetailsCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                new ViewDetailsCommand(new NameIsExactlyPredicate(Collections.singletonList(\"Shard of Alice #32\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertParseSuccess(parser, \"Shard of Alice #32\", expectedViewDetailsCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class ItemListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final ItemList itemList \u003d new ItemList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(new ItemList(), itemList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(Collections.emptyList(), itemList.getItemList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e itemList.resetData(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void resetData_withValidReadOnlyItemList_replacesData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ItemList data \u003d getTypicalItemList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        itemList.resetData(data);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(data, itemList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void hasItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e itemList.hasItem(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void hasItem_itemNotInItemList_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertFalse(itemList.hasItem(APPLE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void hasItem_itemInItemList_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        itemList.addItem(APPLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertTrue(itemList.hasItem(APPLE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void getItemList_modifyList_throwsUnsupportedOperationExpcetion() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e itemList.getItemList().remove(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void deleteItem_itemInItemList_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        itemList.addItem(APPLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        itemList.deleteItem(APPLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(itemList.hasItem(APPLE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * A stub ReadOnlyItemList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static class ItemListStub implements ReadOnlyItemList {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        private final ObservableList\u003cItem\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ItemListStub(Collection\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.items.setAll(items);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        public ObservableList\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return items;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 82,
      "justacasul": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LOCATIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.DENVER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.NEW_YORK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.APPLE_PIE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BANANA_PIE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemListBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.LocationListBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.RecipeListBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Predicate\u003cItem\u003e ALWAYS_FALSE_PREDICATE_ITEM \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Predicate\u003cLocation\u003e ALWAYS_FALSE_PREDICATE_LOCATION \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Predicate\u003cRecipe\u003e ALWAYS_FALSE_PREDICATE_RECIPE \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(new ItemList(), new ItemList(modelManager.getItemList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(new LocationList(), new LocationList(modelManager.getLocationList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(new RecipeList(), new RecipeList(modelManager.getRecipeList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setItemListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setItemListFilePath(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocationListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLocationListFilePath(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipeListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setRecipeListFilePath(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setItemListFilePath_validPath_setsItemListFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Path path \u003d Paths.get(\"item/list/file/path\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.setItemListFilePath(path);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(path, modelManager.getItemListFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocationListFilePath_validPath_setsLocationListFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Path path \u003d Paths.get(\"location/list/file/path\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.setLocationListFilePath(path);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(path, modelManager.getLocationListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipeListFilePath_validPath_setsRecipeListFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Path path \u003d Paths.get(\"recipe/list/file/path\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.setRecipeListFilePath(path);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(path, modelManager.getRecipeListFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasItem(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasLocation_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasLocation(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasItem_itemNotInItemList_returnsFalse() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.hasItem(APPLE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasLocation_locationNotInLocationList_returnsFalse() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.hasLocation(NEW_YORK));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeList_returnsFalse() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.hasRecipe(APPLE_PIE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasItem_itemInItemList_returnsTrue() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.addItem(APPLE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(modelManager.hasItem(APPLE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasLocation_locationInLocationList_returnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.addLocation(NEW_YORK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(modelManager.hasLocation(NEW_YORK));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void hasRecipe_recipeInRecipeList_returnsTrue() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.addRecipe(APPLE_PIE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(modelManager.hasRecipe(APPLE_PIE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void getFilteredItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .getFilteredItemList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void getFilteredLocationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .getFilteredLocationList().remove(0));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testUpdateRecipeNames() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        modelManager.addRecipe(APPLE_PIE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        modelManager.updateRecipeNames(\"Apple\", \"Banana\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Recipe updatedRecipe \u003d APPLE_PIE.setProductName(VALID_ITEM_NAME_BANANA);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        expectedModelManager.addRecipe(updatedRecipe);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemList itemList \u003d new ItemListBuilder()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withItem(APPLE)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withItem(BANANA)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        LocationList locationList \u003d new LocationListBuilder()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withLocation(NEW_YORK)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withLocation(DENVER)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipeList recipeList \u003d new RecipeListBuilder()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withRecipe(APPLE_PIE)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withRecipe(BANANA_PIE)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemList differentItemList \u003d new ItemList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        LocationList differentLocationList \u003d new LocationList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipeList differentRecipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager \u003d new ModelManager(itemList, locationList, recipeList, userPrefs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(itemList, locationList, recipeList, userPrefs);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different lists -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentItemList,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                locationList, recipeList, userPrefs)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(itemList,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                differentLocationList, recipeList, userPrefs)));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(itemList,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                locationList, differentRecipeList, userPrefs)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different filteredItemList -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.updateFilteredItemList(ALWAYS_FALSE_PREDICATE_ITEM);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(itemList, locationList, recipeList, userPrefs)));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different filteredLocationList -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.updateFilteredLocationList(ALWAYS_FALSE_PREDICATE_LOCATION);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(itemList, locationList, recipeList, userPrefs)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.updateFilteredLocationList(PREDICATE_SHOW_ALL_LOCATIONS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different filteredItemList -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.updateFilteredRecipeList(ALWAYS_FALSE_PREDICATE_RECIPE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(itemList, locationList, recipeList, userPrefs)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        differentUserPrefs.setItemListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(itemList, locationList, recipeList, differentUserPrefs)));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 139,
      "-": 110,
      "khenghun": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void setItemListPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setItemListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void setLocationListPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setLocationListFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void setRecipeListPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setRecipeListFilePath(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 13,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ItemPrecursorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalItemPrecursors.APPLE_PRECURSOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalItemPrecursors.BANANA_PRECURSOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.ItemPrecursorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class ItemPrecursorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for strict item precursor equality, defined as two item precursors"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * having the exact same fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor appleCopy \u003d new ItemPrecursorBuilder(APPLE_PRECURSOR).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PRECURSOR.equals(appleCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PRECURSOR.equals(APPLE_PRECURSOR));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PRECURSOR.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PRECURSOR.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PRECURSOR.equals(BANANA_PRECURSOR));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemPrecursor editedApple \u003d new ItemPrecursorBuilder(APPLE_PRECURSOR).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PRECURSOR.equals(editedApple));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editedApple \u003d new ItemPrecursorBuilder(APPLE_PRECURSOR).withQuantity(VALID_ITEM_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PRECURSOR.equals(editedApple));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editedApple \u003d new ItemPrecursorBuilder(APPLE_PRECURSOR).withDescription(VALID_ITEM_DESCRIPTION_BANANA).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PRECURSOR.equals(editedApple));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that UnsupportedOperationException is thrown when"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * operation is not supported."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item item \u003d new ItemBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e item.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for item equality, defined as two items having the same name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void isSameItem() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(APPLE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.isSameItem(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different quantity and description -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                .withDescription(VALID_ITEM_DESCRIPTION_BANANA).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same name, same quantity -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withDescription(VALID_ITEM_DESCRIPTION_BANANA).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same name, same description -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.isSameItem(editedApple));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for strict item equality, defined as two items having the exact"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * same fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Item appleCopy \u003d new ItemBuilder(APPLE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Item editedApple \u003d new ItemBuilder(APPLE).withName(VALID_ITEM_NAME_BANANA).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_ITEM_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        editedApple \u003d new ItemBuilder(APPLE).withDescription(VALID_ITEM_DESCRIPTION_BANANA).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 83,
      "blackonyyx": 1,
      "aqcd": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/NameMatchesKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "import seedu.address.testutil.ItemBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "public class NameMatchesKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate firstPredicate \u003d new NameMatchesKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate secondPredicate \u003d new NameMatchesKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate firstPredicateCopy \u003d new NameMatchesKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertEquals(firstPredicateCopy, firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertNotEquals(firstPredicate, 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertNotEquals(firstPredicate, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertNotEquals(secondPredicate, firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate predicate \u003d new NameMatchesKeywordsPredicate(Collections.singletonList(\"Apple\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        predicate \u003d new NameMatchesKeywordsPredicate(Arrays.asList(\"Apple\", \"Banana\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        predicate \u003d new NameMatchesKeywordsPredicate(Arrays.asList(\"Banana\", \"Carrot\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Carrot\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        predicate \u003d new NameMatchesKeywordsPredicate(Arrays.asList(\"ApPlE\", \"bAnAnA\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        NameMatchesKeywordsPredicate predicate \u003d new NameMatchesKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        predicate \u003d new NameMatchesKeywordsPredicate(Collections.singletonList(\"Carrot\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "        assertFalse(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rahul0506"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rahul0506": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String invalidQuantity \u003d \"-1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for valid quantity. Only non-negative integers are allowed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"123\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"0\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"1 2\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"1.2\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for equality between quantities."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(new Quantity(\"1\"), new Quantity(\"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertNotEquals(new Quantity(\"1\"), new Quantity(\"2\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 16,
      "khenghun": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/UniqueItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //Contains a expected item"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(APPLE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        // Does not contain unexpected item"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.contains(BANANA));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(1, uList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItem() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.setItem(APPLE, BANANA);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(BANANA));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.contains(APPLE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that setItem throws an exception when item is not found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItem_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uList.setItem(BANANA, APPLE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that setItem throws an exception when input is a duplicate item."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItem_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(BANANA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uList.setItem(BANANA, APPLE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        uList.remove(APPLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // Make sure item is not in the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(uList.contains(APPLE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void delete_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(ItemNotFoundException.class, ()-\u003e uList.remove(BANANA));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.remove(APPLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.contains(APPLE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that exception is thrown when attempting to"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * remove item which does not exist."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void remove_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(ItemNotFoundException.class, ()-\u003e uList.remove(BANANA));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests replacing a UniqueItemList with another."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItems() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList2 \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList2.add(APPLE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.setItems(uList2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(APPLE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests replacing a UniqueItemList with a list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItems_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cItem\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        arr.add(APPLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.setItems(arr);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.contains(APPLE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void setItems_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cItem\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        arr.add(APPLE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        arr.add(APPLE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uList.setItems(arr));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList.add(APPLE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.equals(uList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.equals(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // same internal lists"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList2 \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList2.add(APPLE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertTrue(uList.equals(uList2));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // different internal lists"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        UniqueItemList uList3 \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        uList3.add(BANANA);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertFalse(uList.equals(uList3));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 37,
      "justacasul": 4,
      "aqcd": 6,
      "khenghun": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.DENVER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.NEW_YORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null locations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Desire Town\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Bob\u0027s Vineyard in Cornwall, UK\")); // long location"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for location equality, defined as two locations having the same name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void isSameLocation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(NEW_YORK.isSameLocation(NEW_YORK));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(NEW_YORK.isSameLocation(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Location editedNewYork \u003d new LocationBuilder(NEW_YORK).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(DENVER.isSameLocation(editedNewYork));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for strict location equality, defined as two location having the exact"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * same fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(NEW_YORK.isSameLocation(NEW_YORK));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(NEW_YORK.isSameLocation(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(NEW_YORK.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(NEW_YORK.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(NEW_YORK.equals(DENVER));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Location editedNewYork \u003d new LocationBuilder(NEW_YORK).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(DENVER.isSameLocation(editedNewYork));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/UniqueLocationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.DENVER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.NEW_YORK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class UniqueLocationListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(NEW_YORK);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(NEW_YORK));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.contains(DENVER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(NEW_YORK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(1, uList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(NEW_YORK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.setLocation(NEW_YORK, DENVER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(DENVER));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.contains(NEW_YORK));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that setLocation throws an exception when location is not found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocation_throwsLocationNotFoundException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(NEW_YORK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(LocationNotFoundException.class, () -\u003e uList.setLocation(DENVER, NEW_YORK));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that setLocation throws an exception when input is a duplicate location."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocation_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(DENVER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(NEW_YORK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e uList.setLocation(DENVER, NEW_YORK));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(DENVER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.remove(DENVER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.contains(DENVER));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that exception is thrown when attempting to"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * remove location which does not exist."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void remove_throwsLocationNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(NEW_YORK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(LocationNotFoundException.class, ()-\u003e uList.remove(DENVER));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests replacing a UniqueLocationList with another."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocations() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList2 \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList2.add(NEW_YORK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.setLocations(uList2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(NEW_YORK));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests replacing a UniqueLocationList with a list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocations_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ArrayList\u003cLocation\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        arr.add(NEW_YORK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.setLocations(arr);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(NEW_YORK));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setLocations_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ArrayList\u003cLocation\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        arr.add(NEW_YORK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        arr.add(NEW_YORK);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e uList.setLocations(arr));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(NEW_YORK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.equals(uList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same internal lists"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList2 \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList2.add(NEW_YORK);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.equals(uList2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different internal lists"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueLocationList uList3 \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList3.add(DENVER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.equals(uList3));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/IngredientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.INGREDIENT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.INGREDIENT_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class IngredientListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for exception when duplicate ingredient added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void duplicate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        IngredientList a \u003d TypicalIngredients.getTypicalIngredientList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // duplicate ingredient added -\u003e throw exception"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DuplicateIngredientException.class, () -\u003e a.add(INGREDIENT_1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for contains."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        IngredientList a \u003d TypicalIngredients.getTypicalIngredientList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // list contains ingredient -\u003e return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(a.contains(INGREDIENT_1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(a.contains(INGREDIENT_2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        a.remove(INGREDIENT_1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // list does not contain ingredient -\u003e return false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(a.contains(INGREDIENT_1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for equality."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        IngredientList a \u003d TypicalIngredients.getTypicalIngredientList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        IngredientList b \u003d new IngredientList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        b.add(INGREDIENT_1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        b.add(INGREDIENT_2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same ingredients -\u003e return true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(a.equals(b));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        a \u003d new IngredientList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        a.add(INGREDIENT_1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        b \u003d new IngredientList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        b.add(INGREDIENT_2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different ingredients -\u003e return false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(a.equals(b));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // one list strict subset of the other -\u003e return false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        a.add(INGREDIENT_2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(a.equals(b));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same ingredients -\u003e return true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        a.remove(INGREDIENT_1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(a.equals(b));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.INGREDIENT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import static seedu.address.testutil.TypicalItems.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.model.recipe.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Ingredient(null, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void constructor_invalidIngredient_throwsAssertionException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Integer x \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Integer y \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Ingredient(x, y));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void isItem() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        int sameItemId \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        int differentItemId \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Ensure that a known item id and equivalent int value returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertTrue(INGREDIENT_1.isItem(sameItemId));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // Known item id and non equivalent int value returns false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertFalse(INGREDIENT_1.isItem(differentItemId));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Test for correct display of toString."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testToString_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cItem\u003e itemArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemArrayList.add(APPLE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ObservableList\u003cItem\u003e itemObservableList \u003d FXCollections.observableList(itemArrayList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Ingredient ind \u003d new Ingredient(APPLE.getId(), 5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertEquals(\"Apple [5]\", ind.toString(itemObservableList));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Test for exception thrown in toString when the ingredient cannot be found in the item list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void testToString_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ArrayList\u003cItem\u003e itemArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        itemArrayList.add(APPLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        ObservableList\u003cItem\u003e itemObservableList \u003d FXCollections.observableList(itemArrayList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        Ingredient ind \u003d new Ingredient(APPLE.getId() + 1, 5);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        // ingredient should not be found in the list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e ind.toString(itemObservableList));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 23,
      "khenghun": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/PrintableRecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khenghun"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khenghun"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khenghun"
        },
        "content": "public class PrintableRecipeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khenghun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     * Tests both the constructor and getPrintableIngredients method since the method only retrieves the attribute."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khenghun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    public void getPrintableIngredientsTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khenghun"
        },
        "content": "        PrintableRecipe printableRecipe \u003d new PrintableRecipe(1, TypicalIngredients.getTypicalIngredientList(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                1, \"pr\", new ProductQuantity(\"1\"), \"pr\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khenghun"
        },
        "content": "                FXCollections.observableList(TypicalItems.getTypicalItems()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khenghun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khenghun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "khenghun": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/ProductQuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class ProductQuantityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProductQuantity(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void constructor_invalidProductQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        String invalidQuantity \u003d \"-1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ProductQuantity(invalidQuantity));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for valid quantity. Only non-negative integers are allowed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void isValidProductQuantity() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(ProductQuantity.isValidQuantity(\"123\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(ProductQuantity.isValidQuantity(\"0\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(ProductQuantity.isValidQuantity(\"1 2\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(ProductQuantity.isValidQuantity(\"-2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(ProductQuantity.isValidQuantity(\"1.2\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(ProductQuantity.isValidQuantity(\"a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for equality between quantities."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(new ProductQuantity(\"1\"), new ProductQuantity(\"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotEquals(new ProductQuantity(\"1\"), new ProductQuantity(\"2\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipePrecursorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_DESC_APPLE_PIE_ALTERNATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_QUANTITY_APPLE_PIE_ALTERNATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipePrecursors.APPLE_PIE_PRECURSOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipePrecursors.BANANA_PIE_PRECURSOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.RecipePrecursorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class RecipePrecursorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for strict recipe precursor equality, defined as two recipe precursors having the exact"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * same fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor applePieCopy \u003d new RecipePrecursorBuilder(APPLE_PIE_PRECURSOR).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PIE_PRECURSOR.equals(applePieCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PIE_PRECURSOR.equals(APPLE_PIE_PRECURSOR));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE_PRECURSOR.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE_PRECURSOR.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE_PRECURSOR.equals(BANANA_PIE_PRECURSOR));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipePrecursor editedApplePiePrecursor \u003d new RecipePrecursorBuilder(APPLE_PIE_PRECURSOR)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withIngredients(ingredientList).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE_PRECURSOR.equals(editedApplePiePrecursor));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editedApplePiePrecursor \u003d new RecipePrecursorBuilder(APPLE_PIE_PRECURSOR)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withQuantity(VALID_RECIPE_QUANTITY_APPLE_PIE_ALTERNATE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE_PRECURSOR.equals(editedApplePiePrecursor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editedApplePiePrecursor \u003d new RecipePrecursorBuilder(APPLE_PIE_PRECURSOR)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withDescription(VALID_RECIPE_DESC_APPLE_PIE_ALTERNATE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE_PRECURSOR.equals(editedApplePiePrecursor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_DESC_APPLE_PIE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_DESC_APPLE_PIE_ALTERNATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_ID_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_QUANTITY_APPLE_PIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_QUANTITY_APPLE_PIE_ALTERNATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.APPLE_PIE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BANANA_PIE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests for recipe equality, defined as two recipes having the same id."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void isSameRecipe() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PIE.isSameRecipe(APPLE_PIE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.isSameRecipe(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different quantity and description -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Recipe editedApplePie \u003d new RecipeBuilder(APPLE_PIE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withDescription(VALID_RECIPE_DESC_APPLE_PIE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .withQuantity(VALID_RECIPE_QUANTITY_APPLE_PIE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PIE.isSameRecipe(editedApplePie));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editedApplePie \u003d new RecipeBuilder(APPLE_PIE).withId(VALID_RECIPE_ID_TWO).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.isSameRecipe(editedApplePie));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Test for strict item equality, defined as two items having the exact"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * same fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Recipe applePieCopy \u003d new RecipeBuilder(APPLE_PIE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PIE.equals(applePieCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(APPLE_PIE.equals(APPLE_PIE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different item -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.equals(BANANA_PIE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        IngredientList ingredientList \u003d new IngredientList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Recipe editedApplePie \u003d new RecipeBuilder(APPLE_PIE).withIngredients(ingredientList).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editedApplePie \u003d new RecipeBuilder(APPLE_PIE).withQuantity(VALID_RECIPE_QUANTITY_APPLE_PIE_ALTERNATE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        editedApplePie \u003d new RecipeBuilder(APPLE_PIE).withDescription(VALID_RECIPE_DESC_APPLE_PIE_ALTERNATE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(APPLE_PIE.equals(editedApplePie));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/UniqueRecipeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.APPLE_PIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BANANA_PIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void contains() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(APPLE_PIE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.contains(BANANA_PIE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(1, uList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipe() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.setRecipe(APPLE_PIE, BANANA_PIE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(BANANA_PIE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.contains(APPLE_PIE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that setRecipe throws an exception when recipe is not found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipe_throwsItemNotFoundException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uList.setRecipe(BANANA_PIE, APPLE_PIE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that setRecipe throws an exception when input is a duplicate recipe."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipe_throwsDuplicateItemException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(BANANA_PIE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uList.setRecipe(BANANA_PIE, APPLE_PIE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.remove(APPLE_PIE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.contains(APPLE_PIE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests that exception is thrown when attempting to"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * remove recipe which does not exist."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void remove_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, ()-\u003e uList.remove(BANANA_PIE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests replacing a UniqueRecipeList with another."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setItems() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList2 \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList2.add(APPLE_PIE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.setRecipes(uList2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(APPLE_PIE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests replacing a UniqueRecipeList with a list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipes_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ArrayList\u003cRecipe\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        arr.add(APPLE_PIE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.setRecipes(arr);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.contains(APPLE_PIE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void setRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ArrayList\u003cRecipe\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        arr.add(APPLE_PIE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        arr.add(APPLE_PIE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uList.setRecipes(arr));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList.add(APPLE_PIE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.equals(uList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // same internal lists"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList2 \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList2.add(APPLE_PIE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertTrue(uList.equals(uList2));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // different internal lists"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        UniqueRecipeList uList3 \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        uList3.add(BANANA_PIE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(uList.equals(uList3));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonItemListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import static seedu.address.testutil.TypicalItems.getTypicalItemList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class JsonItemListStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonItemListStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readItemList(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private java.util.Optional\u003cReadOnlyItemList\u003e readItemList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return new JsonItemListStorage(Paths.get(filePath)).readItemList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertFalse(readItemList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItemList(\"notJsonFormatItemList.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readItemList_invalidItemItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItemList(\"invalidItemItemList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readItemList_invalidAndValidItemItemList_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItemList(\"invalidAndValidItemItemList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests reading and saving."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void readAndSaveItemList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempItemList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList original \u003d getTypicalItemList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        JsonItemListStorage jsonItemListStorage \u003d new JsonItemListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        jsonItemListStorage.saveItemList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ReadOnlyItemList readBack \u003d jsonItemListStorage.readItemList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertEquals(original, new ItemList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList_nullItemList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveItemList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests saving {@code itemList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private void saveItemList(ReadOnlyItemList itemList, String filePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            new JsonItemListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    .saveItemList(itemList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public void saveItemList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveItemList(new ItemList(), null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 94,
      "aqcd": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonLocationListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyLocationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class JsonLocationListStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLocationListStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readLocationList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readLocationList(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLocationList\u003e readLocationList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new JsonLocationListStorage(Paths.get(filePath)).readLocationList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(readLocationList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationList(\"notJsonFormatLocationList.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readItemList_invalidLocationLocationList_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationList(\"invalidLocationLocationList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readItemList_invalidAndValidLocationLocationList_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationList(\"invalidAndValidLocationLocationList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests reading and saving."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readAndSaveLocationList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempLocationList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        LocationList original \u003d getTypicalLocationsList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonLocationListStorage jsonLocationListStorage \u003d new JsonLocationListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        jsonLocationListStorage.saveLocationList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ReadOnlyLocationList readBack \u003d jsonLocationListStorage.readLocationList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(original, new LocationList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void saveLocationList_nullLocationList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLocationList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests saving {@code locationList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private void saveLocationList(ReadOnlyLocationList locationList, String filePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            new JsonLocationListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                    .saveLocationList(locationList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void saveLocationList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLocationList(new LocationList(), null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonRecipeListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalRecipeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class JsonRecipeListStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecipeListStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readRecipeList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRecipeList(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRecipeList\u003e readRecipeList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new JsonRecipeListStorage(Paths.get(filePath)).readRecipeList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertFalse(readRecipeList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeList(\"notJsonFormatRecipeList.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readRecipeList_invalidRecipeRecipeList_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeList(\"invalidRecipeRecipeList.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readRecipeList_invalidAndValidRecipeRecipeList_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeList(\"invalidAndValidRecipeRecipeList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests reading and saving."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void readAndSaveRecipeList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempRecipeList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipeList original \u003d getTypicalRecipeList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonRecipeListStorage jsonRecipeListStorage \u003d new JsonRecipeListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        jsonRecipeListStorage.saveRecipeList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ReadOnlyRecipeList readBack \u003d jsonRecipeListStorage.readRecipeList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(original, new RecipeList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void saveRecipeList_nullRecipeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Tests saving {@code recipeList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private void saveRecipeList(ReadOnlyRecipeList recipeList, String filePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            new JsonRecipeListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                    .saveRecipeList(recipeList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void saveRecipeList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeList(new RecipeList(), null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class JsonSerializableItemListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            \"test\", \"data\", \"JsonSerializableItemListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TYPICAL_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalItemsItemList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path INVALID_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidItemItemList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path DUPLICATE_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateItemItemList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_typicalItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableItemList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ITEMS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableItemList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemList itemListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemList typicalItemsItemList \u003d TypicalItems.getTypicalItemList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(itemListFromFile, typicalItemsItemList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_invalidItemFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableItemList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ITEM_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableItemList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_duplicateItems_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableItemList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ITEM_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableItemList.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableItemList.MESSAGE_DUPLICATE_ITEM,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableLocationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.TypicalLocations;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class JsonSerializableLocationListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            \"test\", \"data\", \"JsonSerializableLocationListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TYPICAL_LOCATIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalLocationsLocationList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path INVALID_LOCATION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLocationLocationList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path DUPLICATE_LOCATION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateLocationLocationList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_typicalLocationsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableLocationList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_LOCATIONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableLocationList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        LocationList locationListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        LocationList typicalLocationsLocationList \u003d TypicalLocations.getTypicalLocationsList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(locationListFromFile, typicalLocationsLocationList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_invalidLocationFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableLocationList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_LOCATION_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableLocationList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(NullPointerException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_duplicateLocations_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableLocationList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_LOCATION_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableLocationList.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableLocationList.MESSAGE_DUPLICATE_LOCATION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableRecipeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class JsonSerializableRecipeListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            \"test\", \"data\", \"JsonSerializableRecipeListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path TYPICAL_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecipesRecipeList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path INVALID_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecipeRecipeList.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private static final Path DUPLICATE_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecipeRecipeList.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_typicalRecipesFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableRecipeList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECIPES_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableRecipeList.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipeList recipeListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipeList typicalRecipesRecipeList \u003d TypicalRecipes.getTypicalRecipeList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(recipeListFromFile, typicalRecipesRecipeList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_invalidRecipeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableRecipeList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECIPE_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableRecipeList.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void toModelType_duplicateRecipes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonSerializableRecipeList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECIPE_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                JsonSerializableRecipeList.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableRecipeList.MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ReadOnlyRecipeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.TypicalItems;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonItemListStorage itemListStorage \u003d new JsonItemListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonRecipeListStorage recipeListStorage \u003d new JsonRecipeListStorage(getTempFilePath(\"ac\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        JsonLocationListStorage locationListStorage \u003d new JsonLocationListStorage(getTempFilePath(\"ad\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        storageManager \u003d new StorageManager(itemListStorage, locationListStorage, recipeListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void itemListReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "         * {@link JsonItemListStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "         * More extensive testing of ItemList saving/reading is done in {@link JsonItemListStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "         *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "         * Similar for the below tests."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ItemList original \u003d TypicalItems.getTypicalItemList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        storageManager.saveItemList(original);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ReadOnlyItemList retrieved \u003d storageManager.readItemList().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(original, new ItemList(retrieved));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void recipeListReadSave() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipeList original \u003d TypicalRecipes.getTypicalRecipeList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        storageManager.saveRecipeList(original);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ReadOnlyRecipeList retrieved \u003d storageManager.readRecipeList().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(original, new RecipeList(retrieved));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    // TODO fix this test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void locationListReadSave() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        LocationList original \u003d TypicalLocations.getTypicalLocationsList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        storageManager.saveLocationList(original);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ReadOnlyLocationList retrieved \u003d storageManager.readLocationList().get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertEquals(original, new LocationList(retrieved));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void getItemListFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotNull(storageManager.getItemListFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public void getRecipeListFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        assertNotNull(storageManager.getRecipeListFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 45,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItemBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class ItemBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Bob\u0027s Iridescent Grape\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"25\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Rare drop from Bob\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Set\u003cInteger\u003e DEFAULT_RECIPES \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Set\u003cInteger\u003e recipes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Creates a {@code ItemBuilder} with the default details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.recipes \u003d DEFAULT_RECIPES;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Initializes the ItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        id \u003d itemToCopy.getId();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        name \u003d itemToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        quantity \u003d itemToCopy.getQuantity();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        description \u003d itemToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        recipes \u003d new HashSet\u003c\u003e(itemToCopy.getRecipeIds());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code id} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemBuilder withId(int id) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the {@code Name} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Recipes} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemBuilder withRecipe(Set\u003cInteger\u003e recipes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.recipes \u003d recipes;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Sets the {@code Description} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public ItemBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Builds an item."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @return a sample Item"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new Item(id, name, quantity, description,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                new HashSet\u003c\u003e(), recipes, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 67,
      "aqcd": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItemListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * A utility class to help with building ItemList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": " *     {@code ItemList ab \u003d new ItemListBuilder().withItem(\"Apple\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class ItemListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private ItemList itemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemList \u003d new ItemList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemListBuilder(ItemList itemList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.itemList \u003d itemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Adds a new {@code Item} to the {@code ItemList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemListBuilder withItem(Item item) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        itemList.addItem(item);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return itemList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItemPrecursorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * A utility class to help with building ItemPrecursor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class ItemPrecursorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Bob\u0027s Iridescent Grape\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"25\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Rare drop from Bob\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Set\u003cString\u003e DEFAULT_LOCATIONS \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private Set\u003cString\u003e locations;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Creates a {@code ItemBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemPrecursorBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.locations \u003d DEFAULT_LOCATIONS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Initializes the ItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemPrecursorBuilder(ItemPrecursor itemToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        name \u003d itemToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        quantity \u003d itemToCopy.getQuantity();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        description \u003d itemToCopy.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        Set\u003cString\u003e locationSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        locationSet.addAll(itemToCopy.getLocationNames());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        locations \u003d locationSet;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Name} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemPrecursorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemPrecursorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Description} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemPrecursorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Locations} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemPrecursorBuilder withLocations(Set\u003cString\u003e locations) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.locations \u003d locations;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Builds an item precursor."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @return a sample ItemPrecursor."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public ItemPrecursor build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new ItemPrecursor(1, name, quantity, description,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "                locations, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * A utility class to help with building Location objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class LocationBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"SEATTLE\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Creates a {@code LocationBuilder} with the default details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public LocationBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Initializes the LocationBuilder with the data of {@code locationToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public LocationBuilder(Location locationToCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        name \u003d locationToCopy.getName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Name} of the {@code Location} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public LocationBuilder withName(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Builds a location."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @return a sample Location"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Location build() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new Location(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * A utility class to help with building LocationList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": " *     {@code LocationList ab \u003d new LocationListBuilder().withLocation(\"City\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class LocationListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private LocationList locationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public LocationListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        locationList \u003d new LocationList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public LocationListBuilder(LocationList locationList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.locationList \u003d locationList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Adds a new {@code Location} to the {@code LocationList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public LocationListBuilder withLocation(Location location) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        locationList.addLocation(location);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public LocationList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return locationList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_PRODUCT_QUANTITY \u003d \"1\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Craftable Material\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private ProductQuantity quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private IngredientList ingredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Creates a {@code RecipeBuilder} with the default details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.quantity \u003d new ProductQuantity(DEFAULT_PRODUCT_QUANTITY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.ingredients \u003d TypicalIngredients.getTypicalIngredientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        id \u003d recipeToCopy.getId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        quantity \u003d recipeToCopy.getProductQuantity();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ingredients \u003d recipeToCopy.getIngredients();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        description \u003d recipeToCopy.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the id of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeBuilder withId(int id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.quantity \u003d new ProductQuantity(quantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Ingredients} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeBuilder withIngredients(IngredientList ingredients) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Description} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Builds a recipe."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @return a sample Recipe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new Recipe(id, ingredients, 0, \"Apple\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                quantity, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "aqcd": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * A utility class to help with building RecipeList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": " *     {@code RecipeList ab \u003d new RecipeListBuilder().withRecipe(\"Apple Pie\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class RecipeListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private RecipeList recipeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        recipeList \u003d new RecipeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeListBuilder(RecipeList recipeList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.recipeList \u003d recipeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Adds a new {@code Location} to the {@code LocationList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeListBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        recipeList.addRecipe(recipe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipeList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipePrecursorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.ProductQuantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class RecipePrecursorBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final int DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_PRODUCT_NAME \u003d \"Apple\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_PRODUCT_QUANTITY \u003d \"1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Craftable Material\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private String productName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private ProductQuantity quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private List\u003cIngredientPrecursor\u003e ingredients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Creates a {@code RecipeBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.id \u003d DEFAULT_ID;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.productName \u003d DEFAULT_PRODUCT_NAME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.quantity \u003d new ProductQuantity(DEFAULT_PRODUCT_QUANTITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.ingredients \u003d TypicalIngredientPrecursors.getTypicalIngredientList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursorBuilder(RecipePrecursor recipeToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        id \u003d recipeToCopy.getId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        productName \u003d recipeToCopy.getProductName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        quantity \u003d recipeToCopy.getProductQuantity();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ingredients \u003d recipeToCopy.getIngredientPrecursors();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        description \u003d recipeToCopy.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the id of the {@code RecipePrecursor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursorBuilder withId(int id) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the product name of the {@code RecipePrecursor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursorBuilder withProductName(String productName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Quantity} of the {@code RecipePrecursor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.quantity \u003d new ProductQuantity(quantity);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Ingredients} of the {@code RecipePrecursor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursorBuilder withIngredients(List\u003cIngredientPrecursor\u003e ingredients) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Sets the {@code Description} of the {@code RecipePrecursor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Builds a recipe precursor."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * @return a sample RecipePrecursor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public RecipePrecursor build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new RecipePrecursor(id, ingredients, productName, quantity, description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredientPrecursors.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.IngredientPrecursor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class TypicalIngredientPrecursors {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final IngredientPrecursor INGREDIENT_PRECURSOR_1 \u003d new IngredientPrecursor(\"Apple\", 1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final IngredientPrecursor INGREDIENT_PRECURSOR_2 \u003d new IngredientPrecursor(\"Banana\", 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private TypicalIngredientPrecursors() {} // prevents instantiation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Returns an IngredientPrecursor list with all the typical ingredient precursors."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static List\u003cIngredientPrecursor\u003e getTypicalIngredientList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        List\u003cIngredientPrecursor\u003e ab \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ab.add(INGREDIENT_PRECURSOR_1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ab.add(INGREDIENT_PRECURSOR_2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.IngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Ingredient INGREDIENT_1 \u003d new Ingredient(1, 1);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Ingredient INGREDIENT_2 \u003d new Ingredient(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private TypicalIngredients() {} // prevents instantiation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Returns an {@code IngredientList} with all the typical ingredients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static IngredientList getTypicalIngredientList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        IngredientList ab \u003d new IngredientList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ab.add(INGREDIENT_1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        ab.add(INGREDIENT_2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItemPrecursors.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_DESCRIPTION_BANANA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_LOCATION_PEACH_ORCHARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_NAME_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ITEM_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import seedu.address.logic.parser.ItemParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.item.ItemPrecursor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class TypicalItemPrecursors {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final ItemPrecursor APPLE_PRECURSOR \u003d new ItemPrecursorBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withDescription(\"Recovers 10 hp\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withQuantity(\"9\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final ItemPrecursor BANANA_PRECURSOR \u003d new ItemPrecursorBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withDescription(\"Used as bait\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withQuantity(\"99\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final ItemPrecursor LOCATED_BANANA_PRECURSOR \u003d new ItemPrecursorBuilder().withName(\"Banana\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withDescription(\"Used as bait\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withQuantity(\"99\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withLocations(new HashSet\u003c\u003e(Collections.singletonList(\"Bob\u0027s peach orchard\"))).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final ItemPrecursor DEFAULT_DESCRIPTION_PRECURSOR \u003d new ItemPrecursorBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withName(VALID_ITEM_NAME_BANANA)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withDescription(ItemParserUtil.DEFAULT_DESCRIPTION)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withQuantity(VALID_ITEM_QUANTITY_BANANA)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withLocations(new HashSet\u003c\u003e(Collections.singletonList(VALID_ITEM_LOCATION_PEACH_ORCHARD)))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final ItemPrecursor DEFAULT_QUANTITY_PRECURSOR \u003d new ItemPrecursorBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withName(VALID_ITEM_NAME_BANANA)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withDescription(VALID_ITEM_DESCRIPTION_BANANA)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withQuantity(ItemParserUtil.DEFAULT_QUANTITY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withLocations(new HashSet\u003c\u003e(Collections.singletonList(VALID_ITEM_LOCATION_PEACH_ORCHARD)))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private TypicalItemPrecursors() {} // prevents instantiation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 18,
      "aqcd": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItems.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.ItemParserUtil.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static seedu.address.logic.parser.ItemParserUtil.DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.ItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "public class TypicalItems {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Item APPLE \u003d new ItemBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withId(1)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withRecipe(new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withName(\"Apple\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withDescription(\"Recovers 10 hp\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withQuantity(\"9\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Item BANANA \u003d new ItemBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withId(2)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withRecipe(new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withName(\"Banana\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withDescription(\"Used as bait\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            .withQuantity(\"99\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final Item PEAR \u003d new ItemBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withName(\"Pear\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withId(3)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withRecipe(new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withDescription(DEFAULT_DESCRIPTION)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            .withQuantity(DEFAULT_QUANTITY).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private TypicalItems() {} // prevents instantiation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Returns an {@code ItemList} with all the typical items."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static ItemList getTypicalItemList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        ItemList ab \u003d new ItemList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (Item item : getTypicalItems()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            ab.addItem(item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static List\u003cItem\u003e getTypicalItems() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, PEAR));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 35,
      "blackonyyx": 10,
      "aqcd": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLocations.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.LocationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class TypicalLocations {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Location NEW_YORK \u003d new LocationBuilder().withName(\"New York\").build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Location DENVER \u003d new LocationBuilder().withName(\"Denver\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private TypicalLocations() {} // prevents instantiation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Returns an {@code LocationList} with all the typical locations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static LocationList getTypicalLocationsList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        LocationList ab \u003d new LocationList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        for (Location location : getTypicalLocations()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            ab.addLocation(location);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static List\u003cLocation\u003e getTypicalLocations() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(NEW_YORK, DENVER));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipePrecursors.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.RecipePrecursor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class TypicalRecipePrecursors {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final RecipePrecursor APPLE_PIE_PRECURSOR \u003d new RecipePrecursorBuilder()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withId(1)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withProductName(\"Apple Pie\")"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withDescription(\"Apple-y!\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final RecipePrecursor BANANA_PIE_PRECURSOR \u003d new RecipePrecursorBuilder()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withId(2)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withProductName(\"Banana Pie\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withDescription(\"Banana-y!\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aqcd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.RecipeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aqcd"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Recipe APPLE_PIE \u003d new RecipeBuilder().withId(1)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withDescription(\"Apple-y!\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static final Recipe BANANA_PIE \u003d new RecipeBuilder().withId(2)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withDescription(\"Banana-y!\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            .withQuantity(\"1\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * Returns an {@code RecipeList} with all the typical recipes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static RecipeList getTypicalRecipeList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        RecipeList ab \u003d new RecipeList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aqcd"
        },
        "content": "            ab.addRecipe(recipe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aqcd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE_PIE, BANANA_PIE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aqcd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aqcd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aqcd"
        },
        "content": "import seedu.address.InventoryMainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aqcd"
        },
        "content": "        URL testFileUrl \u003d InventoryMainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aqcd"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at VALID_FILE_PATH."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aqcd": 3,
      "-": 111
    }
  }
]
